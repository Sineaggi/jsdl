// Generated by jextract

package org.example;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct DS5EffectsState_t {
 *     unsigned char ucEnableBits1;
 *     unsigned char ucEnableBits2;
 *     unsigned char ucRumbleRight;
 *     unsigned char ucRumbleLeft;
 *     unsigned char ucHeadphoneVolume;
 *     unsigned char ucSpeakerVolume;
 *     unsigned char ucMicrophoneVolume;
 *     unsigned char ucAudioEnableBits;
 *     unsigned char ucMicLightMode;
 *     unsigned char ucAudioMuteBits;
 *     unsigned char rgucRightTriggerEffect[11];
 *     unsigned char rgucLeftTriggerEffect[11];
 *     unsigned char rgucUnknown1[6];
 *     unsigned char ucEnableBits3;
 *     unsigned char rgucUnknown2[2];
 *     unsigned char ucLedAnim;
 *     unsigned char ucLedBrightness;
 *     unsigned char ucPadLights;
 *     unsigned char ucLedRed;
 *     unsigned char ucLedGreen;
 *     unsigned char ucLedBlue;
 * };
 * }
 */
public class DS5EffectsState_t {

    public static MemoryLayout $LAYOUT() {
        return constants.DS_5_EFFECTS_STATE_T;
    }
    public static VarHandle ucEnableBits1$VH() {
        return constants.ucEnableBits1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucEnableBits1;
     * }
     */
    public static byte ucEnableBits1$get(MemorySegment seg) {
        return (byte) constants.ucEnableBits1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucEnableBits1;
     * }
     */
    public static void ucEnableBits1$set(MemorySegment seg, byte x) {
        constants.ucEnableBits1.set(seg, x);
    }
    public static byte ucEnableBits1$get(MemorySegment seg, long index) {
        return (byte) constants.ucEnableBits1.get(seg.asSlice(index * sizeof()));
    }
    public static void ucEnableBits1$set(MemorySegment seg, long index, byte x) {
        constants.ucEnableBits1.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucEnableBits2$VH() {
        return constants.ucEnableBits2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucEnableBits2;
     * }
     */
    public static byte ucEnableBits2$get(MemorySegment seg) {
        return (byte) constants.ucEnableBits2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucEnableBits2;
     * }
     */
    public static void ucEnableBits2$set(MemorySegment seg, byte x) {
        constants.ucEnableBits2.set(seg, x);
    }
    public static byte ucEnableBits2$get(MemorySegment seg, long index) {
        return (byte) constants.ucEnableBits2.get(seg.asSlice(index * sizeof()));
    }
    public static void ucEnableBits2$set(MemorySegment seg, long index, byte x) {
        constants.ucEnableBits2.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucRumbleRight$VH() {
        return constants.ucRumbleRight;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucRumbleRight;
     * }
     */
    public static byte ucRumbleRight$get(MemorySegment seg) {
        return (byte) constants.ucRumbleRight.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucRumbleRight;
     * }
     */
    public static void ucRumbleRight$set(MemorySegment seg, byte x) {
        constants.ucRumbleRight.set(seg, x);
    }
    public static byte ucRumbleRight$get(MemorySegment seg, long index) {
        return (byte) constants.ucRumbleRight.get(seg.asSlice(index * sizeof()));
    }
    public static void ucRumbleRight$set(MemorySegment seg, long index, byte x) {
        constants.ucRumbleRight.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucRumbleLeft$VH() {
        return constants.ucRumbleLeft;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucRumbleLeft;
     * }
     */
    public static byte ucRumbleLeft$get(MemorySegment seg) {
        return (byte)constants.ucRumbleLeft.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucRumbleLeft;
     * }
     */
    public static void ucRumbleLeft$set(MemorySegment seg, byte x) {
        constants.ucRumbleLeft.set(seg, x);
    }
    public static byte ucRumbleLeft$get(MemorySegment seg, long index) {
        return (byte)constants.ucRumbleLeft.get(seg.asSlice(index * sizeof()));
    }
    public static void ucRumbleLeft$set(MemorySegment seg, long index, byte x) {
        constants.ucRumbleLeft.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucHeadphoneVolume$VH() {
        return constants.ucHeadphoneVolume;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucHeadphoneVolume;
     * }
     */
    public static byte ucHeadphoneVolume$get(MemorySegment seg) {
        return (byte)constants.ucHeadphoneVolume.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucHeadphoneVolume;
     * }
     */
    public static void ucHeadphoneVolume$set(MemorySegment seg, byte x) {
        constants.ucHeadphoneVolume.set(seg, x);
    }
    public static byte ucHeadphoneVolume$get(MemorySegment seg, long index) {
        return (byte)constants.ucHeadphoneVolume.get(seg.asSlice(index * sizeof()));
    }
    public static void ucHeadphoneVolume$set(MemorySegment seg, long index, byte x) {
        constants.ucHeadphoneVolume.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucSpeakerVolume$VH() {
        return constants.ucSpeakerVolume;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucSpeakerVolume;
     * }
     */
    public static byte ucSpeakerVolume$get(MemorySegment seg) {
        return (byte)constants.ucSpeakerVolume.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucSpeakerVolume;
     * }
     */
    public static void ucSpeakerVolume$set(MemorySegment seg, byte x) {
        constants.ucSpeakerVolume.set(seg, x);
    }
    public static byte ucSpeakerVolume$get(MemorySegment seg, long index) {
        return (byte)constants.ucSpeakerVolume.get(seg.asSlice(index * sizeof()));
    }
    public static void ucSpeakerVolume$set(MemorySegment seg, long index, byte x) {
        constants.ucSpeakerVolume.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucMicrophoneVolume$VH() {
        return constants.ucMicrophoneVolume;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucMicrophoneVolume;
     * }
     */
    public static byte ucMicrophoneVolume$get(MemorySegment seg) {
        return (byte)constants.ucMicrophoneVolume.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucMicrophoneVolume;
     * }
     */
    public static void ucMicrophoneVolume$set(MemorySegment seg, byte x) {
        constants.ucMicrophoneVolume.set(seg, x);
    }
    public static byte ucMicrophoneVolume$get(MemorySegment seg, long index) {
        return (byte)constants.ucMicrophoneVolume.get(seg.asSlice(index * sizeof()));
    }
    public static void ucMicrophoneVolume$set(MemorySegment seg, long index, byte x) {
        constants.ucMicrophoneVolume.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucAudioEnableBits$VH() {
        return constants.ucAudioEnableBits;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucAudioEnableBits;
     * }
     */
    public static byte ucAudioEnableBits$get(MemorySegment seg) {
        return (byte)constants.ucAudioEnableBits.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucAudioEnableBits;
     * }
     */
    public static void ucAudioEnableBits$set(MemorySegment seg, byte x) {
        constants.ucAudioEnableBits.set(seg, x);
    }
    public static byte ucAudioEnableBits$get(MemorySegment seg, long index) {
        return (byte)constants.ucAudioEnableBits.get(seg.asSlice(index * sizeof()));
    }
    public static void ucAudioEnableBits$set(MemorySegment seg, long index, byte x) {
        constants.ucAudioEnableBits.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucMicLightMode$VH() {
        return constants.ucMicLightMode;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucMicLightMode;
     * }
     */
    public static byte ucMicLightMode$get(MemorySegment seg) {
        return (byte)constants.ucMicLightMode.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucMicLightMode;
     * }
     */
    public static void ucMicLightMode$set(MemorySegment seg, byte x) {
        constants.ucMicLightMode.set(seg, x);
    }
    public static byte ucMicLightMode$get(MemorySegment seg, long index) {
        return (byte)constants.ucMicLightMode.get(seg.asSlice(index * sizeof()));
    }
    public static void ucMicLightMode$set(MemorySegment seg, long index, byte x) {
        constants.ucMicLightMode.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucAudioMuteBits$VH() {
        return constants.ucAudioMuteBits;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucAudioMuteBits;
     * }
     */
    public static byte ucAudioMuteBits$get(MemorySegment seg) {
        return (byte)constants.ucAudioMuteBits.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucAudioMuteBits;
     * }
     */
    public static void ucAudioMuteBits$set(MemorySegment seg, byte x) {
        constants.ucAudioMuteBits.set(seg, x);
    }
    public static byte ucAudioMuteBits$get(MemorySegment seg, long index) {
        return (byte)constants.ucAudioMuteBits.get(seg.asSlice(index * sizeof()));
    }
    public static void ucAudioMuteBits$set(MemorySegment seg, long index, byte x) {
        constants.ucAudioMuteBits.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment rgucRightTriggerEffect$slice(MemorySegment seg) {
        return seg.asSlice(10, 11);
    }
    public static MemorySegment rgucLeftTriggerEffect$slice(MemorySegment seg) {
        return seg.asSlice(21, 11);
    }
    public static MemorySegment rgucUnknown1$slice(MemorySegment seg) {
        return seg.asSlice(32, 6);
    }
    public static VarHandle ucEnableBits3$VH() {
        return constants.ucEnableBits3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucEnableBits3;
     * }
     */
    public static byte ucEnableBits3$get(MemorySegment seg) {
        return (byte)constants.ucEnableBits3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucEnableBits3;
     * }
     */
    public static void ucEnableBits3$set(MemorySegment seg, byte x) {
        constants.ucEnableBits3.set(seg, x);
    }
    public static byte ucEnableBits3$get(MemorySegment seg, long index) {
        return (byte)constants.ucEnableBits3.get(seg.asSlice(index * sizeof()));
    }
    public static void ucEnableBits3$set(MemorySegment seg, long index, byte x) {
        constants.ucEnableBits3.set(seg.asSlice(index * sizeof()), x);
    }
    public static MemorySegment rgucUnknown2$slice(MemorySegment seg) {
        return seg.asSlice(39, 2);
    }
    public static VarHandle ucLedAnim$VH() {
        return constants.ucLedAnim;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedAnim;
     * }
     */
    public static byte ucLedAnim$get(MemorySegment seg) {
        return (byte)constants.ucLedAnim.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedAnim;
     * }
     */
    public static void ucLedAnim$set(MemorySegment seg, byte x) {
        constants.ucLedAnim.set(seg, x);
    }
    public static byte ucLedAnim$get(MemorySegment seg, long index) {
        return (byte)constants.ucLedAnim.get(seg.asSlice(index * sizeof()));
    }
    public static void ucLedAnim$set(MemorySegment seg, long index, byte x) {
        constants.ucLedAnim.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucLedBrightness$VH() {
        return constants.ucLedBrightness;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedBrightness;
     * }
     */
    public static byte ucLedBrightness$get(MemorySegment seg) {
        return (byte)constants.ucLedBrightness.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedBrightness;
     * }
     */
    public static void ucLedBrightness$set(MemorySegment seg, byte x) {
        constants.ucLedBrightness.set(seg, x);
    }
    public static byte ucLedBrightness$get(MemorySegment seg, long index) {
        return (byte)constants.ucLedBrightness.get(seg.asSlice(index * sizeof()));
    }
    public static void ucLedBrightness$set(MemorySegment seg, long index, byte x) {
        constants.ucLedBrightness.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucPadLights$VH() {
        return constants.ucPadLights;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucPadLights;
     * }
     */
    public static byte ucPadLights$get(MemorySegment seg) {
        return (byte)constants.ucPadLights.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucPadLights;
     * }
     */
    public static void ucPadLights$set(MemorySegment seg, byte x) {
        constants.ucPadLights.set(seg, x);
    }
    public static byte ucPadLights$get(MemorySegment seg, long index) {
        return (byte)constants.ucPadLights.get(seg.asSlice(index * sizeof()));
    }
    public static void ucPadLights$set(MemorySegment seg, long index, byte x) {
        constants.ucPadLights.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucLedRed$VH() {
        return constants.ucLedRed;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedRed;
     * }
     */
    public static byte ucLedRed$get(MemorySegment seg) {
        return (byte)constants.ucLedRed.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedRed;
     * }
     */
    public static void ucLedRed$set(MemorySegment seg, byte x) {
        constants.ucLedRed.set(seg, x);
    }
    public static byte ucLedRed$get(MemorySegment seg, long index) {
        return (byte)constants.ucLedRed.get(seg.asSlice(index * sizeof()));
    }
    public static void ucLedRed$set(MemorySegment seg, long index, byte x) {
        constants.ucLedRed.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucLedGreen$VH() {
        return constants.ucLedGreen;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedGreen;
     * }
     */
    public static byte ucLedGreen$get(MemorySegment seg) {
        return (byte)constants.ucLedGreen.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedGreen;
     * }
     */
    public static void ucLedGreen$set(MemorySegment seg, byte x) {
        constants.ucLedGreen.set(seg, x);
    }
    public static byte ucLedGreen$get(MemorySegment seg, long index) {
        return (byte)constants.ucLedGreen.get(seg.asSlice(index * sizeof()));
    }
    public static void ucLedGreen$set(MemorySegment seg, long index, byte x) {
        constants.ucLedGreen.set(seg.asSlice(index * sizeof()), x);
    }
    public static VarHandle ucLedBlue$VH() {
        return constants.ucLedBlue;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedBlue;
     * }
     */
    public static byte ucLedBlue$get(MemorySegment seg) {
        return (byte)constants.ucLedBlue.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedBlue;
     * }
     */
    public static void ucLedBlue$set(MemorySegment seg, byte x) {
        constants.ucLedBlue.set(seg, x);
    }
    public static byte ucLedBlue$get(MemorySegment seg, long index) {
        return (byte)constants.ucLedBlue.get(seg.asSlice(index * sizeof()));
    }
    public static void ucLedBlue$set(MemorySegment seg, long index, byte x) {
        constants.ucLedBlue.set(seg.asSlice(index * sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}
