// Generated by jextract

package sdl.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum SDL_HitTestResult (*SDL_SetWindowHitTest$callback)(struct SDL_Window*,struct SDL_Point*,void*);
 * }
 */
public interface SDL_SetWindowHitTest$callback {

    int apply(java.lang.foreign.MemorySegment win, java.lang.foreign.MemorySegment area, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(SDL_SetWindowHitTest$callback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$86.const$2, fi, constants$21.const$2, scope);
    }
    static SDL_SetWindowHitTest$callback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _win, java.lang.foreign.MemorySegment _area, java.lang.foreign.MemorySegment _data) -> {
            try {
                return (int)constants$86.const$1.invokeExact(symbol, _win, _area, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


