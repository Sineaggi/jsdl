// Generated by jextract

package sdl.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_VirtualJoystickDesc {
 *     unsigned short version;
 *     unsigned short type;
 *     unsigned short naxes;
 *     unsigned short nbuttons;
 *     unsigned short nhats;
 *     unsigned short vendor_id;
 *     unsigned short product_id;
 *     unsigned short padding;
 *     unsigned int button_mask;
 *     unsigned int axis_mask;
 *     char* name;
 *     void* userdata;
 *     void (*Update)(void*);
 *     void (*SetPlayerIndex)(void*,int);
 *     int (*Rumble)(void*,unsigned short,unsigned short);
 *     int (*RumbleTriggers)(void*,unsigned short,unsigned short);
 *     int (*SetLED)(void*,unsigned char,unsigned char,unsigned char);
 *     int (*SendEffect)(void*,void*,int);
 * };
 * }
 */
public class SDL_VirtualJoystickDesc {

    public static MemoryLayout $LAYOUT() {
        return constants$98.const$0;
    }
    public static VarHandle version$VH() {
        return constants$98.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short version;
     * }
     */
    public static short version$get(MemorySegment seg) {
        return (short)constants$98.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short version;
     * }
     */
    public static void version$set(MemorySegment seg, short x) {
        constants$98.const$1.set(seg, x);
    }
    public static short version$get(MemorySegment seg, long index) {
        return (short)constants$98.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, short x) {
        constants$98.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type$VH() {
        return constants$98.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short type;
     * }
     */
    public static short type$get(MemorySegment seg) {
        return (short)constants$98.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short type;
     * }
     */
    public static void type$set(MemorySegment seg, short x) {
        constants$98.const$2.set(seg, x);
    }
    public static short type$get(MemorySegment seg, long index) {
        return (short)constants$98.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, short x) {
        constants$98.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle naxes$VH() {
        return constants$98.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short naxes;
     * }
     */
    public static short naxes$get(MemorySegment seg) {
        return (short)constants$98.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short naxes;
     * }
     */
    public static void naxes$set(MemorySegment seg, short x) {
        constants$98.const$3.set(seg, x);
    }
    public static short naxes$get(MemorySegment seg, long index) {
        return (short)constants$98.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void naxes$set(MemorySegment seg, long index, short x) {
        constants$98.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nbuttons$VH() {
        return constants$98.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short nbuttons;
     * }
     */
    public static short nbuttons$get(MemorySegment seg) {
        return (short)constants$98.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short nbuttons;
     * }
     */
    public static void nbuttons$set(MemorySegment seg, short x) {
        constants$98.const$4.set(seg, x);
    }
    public static short nbuttons$get(MemorySegment seg, long index) {
        return (short)constants$98.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nbuttons$set(MemorySegment seg, long index, short x) {
        constants$98.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nhats$VH() {
        return constants$98.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short nhats;
     * }
     */
    public static short nhats$get(MemorySegment seg) {
        return (short)constants$98.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short nhats;
     * }
     */
    public static void nhats$set(MemorySegment seg, short x) {
        constants$98.const$5.set(seg, x);
    }
    public static short nhats$get(MemorySegment seg, long index) {
        return (short)constants$98.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void nhats$set(MemorySegment seg, long index, short x) {
        constants$98.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vendor_id$VH() {
        return constants$99.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short vendor_id;
     * }
     */
    public static short vendor_id$get(MemorySegment seg) {
        return (short)constants$99.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short vendor_id;
     * }
     */
    public static void vendor_id$set(MemorySegment seg, short x) {
        constants$99.const$0.set(seg, x);
    }
    public static short vendor_id$get(MemorySegment seg, long index) {
        return (short)constants$99.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void vendor_id$set(MemorySegment seg, long index, short x) {
        constants$99.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle product_id$VH() {
        return constants$99.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short product_id;
     * }
     */
    public static short product_id$get(MemorySegment seg) {
        return (short)constants$99.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short product_id;
     * }
     */
    public static void product_id$set(MemorySegment seg, short x) {
        constants$99.const$1.set(seg, x);
    }
    public static short product_id$get(MemorySegment seg, long index) {
        return (short)constants$99.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void product_id$set(MemorySegment seg, long index, short x) {
        constants$99.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle padding$VH() {
        return constants$99.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short padding;
     * }
     */
    public static short padding$get(MemorySegment seg) {
        return (short)constants$99.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short padding;
     * }
     */
    public static void padding$set(MemorySegment seg, short x) {
        constants$99.const$2.set(seg, x);
    }
    public static short padding$get(MemorySegment seg, long index) {
        return (short)constants$99.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void padding$set(MemorySegment seg, long index, short x) {
        constants$99.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle button_mask$VH() {
        return constants$99.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int button_mask;
     * }
     */
    public static int button_mask$get(MemorySegment seg) {
        return (int)constants$99.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int button_mask;
     * }
     */
    public static void button_mask$set(MemorySegment seg, int x) {
        constants$99.const$3.set(seg, x);
    }
    public static int button_mask$get(MemorySegment seg, long index) {
        return (int)constants$99.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void button_mask$set(MemorySegment seg, long index, int x) {
        constants$99.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle axis_mask$VH() {
        return constants$99.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int axis_mask;
     * }
     */
    public static int axis_mask$get(MemorySegment seg) {
        return (int)constants$99.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int axis_mask;
     * }
     */
    public static void axis_mask$set(MemorySegment seg, int x) {
        constants$99.const$4.set(seg, x);
    }
    public static int axis_mask$get(MemorySegment seg, long index) {
        return (int)constants$99.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void axis_mask$set(MemorySegment seg, long index, int x) {
        constants$99.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle name$VH() {
        return constants$99.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$99.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$99.const$5.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$99.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$99.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle userdata$VH() {
        return constants$100.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* userdata;
     * }
     */
    public static MemorySegment userdata$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* userdata;
     * }
     */
    public static void userdata$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$0.set(seg, x);
    }
    public static MemorySegment userdata$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void userdata$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*Update)(void*);
     * }
     */
    public interface Update {

        void apply(java.lang.foreign.MemorySegment mem);
        static MemorySegment allocate(Update fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$100.const$1, fi, constants$1.const$2, scope);
        }
        static Update ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _mem) -> {
                try {
                    constants$2.const$5.invokeExact(symbol, _mem);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Update$VH() {
        return constants$100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Update)(void*);
     * }
     */
    public static MemorySegment Update$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Update)(void*);
     * }
     */
    public static void Update$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$2.set(seg, x);
    }
    public static MemorySegment Update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Update$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Update Update(MemorySegment segment, Arena scope) {
        return Update.ofAddress(Update$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetPlayerIndex)(void*,int);
     * }
     */
    public interface SetPlayerIndex {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(SetPlayerIndex fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$100.const$3, fi, constants$80.const$2, scope);
        }
        static SetPlayerIndex ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$100.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetPlayerIndex$VH() {
        return constants$100.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetPlayerIndex)(void*,int);
     * }
     */
    public static MemorySegment SetPlayerIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetPlayerIndex)(void*,int);
     * }
     */
    public static void SetPlayerIndex$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$5.set(seg, x);
    }
    public static MemorySegment SetPlayerIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetPlayerIndex$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetPlayerIndex SetPlayerIndex(MemorySegment segment, Arena scope) {
        return SetPlayerIndex.ofAddress(SetPlayerIndex$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*Rumble)(void*,unsigned short,unsigned short);
     * }
     */
    public interface Rumble {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(Rumble fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$101.const$1, fi, constants$101.const$0, scope);
        }
        static Rumble ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)constants$101.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Rumble$VH() {
        return constants$101.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*Rumble)(void*,unsigned short,unsigned short);
     * }
     */
    public static MemorySegment Rumble$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$101.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*Rumble)(void*,unsigned short,unsigned short);
     * }
     */
    public static void Rumble$set(MemorySegment seg, MemorySegment x) {
        constants$101.const$3.set(seg, x);
    }
    public static MemorySegment Rumble$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$101.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void Rumble$set(MemorySegment seg, long index, MemorySegment x) {
        constants$101.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static Rumble Rumble(MemorySegment segment, Arena scope) {
        return Rumble.ofAddress(Rumble$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*RumbleTriggers)(void*,unsigned short,unsigned short);
     * }
     */
    public interface RumbleTriggers {

        int apply(java.lang.foreign.MemorySegment _x0, short _x1, short _x2);
        static MemorySegment allocate(RumbleTriggers fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$101.const$4, fi, constants$101.const$0, scope);
        }
        static RumbleTriggers ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, short __x1, short __x2) -> {
                try {
                    return (int)constants$101.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RumbleTriggers$VH() {
        return constants$101.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*RumbleTriggers)(void*,unsigned short,unsigned short);
     * }
     */
    public static MemorySegment RumbleTriggers$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$101.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*RumbleTriggers)(void*,unsigned short,unsigned short);
     * }
     */
    public static void RumbleTriggers$set(MemorySegment seg, MemorySegment x) {
        constants$101.const$5.set(seg, x);
    }
    public static MemorySegment RumbleTriggers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$101.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void RumbleTriggers$set(MemorySegment seg, long index, MemorySegment x) {
        constants$101.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static RumbleTriggers RumbleTriggers(MemorySegment segment, Arena scope) {
        return RumbleTriggers.ofAddress(RumbleTriggers$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*SetLED)(void*,unsigned char,unsigned char,unsigned char);
     * }
     */
    public interface SetLED {

        int apply(java.lang.foreign.MemorySegment _x0, byte _x1, byte _x2, byte _x3);
        static MemorySegment allocate(SetLED fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$102.const$0, fi, constants$54.const$3, scope);
        }
        static SetLED ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, byte __x1, byte __x2, byte __x3) -> {
                try {
                    return (int)constants$102.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetLED$VH() {
        return constants$102.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*SetLED)(void*,unsigned char,unsigned char,unsigned char);
     * }
     */
    public static MemorySegment SetLED$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$102.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*SetLED)(void*,unsigned char,unsigned char,unsigned char);
     * }
     */
    public static void SetLED$set(MemorySegment seg, MemorySegment x) {
        constants$102.const$2.set(seg, x);
    }
    public static MemorySegment SetLED$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$102.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLED$set(MemorySegment seg, long index, MemorySegment x) {
        constants$102.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLED SetLED(MemorySegment segment, Arena scope) {
        return SetLED.ofAddress(SetLED$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*SendEffect)(void*,void*,int);
     * }
     */
    public interface SendEffect {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(SendEffect fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$102.const$3, fi, constants$6.const$2, scope);
        }
        static SendEffect ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$102.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SendEffect$VH() {
        return constants$102.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*SendEffect)(void*,void*,int);
     * }
     */
    public static MemorySegment SendEffect$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$102.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*SendEffect)(void*,void*,int);
     * }
     */
    public static void SendEffect$set(MemorySegment seg, MemorySegment x) {
        constants$102.const$5.set(seg, x);
    }
    public static MemorySegment SendEffect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$102.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SendEffect$set(MemorySegment seg, long index, MemorySegment x) {
        constants$102.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SendEffect SendEffect(MemorySegment segment, Arena scope) {
        return SendEffect.ofAddress(SendEffect$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


