// Generated by jextract

package sdl.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class sdl_h extends sdl_h_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define HAVE_WINAPIFAMILY_H 1
     * }
     */
    public static int HAVE_WINAPIFAMILY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WINDOWS__ 1
     * }
     */
    public static int __WINDOWS__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WIN32__ 1
     * }
     */
    public static int __WIN32__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZEOF_VOIDP 8
     * }
     */
    public static int SIZEOF_VOIDP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define HAVE_LIBC 1
     * }
     */
    public static int HAVE_LIBC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDC_HEADERS 1
     * }
     */
    public static int STDC_HEADERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CTYPE_H 1
     * }
     */
    public static int HAVE_CTYPE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LIMITS_H 1
     * }
     */
    public static int HAVE_LIMITS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MATH_H 1
     * }
     */
    public static int HAVE_MATH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SIGNAL_H 1
     * }
     */
    public static int HAVE_SIGNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STDINT_H 1
     * }
     */
    public static int HAVE_STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STDIO_H 1
     * }
     */
    public static int HAVE_STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRING_H 1
     * }
     */
    public static int HAVE_STRING_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCHAR_H 1
     * }
     */
    public static int HAVE_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MALLOC 1
     * }
     */
    public static int HAVE_MALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CALLOC 1
     * }
     */
    public static int HAVE_CALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_REALLOC 1
     * }
     */
    public static int HAVE_REALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FREE 1
     * }
     */
    public static int HAVE_FREE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ALLOCA 1
     * }
     */
    public static int HAVE_ALLOCA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_QSORT 1
     * }
     */
    public static int HAVE_QSORT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_BSEARCH 1
     * }
     */
    public static int HAVE_BSEARCH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ABS 1
     * }
     */
    public static int HAVE_ABS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMSET 1
     * }
     */
    public static int HAVE_MEMSET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMCPY 1
     * }
     */
    public static int HAVE_MEMCPY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMMOVE 1
     * }
     */
    public static int HAVE_MEMMOVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMCMP 1
     * }
     */
    public static int HAVE_MEMCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSLEN 1
     * }
     */
    public static int HAVE_WCSLEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSDUP 1
     * }
     */
    public static int HAVE__WCSDUP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSDUP 1
     * }
     */
    public static int HAVE_WCSDUP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSSTR 1
     * }
     */
    public static int HAVE_WCSSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSCMP 1
     * }
     */
    public static int HAVE_WCSCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSNCMP 1
     * }
     */
    public static int HAVE_WCSNCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSICMP 1
     * }
     */
    public static int HAVE__WCSICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSNICMP 1
     * }
     */
    public static int HAVE__WCSNICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRLEN 1
     * }
     */
    public static int HAVE_STRLEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRREV 1
     * }
     */
    public static int HAVE__STRREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRUPR 1
     * }
     */
    public static int HAVE__STRUPR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRLWR 1
     * }
     */
    public static int HAVE__STRLWR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRCHR 1
     * }
     */
    public static int HAVE_STRCHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRRCHR 1
     * }
     */
    public static int HAVE_STRRCHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRSTR 1
     * }
     */
    public static int HAVE_STRSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ITOA 1
     * }
     */
    public static int HAVE_ITOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__LTOA 1
     * }
     */
    public static int HAVE__LTOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__ULTOA 1
     * }
     */
    public static int HAVE__ULTOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOL 1
     * }
     */
    public static int HAVE_STRTOL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOUL 1
     * }
     */
    public static int HAVE_STRTOUL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOLL 1
     * }
     */
    public static int HAVE_STRTOLL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOD 1
     * }
     */
    public static int HAVE_STRTOD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATOI 1
     * }
     */
    public static int HAVE_ATOI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATOF 1
     * }
     */
    public static int HAVE_ATOF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRCMP 1
     * }
     */
    public static int HAVE_STRCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRNCMP 1
     * }
     */
    public static int HAVE_STRNCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRICMP 1
     * }
     */
    public static int HAVE__STRICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRNICMP 1
     * }
     */
    public static int HAVE__STRNICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SSCANF 1
     * }
     */
    public static int HAVE_SSCANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ACOS 1
     * }
     */
    public static int HAVE_ACOS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ACOSF 1
     * }
     */
    public static int HAVE_ACOSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ASIN 1
     * }
     */
    public static int HAVE_ASIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ASINF 1
     * }
     */
    public static int HAVE_ASINF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN 1
     * }
     */
    public static int HAVE_ATAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATANF 1
     * }
     */
    public static int HAVE_ATANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN2 1
     * }
     */
    public static int HAVE_ATAN2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN2F 1
     * }
     */
    public static int HAVE_ATAN2F() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CEIL 1
     * }
     */
    public static int HAVE_CEIL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CEILF 1
     * }
     */
    public static int HAVE_CEILF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COPYSIGN 1
     * }
     */
    public static int HAVE_COPYSIGN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COPYSIGNF 1
     * }
     */
    public static int HAVE_COPYSIGNF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COS 1
     * }
     */
    public static int HAVE_COS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COSF 1
     * }
     */
    public static int HAVE_COSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_EXP 1
     * }
     */
    public static int HAVE_EXP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_EXPF 1
     * }
     */
    public static int HAVE_EXPF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FABS 1
     * }
     */
    public static int HAVE_FABS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FABSF 1
     * }
     */
    public static int HAVE_FABSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FLOOR 1
     * }
     */
    public static int HAVE_FLOOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FLOORF 1
     * }
     */
    public static int HAVE_FLOORF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FMOD 1
     * }
     */
    public static int HAVE_FMOD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FMODF 1
     * }
     */
    public static int HAVE_FMODF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG 1
     * }
     */
    public static int HAVE_LOG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOGF 1
     * }
     */
    public static int HAVE_LOGF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG10 1
     * }
     */
    public static int HAVE_LOG10() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG10F 1
     * }
     */
    public static int HAVE_LOG10F() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LROUND 1
     * }
     */
    public static int HAVE_LROUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LROUNDF 1
     * }
     */
    public static int HAVE_LROUNDF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_POW 1
     * }
     */
    public static int HAVE_POW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_POWF 1
     * }
     */
    public static int HAVE_POWF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROUND 1
     * }
     */
    public static int HAVE_ROUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROUNDF 1
     * }
     */
    public static int HAVE_ROUNDF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SCALBN 1
     * }
     */
    public static int HAVE_SCALBN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SCALBNF 1
     * }
     */
    public static int HAVE_SCALBNF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SIN 1
     * }
     */
    public static int HAVE_SIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SINF 1
     * }
     */
    public static int HAVE_SINF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SQRT 1
     * }
     */
    public static int HAVE_SQRT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SQRTF 1
     * }
     */
    public static int HAVE_SQRTF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TAN 1
     * }
     */
    public static int HAVE_TAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TANF 1
     * }
     */
    public static int HAVE_TANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TRUNC 1
     * }
     */
    public static int HAVE_TRUNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TRUNCF 1
     * }
     */
    public static int HAVE_TRUNCF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_IMMINTRIN_H 1
     * }
     */
    public static int HAVE_IMMINTRIN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D_H 1
     * }
     */
    public static int HAVE_D3D_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D11_H 1
     * }
     */
    public static int HAVE_D3D11_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D12_H 1
     * }
     */
    public static int HAVE_D3D12_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DDRAW_H 1
     * }
     */
    public static int HAVE_DDRAW_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DSOUND_H 1
     * }
     */
    public static int HAVE_DSOUND_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DINPUT_H 1
     * }
     */
    public static int HAVE_DINPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_XINPUT_H 1
     * }
     */
    public static int HAVE_XINPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WINDOWS_GAMING_INPUT_H 1
     * }
     */
    public static int HAVE_WINDOWS_GAMING_INPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DXGI_H 1
     * }
     */
    public static int HAVE_DXGI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MMDEVICEAPI_H 1
     * }
     */
    public static int HAVE_MMDEVICEAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_AUDIOCLIENT_H 1
     * }
     */
    public static int HAVE_AUDIOCLIENT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TPCSHRD_H 1
     * }
     */
    public static int HAVE_TPCSHRD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SENSORSAPI_H 1
     * }
     */
    public static int HAVE_SENSORSAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROAPI_H 1
     * }
     */
    public static int HAVE_ROAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SHELLSCALINGAPI_H 1
     * }
     */
    public static int HAVE_SHELLSCALINGAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DISK 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DISK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DSOUND 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DSOUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_WASAPI 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_WASAPI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_WINMM 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_WINMM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_WGI 1
     * }
     */
    public static int SDL_JOYSTICK_WGI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_DINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_DINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_XINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_XINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_HIDAPI 1
     * }
     */
    public static int SDL_JOYSTICK_HIDAPI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_RAWINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_RAWINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_VIRTUAL 1
     * }
     */
    public static int SDL_JOYSTICK_VIRTUAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_DINPUT 1
     * }
     */
    public static int SDL_HAPTIC_DINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_XINPUT 1
     * }
     */
    public static int SDL_HAPTIC_XINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_SENSOR_WINDOWS 1
     * }
     */
    public static int SDL_SENSOR_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_LOADSO_WINDOWS 1
     * }
     */
    public static int SDL_LOADSO_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_THREAD_GENERIC_COND_SUFFIX 1
     * }
     */
    public static int SDL_THREAD_GENERIC_COND_SUFFIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_THREAD_WINDOWS 1
     * }
     */
    public static int SDL_THREAD_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_TIMER_WINDOWS 1
     * }
     */
    public static int SDL_TIMER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_OFFSCREEN 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_OFFSCREEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_WINDOWS 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D11 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D12 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D12() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_OGL 1
     * }
     */
    public static int SDL_VIDEO_RENDER_OGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_OGL_ES2 1
     * }
     */
    public static int SDL_VIDEO_RENDER_OGL_ES2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_ES2 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_ES2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_WGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_WGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_EGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_EGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_POWER_WINDOWS 1
     * }
     */
    public static int SDL_POWER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_FILESYSTEM_WINDOWS 1
     * }
     */
    public static int SDL_FILESYSTEM_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_MUTEX_TIMEDOUT 1
     * }
     */
    public static int SDL_MUTEX_TIMEDOUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_SET 0
     * }
     */
    public static int RW_SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_CUR 1
     * }
     */
    public static int RW_SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_END 2
     * }
     */
    public static int RW_SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_ALPHA_OPAQUE 255
     * }
     */
    public static int SDL_ALPHA_OPAQUE() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define SDL_ALPHA_TRANSPARENT 0
     * }
     */
    public static int SDL_ALPHA_TRANSPARENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_SWSURFACE 0
     * }
     */
    public static int SDL_SWSURFACE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_PREALLOC 1
     * }
     */
    public static int SDL_PREALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_RLEACCEL 2
     * }
     */
    public static int SDL_RLEACCEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_DONTFREE 4
     * }
     */
    public static int SDL_DONTFREE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_SIMD_ALIGNED 8
     * }
     */
    public static int SDL_SIMD_ALIGNED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_LEFT 1
     * }
     */
    public static int SDL_BUTTON_LEFT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_MIDDLE 2
     * }
     */
    public static int SDL_BUTTON_MIDDLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_RIGHT 3
     * }
     */
    public static int SDL_BUTTON_RIGHT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_X1 4
     * }
     */
    public static int SDL_BUTTON_X1() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_BUTTON_X2 5
     * }
     */
    public static int SDL_BUTTON_X2() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SDL_VIRTUAL_JOYSTICK_DESC_VERSION 1
     * }
     */
    public static int SDL_VIRTUAL_JOYSTICK_DESC_VERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MAX 32767
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_CENTERED 0
     * }
     */
    public static int SDL_HAT_CENTERED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_UP 1
     * }
     */
    public static int SDL_HAT_UP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHT 2
     * }
     */
    public static int SDL_HAT_RIGHT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_DOWN 4
     * }
     */
    public static int SDL_HAT_DOWN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFT 8
     * }
     */
    public static int SDL_HAT_LEFT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SDL_RELEASED 0
     * }
     */
    public static int SDL_RELEASED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_PRESSED 1
     * }
     */
    public static int SDL_PRESSED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_IGNORE 0
     * }
     */
    public static int SDL_IGNORE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_DISABLE 0
     * }
     */
    public static int SDL_DISABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_ENABLE 1
     * }
     */
    public static int SDL_ENABLE() {
        return (int)1L;
    }
    public static MethodHandle SDL_GetPlatform$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"SDL_GetPlatform");
    }
    /**
     * {@snippet :
     * char* SDL_GetPlatform();
     * }
     */
    public static MemorySegment SDL_GetPlatform() {
        var mh$ = SDL_GetPlatform$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_bool.SDL_FALSE = 0;
     * }
     */
    public static int SDL_FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_bool.SDL_TRUE = 1;
     * }
     */
    public static int SDL_TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef signed char Sint8;
     * }
     */
    public static final OfByte Sint8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char Uint8;
     * }
     */
    public static final OfByte Uint8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short Sint16;
     * }
     */
    public static final OfShort Sint16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short Uint16;
     * }
     */
    public static final OfShort Uint16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int Sint32;
     * }
     */
    public static final OfInt Sint32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int Uint32;
     * }
     */
    public static final OfInt Uint32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long Sint64;
     * }
     */
    public static final OfLong Sint64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long Uint64;
     * }
     */
    public static final OfLong Uint64 = JAVA_LONG;
    /**
     * {@snippet :
     * enum SDL_DUMMY_ENUM.DUMMY_ENUM_VALUE = 0;
     * }
     */
    public static int DUMMY_ENUM_VALUE() {
        return (int)0L;
    }
    public static MethodHandle SDL_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"SDL_malloc");
    }
    /**
     * {@snippet :
     * void* SDL_malloc(unsigned long long size);
     * }
     */
    public static MemorySegment SDL_malloc(long size) {
        var mh$ = SDL_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"SDL_calloc");
    }
    /**
     * {@snippet :
     * void* SDL_calloc(unsigned long long nmemb, unsigned long long size);
     * }
     */
    public static MemorySegment SDL_calloc(long nmemb, long size) {
        var mh$ = SDL_calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"SDL_realloc");
    }
    /**
     * {@snippet :
     * void* SDL_realloc(void* mem, unsigned long long size);
     * }
     */
    public static MemorySegment SDL_realloc(MemorySegment mem, long size) {
        var mh$ = SDL_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"SDL_free");
    }
    /**
     * {@snippet :
     * void SDL_free(void* mem);
     * }
     */
    public static void SDL_free(MemorySegment mem) {
        var mh$ = SDL_free$MH();
        try {
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumAllocations$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$5,"SDL_GetNumAllocations");
    }
    /**
     * {@snippet :
     * int SDL_GetNumAllocations();
     * }
     */
    public static int SDL_GetNumAllocations() {
        var mh$ = SDL_GetNumAllocations$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$1,"SDL_getenv");
    }
    /**
     * {@snippet :
     * char* SDL_getenv(char* name);
     * }
     */
    public static MemorySegment SDL_getenv(MemorySegment name) {
        var mh$ = SDL_getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$3,"SDL_setenv");
    }
    /**
     * {@snippet :
     * int SDL_setenv(char* name, char* value, int overwrite);
     * }
     */
    public static int SDL_setenv(MemorySegment name, MemorySegment value, int overwrite) {
        var mh$ = SDL_setenv$MH();
        try {
            return (int)mh$.invokeExact(name, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_abs$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$5,"SDL_abs");
    }
    /**
     * {@snippet :
     * int SDL_abs(int x);
     * }
     */
    public static int SDL_abs(int x) {
        var mh$ = SDL_abs$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$0,"SDL_isalpha");
    }
    /**
     * {@snippet :
     * int SDL_isalpha(int x);
     * }
     */
    public static int SDL_isalpha(int x) {
        var mh$ = SDL_isalpha$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"SDL_isalnum");
    }
    /**
     * {@snippet :
     * int SDL_isalnum(int x);
     * }
     */
    public static int SDL_isalnum(int x) {
        var mh$ = SDL_isalnum$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"SDL_isblank");
    }
    /**
     * {@snippet :
     * int SDL_isblank(int x);
     * }
     */
    public static int SDL_isblank(int x) {
        var mh$ = SDL_isblank$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$3,"SDL_iscntrl");
    }
    /**
     * {@snippet :
     * int SDL_iscntrl(int x);
     * }
     */
    public static int SDL_iscntrl(int x) {
        var mh$ = SDL_iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$4,"SDL_isdigit");
    }
    /**
     * {@snippet :
     * int SDL_isdigit(int x);
     * }
     */
    public static int SDL_isdigit(int x) {
        var mh$ = SDL_isdigit$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"SDL_isxdigit");
    }
    /**
     * {@snippet :
     * int SDL_isxdigit(int x);
     * }
     */
    public static int SDL_isxdigit(int x) {
        var mh$ = SDL_isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$0,"SDL_ispunct");
    }
    /**
     * {@snippet :
     * int SDL_ispunct(int x);
     * }
     */
    public static int SDL_ispunct(int x) {
        var mh$ = SDL_ispunct$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$1,"SDL_isspace");
    }
    /**
     * {@snippet :
     * int SDL_isspace(int x);
     * }
     */
    public static int SDL_isspace(int x) {
        var mh$ = SDL_isspace$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$2,"SDL_isupper");
    }
    /**
     * {@snippet :
     * int SDL_isupper(int x);
     * }
     */
    public static int SDL_isupper(int x) {
        var mh$ = SDL_isupper$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_islower$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$3,"SDL_islower");
    }
    /**
     * {@snippet :
     * int SDL_islower(int x);
     * }
     */
    public static int SDL_islower(int x) {
        var mh$ = SDL_islower$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"SDL_isprint");
    }
    /**
     * {@snippet :
     * int SDL_isprint(int x);
     * }
     */
    public static int SDL_isprint(int x) {
        var mh$ = SDL_isprint$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"SDL_isgraph");
    }
    /**
     * {@snippet :
     * int SDL_isgraph(int x);
     * }
     */
    public static int SDL_isgraph(int x) {
        var mh$ = SDL_isgraph$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$0,"SDL_toupper");
    }
    /**
     * {@snippet :
     * int SDL_toupper(int x);
     * }
     */
    public static int SDL_toupper(int x) {
        var mh$ = SDL_toupper$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"SDL_tolower");
    }
    /**
     * {@snippet :
     * int SDL_tolower(int x);
     * }
     */
    public static int SDL_tolower(int x) {
        var mh$ = SDL_tolower$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_crc16$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"SDL_crc16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_crc16(unsigned short crc, void* data, unsigned long long len);
     * }
     */
    public static short SDL_crc16(short crc, MemorySegment data, long len) {
        var mh$ = SDL_crc16$MH();
        try {
            return (short)mh$.invokeExact(crc, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_crc32$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"SDL_crc32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_crc32(unsigned int crc, void* data, unsigned long long len);
     * }
     */
    public static int SDL_crc32(int crc, MemorySegment data, long len) {
        var mh$ = SDL_crc32$MH();
        try {
            return (int)mh$.invokeExact(crc, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memset$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"SDL_memset");
    }
    /**
     * {@snippet :
     * void* SDL_memset(void* dst, int c, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memset(MemorySegment dst, int c, long len) {
        var mh$ = SDL_memset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, c, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"SDL_memcpy");
    }
    /**
     * {@snippet :
     * void* SDL_memcpy(void* dst, void* src, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memcpy(MemorySegment dst, MemorySegment src, long len) {
        var mh$ = SDL_memcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, src, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$4,"SDL_memmove");
    }
    /**
     * {@snippet :
     * void* SDL_memmove(void* dst, void* src, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memmove(MemorySegment dst, MemorySegment src, long len) {
        var mh$ = SDL_memmove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, src, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$6,"SDL_memcmp");
    }
    /**
     * {@snippet :
     * int SDL_memcmp(void* s1, void* s2, unsigned long long len);
     * }
     */
    public static int SDL_memcmp(MemorySegment s1, MemorySegment s2, long len) {
        var mh$ = SDL_memcmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$1,"SDL_wcslen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslen(unsigned short* wstr);
     * }
     */
    public static long SDL_wcslen(MemorySegment wstr) {
        var mh$ = SDL_wcslen$MH();
        try {
            return (long)mh$.invokeExact(wstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$3,"SDL_wcslcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslcpy(unsigned short* dst, unsigned short* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_wcslcpy(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_wcslcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslcat$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$4,"SDL_wcslcat");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslcat(unsigned short* dst, unsigned short* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_wcslcat(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_wcslcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"SDL_wcsdup");
    }
    /**
     * {@snippet :
     * unsigned short* SDL_wcsdup(unsigned short* wstr);
     * }
     */
    public static MemorySegment SDL_wcsdup(MemorySegment wstr) {
        var mh$ = SDL_wcsdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(wstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"SDL_wcsstr");
    }
    /**
     * {@snippet :
     * unsigned short* SDL_wcsstr(unsigned short* haystack, unsigned short* needle);
     * }
     */
    public static MemorySegment SDL_wcsstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_wcsstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcscmp$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"SDL_wcscmp");
    }
    /**
     * {@snippet :
     * int SDL_wcscmp(unsigned short* str1, unsigned short* str2);
     * }
     */
    public static int SDL_wcscmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_wcscmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"SDL_wcsncmp");
    }
    /**
     * {@snippet :
     * int SDL_wcsncmp(unsigned short* str1, unsigned short* str2, unsigned long long maxlen);
     * }
     */
    public static int SDL_wcsncmp(MemorySegment str1, MemorySegment str2, long maxlen) {
        var mh$ = SDL_wcsncmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcscasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"SDL_wcscasecmp");
    }
    /**
     * {@snippet :
     * int SDL_wcscasecmp(unsigned short* str1, unsigned short* str2);
     * }
     */
    public static int SDL_wcscasecmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_wcscasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"SDL_wcsncasecmp");
    }
    /**
     * {@snippet :
     * int SDL_wcsncasecmp(unsigned short* str1, unsigned short* str2, unsigned long long len);
     * }
     */
    public static int SDL_wcsncasecmp(MemorySegment str1, MemorySegment str2, long len) {
        var mh$ = SDL_wcsncasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"SDL_strlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlen(char* str);
     * }
     */
    public static long SDL_strlen(MemorySegment str) {
        var mh$ = SDL_strlen$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"SDL_strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlcpy(char* dst, char* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_strlcpy(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"SDL_utf8strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strlcpy(char* dst, char* src, unsigned long long dst_bytes);
     * }
     */
    public static long SDL_utf8strlcpy(MemorySegment dst, MemorySegment src, long dst_bytes) {
        var mh$ = SDL_utf8strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, dst_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"SDL_strlcat");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlcat(char* dst, char* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_strlcat(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_strlcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"SDL_strdup");
    }
    /**
     * {@snippet :
     * char* SDL_strdup(char* str);
     * }
     */
    public static MemorySegment SDL_strdup(MemorySegment str) {
        var mh$ = SDL_strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"SDL_strrev");
    }
    /**
     * {@snippet :
     * char* SDL_strrev(char* str);
     * }
     */
    public static MemorySegment SDL_strrev(MemorySegment str) {
        var mh$ = SDL_strrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"SDL_strupr");
    }
    /**
     * {@snippet :
     * char* SDL_strupr(char* str);
     * }
     */
    public static MemorySegment SDL_strupr(MemorySegment str) {
        var mh$ = SDL_strupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"SDL_strlwr");
    }
    /**
     * {@snippet :
     * char* SDL_strlwr(char* str);
     * }
     */
    public static MemorySegment SDL_strlwr(MemorySegment str) {
        var mh$ = SDL_strlwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"SDL_strchr");
    }
    /**
     * {@snippet :
     * char* SDL_strchr(char* str, int c);
     * }
     */
    public static MemorySegment SDL_strchr(MemorySegment str, int c) {
        var mh$ = SDL_strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"SDL_strrchr");
    }
    /**
     * {@snippet :
     * char* SDL_strrchr(char* str, int c);
     * }
     */
    public static MemorySegment SDL_strrchr(MemorySegment str, int c) {
        var mh$ = SDL_strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"SDL_strstr");
    }
    /**
     * {@snippet :
     * char* SDL_strstr(char* haystack, char* needle);
     * }
     */
    public static MemorySegment SDL_strstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcasestr$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"SDL_strcasestr");
    }
    /**
     * {@snippet :
     * char* SDL_strcasestr(char* haystack, char* needle);
     * }
     */
    public static MemorySegment SDL_strcasestr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_strcasestr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtokr$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"SDL_strtokr");
    }
    /**
     * {@snippet :
     * char* SDL_strtokr(char* s1, char* s2, char** saveptr);
     * }
     */
    public static MemorySegment SDL_strtokr(MemorySegment s1, MemorySegment s2, MemorySegment saveptr) {
        var mh$ = SDL_strtokr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s1, s2, saveptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"SDL_utf8strlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strlen(char* str);
     * }
     */
    public static long SDL_utf8strlen(MemorySegment str) {
        var mh$ = SDL_utf8strlen$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$6,"SDL_utf8strnlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strnlen(char* str, unsigned long long bytes);
     * }
     */
    public static long SDL_utf8strnlen(MemorySegment str, long bytes) {
        var mh$ = SDL_utf8strnlen$MH();
        try {
            return (long)mh$.invokeExact(str, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"SDL_itoa");
    }
    /**
     * {@snippet :
     * char* SDL_itoa(int value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_itoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_itoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_uitoa$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"SDL_uitoa");
    }
    /**
     * {@snippet :
     * char* SDL_uitoa(unsigned int value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_uitoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_uitoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"SDL_ltoa");
    }
    /**
     * {@snippet :
     * char* SDL_ltoa(long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ltoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_ltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"SDL_ultoa");
    }
    /**
     * {@snippet :
     * char* SDL_ultoa(unsigned long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ultoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_ultoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$6,"SDL_lltoa");
    }
    /**
     * {@snippet :
     * char* SDL_lltoa(long long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_lltoa(long value, MemorySegment str, int radix) {
        var mh$ = SDL_lltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ulltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"SDL_ulltoa");
    }
    /**
     * {@snippet :
     * char* SDL_ulltoa(unsigned long long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ulltoa(long value, MemorySegment str, int radix) {
        var mh$ = SDL_ulltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"SDL_atoi");
    }
    /**
     * {@snippet :
     * int SDL_atoi(char* str);
     * }
     */
    public static int SDL_atoi(MemorySegment str) {
        var mh$ = SDL_atoi$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atof$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"SDL_atof");
    }
    /**
     * {@snippet :
     * double SDL_atof(char* str);
     * }
     */
    public static double SDL_atof(MemorySegment str) {
        var mh$ = SDL_atof$MH();
        try {
            return (double)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"SDL_strtol");
    }
    /**
     * {@snippet :
     * long SDL_strtol(char* str, char** endp, int base);
     * }
     */
    public static int SDL_strtol(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtol$MH();
        try {
            return (int)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"SDL_strtoul");
    }
    /**
     * {@snippet :
     * unsigned long SDL_strtoul(char* str, char** endp, int base);
     * }
     */
    public static int SDL_strtoul(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoul$MH();
        try {
            return (int)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"SDL_strtoll");
    }
    /**
     * {@snippet :
     * long long SDL_strtoll(char* str, char** endp, int base);
     * }
     */
    public static long SDL_strtoll(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoll$MH();
        try {
            return (long)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"SDL_strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strtoull(char* str, char** endp, int base);
     * }
     */
    public static long SDL_strtoull(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoull$MH();
        try {
            return (long)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"SDL_strtod");
    }
    /**
     * {@snippet :
     * double SDL_strtod(char* str, char** endp);
     * }
     */
    public static double SDL_strtod(MemorySegment str, MemorySegment endp) {
        var mh$ = SDL_strtod$MH();
        try {
            return (double)mh$.invokeExact(str, endp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"SDL_strcmp");
    }
    /**
     * {@snippet :
     * int SDL_strcmp(char* str1, char* str2);
     * }
     */
    public static int SDL_strcmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_strcmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"SDL_strncmp");
    }
    /**
     * {@snippet :
     * int SDL_strncmp(char* str1, char* str2, unsigned long long maxlen);
     * }
     */
    public static int SDL_strncmp(MemorySegment str1, MemorySegment str2, long maxlen) {
        var mh$ = SDL_strncmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"SDL_strcasecmp");
    }
    /**
     * {@snippet :
     * int SDL_strcasecmp(char* str1, char* str2);
     * }
     */
    public static int SDL_strcasecmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"SDL_strncasecmp");
    }
    /**
     * {@snippet :
     * int SDL_strncasecmp(char* str1, char* str2, unsigned long long len);
     * }
     */
    public static int SDL_strncasecmp(MemorySegment str1, MemorySegment str2, long len) {
        var mh$ = SDL_strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"SDL_sscanf");
    }
    /**
     * {@snippet :
     * int SDL_sscanf(char* text, char* fmt,...);
     * }
     */
    public static int SDL_sscanf(MemorySegment text, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_sscanf$MH();
        try {
            return (int)mh$.invokeExact(text, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$6,"SDL_vsscanf");
    }
    /**
     * {@snippet :
     * int SDL_vsscanf(char* text, char* fmt, char* ap);
     * }
     */
    public static int SDL_vsscanf(MemorySegment text, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vsscanf$MH();
        try {
            return (int)mh$.invokeExact(text, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"SDL_snprintf");
    }
    /**
     * {@snippet :
     * int SDL_snprintf(char* text, unsigned long long maxlen, char* fmt,...);
     * }
     */
    public static int SDL_snprintf(MemorySegment text, long maxlen, MemorySegment fmt, Object... x3) {
        var mh$ = SDL_snprintf$MH();
        try {
            return (int)mh$.invokeExact(text, maxlen, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"SDL_vsnprintf");
    }
    /**
     * {@snippet :
     * int SDL_vsnprintf(char* text, unsigned long long maxlen, char* fmt, char* ap);
     * }
     */
    public static int SDL_vsnprintf(MemorySegment text, long maxlen, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(text, maxlen, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"SDL_asprintf");
    }
    /**
     * {@snippet :
     * int SDL_asprintf(char** strp, char* fmt,...);
     * }
     */
    public static int SDL_asprintf(MemorySegment strp, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_asprintf$MH();
        try {
            return (int)mh$.invokeExact(strp, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"SDL_vasprintf");
    }
    /**
     * {@snippet :
     * int SDL_vasprintf(char** strp, char* fmt, char* ap);
     * }
     */
    public static int SDL_vasprintf(MemorySegment strp, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vasprintf$MH();
        try {
            return (int)mh$.invokeExact(strp, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_acos$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"SDL_acos");
    }
    /**
     * {@snippet :
     * double SDL_acos(double x);
     * }
     */
    public static double SDL_acos(double x) {
        var mh$ = SDL_acos$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"SDL_acosf");
    }
    /**
     * {@snippet :
     * float SDL_acosf(float x);
     * }
     */
    public static float SDL_acosf(float x) {
        var mh$ = SDL_acosf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asin$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"SDL_asin");
    }
    /**
     * {@snippet :
     * double SDL_asin(double x);
     * }
     */
    public static double SDL_asin(double x) {
        var mh$ = SDL_asin$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"SDL_asinf");
    }
    /**
     * {@snippet :
     * float SDL_asinf(float x);
     * }
     */
    public static float SDL_asinf(float x) {
        var mh$ = SDL_asinf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"SDL_atan");
    }
    /**
     * {@snippet :
     * double SDL_atan(double x);
     * }
     */
    public static double SDL_atan(double x) {
        var mh$ = SDL_atan$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"SDL_atanf");
    }
    /**
     * {@snippet :
     * float SDL_atanf(float x);
     * }
     */
    public static float SDL_atanf(float x) {
        var mh$ = SDL_atanf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"SDL_atan2");
    }
    /**
     * {@snippet :
     * double SDL_atan2(double y, double x);
     * }
     */
    public static double SDL_atan2(double y, double x) {
        var mh$ = SDL_atan2$MH();
        try {
            return (double)mh$.invokeExact(y, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"SDL_atan2f");
    }
    /**
     * {@snippet :
     * float SDL_atan2f(float y, float x);
     * }
     */
    public static float SDL_atan2f(float y, float x) {
        var mh$ = SDL_atan2f$MH();
        try {
            return (float)mh$.invokeExact(y, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"SDL_ceil");
    }
    /**
     * {@snippet :
     * double SDL_ceil(double x);
     * }
     */
    public static double SDL_ceil(double x) {
        var mh$ = SDL_ceil$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"SDL_ceilf");
    }
    /**
     * {@snippet :
     * float SDL_ceilf(float x);
     * }
     */
    public static float SDL_ceilf(float x) {
        var mh$ = SDL_ceilf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"SDL_copysign");
    }
    /**
     * {@snippet :
     * double SDL_copysign(double x, double y);
     * }
     */
    public static double SDL_copysign(double x, double y) {
        var mh$ = SDL_copysign$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"SDL_copysignf");
    }
    /**
     * {@snippet :
     * float SDL_copysignf(float x, float y);
     * }
     */
    public static float SDL_copysignf(float x, float y) {
        var mh$ = SDL_copysignf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_cos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"SDL_cos");
    }
    /**
     * {@snippet :
     * double SDL_cos(double x);
     * }
     */
    public static double SDL_cos(double x) {
        var mh$ = SDL_cos$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"SDL_cosf");
    }
    /**
     * {@snippet :
     * float SDL_cosf(float x);
     * }
     */
    public static float SDL_cosf(float x) {
        var mh$ = SDL_cosf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"SDL_exp");
    }
    /**
     * {@snippet :
     * double SDL_exp(double x);
     * }
     */
    public static double SDL_exp(double x) {
        var mh$ = SDL_exp$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_expf$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"SDL_expf");
    }
    /**
     * {@snippet :
     * float SDL_expf(float x);
     * }
     */
    public static float SDL_expf(float x) {
        var mh$ = SDL_expf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"SDL_fabs");
    }
    /**
     * {@snippet :
     * double SDL_fabs(double x);
     * }
     */
    public static double SDL_fabs(double x) {
        var mh$ = SDL_fabs$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"SDL_fabsf");
    }
    /**
     * {@snippet :
     * float SDL_fabsf(float x);
     * }
     */
    public static float SDL_fabsf(float x) {
        var mh$ = SDL_fabsf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_floor$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"SDL_floor");
    }
    /**
     * {@snippet :
     * double SDL_floor(double x);
     * }
     */
    public static double SDL_floor(double x) {
        var mh$ = SDL_floor$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"SDL_floorf");
    }
    /**
     * {@snippet :
     * float SDL_floorf(float x);
     * }
     */
    public static float SDL_floorf(float x) {
        var mh$ = SDL_floorf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"SDL_trunc");
    }
    /**
     * {@snippet :
     * double SDL_trunc(double x);
     * }
     */
    public static double SDL_trunc(double x) {
        var mh$ = SDL_trunc$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"SDL_truncf");
    }
    /**
     * {@snippet :
     * float SDL_truncf(float x);
     * }
     */
    public static float SDL_truncf(float x) {
        var mh$ = SDL_truncf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"SDL_fmod");
    }
    /**
     * {@snippet :
     * double SDL_fmod(double x, double y);
     * }
     */
    public static double SDL_fmod(double x, double y) {
        var mh$ = SDL_fmod$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"SDL_fmodf");
    }
    /**
     * {@snippet :
     * float SDL_fmodf(float x, float y);
     * }
     */
    public static float SDL_fmodf(float x, float y) {
        var mh$ = SDL_fmodf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"SDL_log");
    }
    /**
     * {@snippet :
     * double SDL_log(double x);
     * }
     */
    public static double SDL_log(double x) {
        var mh$ = SDL_log$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_logf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"SDL_logf");
    }
    /**
     * {@snippet :
     * float SDL_logf(float x);
     * }
     */
    public static float SDL_logf(float x) {
        var mh$ = SDL_logf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log10$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"SDL_log10");
    }
    /**
     * {@snippet :
     * double SDL_log10(double x);
     * }
     */
    public static double SDL_log10(double x) {
        var mh$ = SDL_log10$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"SDL_log10f");
    }
    /**
     * {@snippet :
     * float SDL_log10f(float x);
     * }
     */
    public static float SDL_log10f(float x) {
        var mh$ = SDL_log10f$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_pow$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"SDL_pow");
    }
    /**
     * {@snippet :
     * double SDL_pow(double x, double y);
     * }
     */
    public static double SDL_pow(double x, double y) {
        var mh$ = SDL_pow$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_powf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"SDL_powf");
    }
    /**
     * {@snippet :
     * float SDL_powf(float x, float y);
     * }
     */
    public static float SDL_powf(float x, float y) {
        var mh$ = SDL_powf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_round$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"SDL_round");
    }
    /**
     * {@snippet :
     * double SDL_round(double x);
     * }
     */
    public static double SDL_round(double x) {
        var mh$ = SDL_round$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"SDL_roundf");
    }
    /**
     * {@snippet :
     * float SDL_roundf(float x);
     * }
     */
    public static float SDL_roundf(float x) {
        var mh$ = SDL_roundf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lround$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"SDL_lround");
    }
    /**
     * {@snippet :
     * long SDL_lround(double x);
     * }
     */
    public static int SDL_lround(double x) {
        var mh$ = SDL_lround$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"SDL_lroundf");
    }
    /**
     * {@snippet :
     * long SDL_lroundf(float x);
     * }
     */
    public static int SDL_lroundf(float x) {
        var mh$ = SDL_lroundf$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"SDL_scalbn");
    }
    /**
     * {@snippet :
     * double SDL_scalbn(double x, int n);
     * }
     */
    public static double SDL_scalbn(double x, int n) {
        var mh$ = SDL_scalbn$MH();
        try {
            return (double)mh$.invokeExact(x, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"SDL_scalbnf");
    }
    /**
     * {@snippet :
     * float SDL_scalbnf(float x, int n);
     * }
     */
    public static float SDL_scalbnf(float x, int n) {
        var mh$ = SDL_scalbnf$MH();
        try {
            return (float)mh$.invokeExact(x, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sin$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"SDL_sin");
    }
    /**
     * {@snippet :
     * double SDL_sin(double x);
     * }
     */
    public static double SDL_sin(double x) {
        var mh$ = SDL_sin$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"SDL_sinf");
    }
    /**
     * {@snippet :
     * float SDL_sinf(float x);
     * }
     */
    public static float SDL_sinf(float x) {
        var mh$ = SDL_sinf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"SDL_sqrt");
    }
    /**
     * {@snippet :
     * double SDL_sqrt(double x);
     * }
     */
    public static double SDL_sqrt(double x) {
        var mh$ = SDL_sqrt$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"SDL_sqrtf");
    }
    /**
     * {@snippet :
     * float SDL_sqrtf(float x);
     * }
     */
    public static float SDL_sqrtf(float x) {
        var mh$ = SDL_sqrtf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tan$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"SDL_tan");
    }
    /**
     * {@snippet :
     * double SDL_tan(double x);
     * }
     */
    public static double SDL_tan(double x) {
        var mh$ = SDL_tan$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"SDL_tanf");
    }
    /**
     * {@snippet :
     * float SDL_tanf(float x);
     * }
     */
    public static float SDL_tanf(float x) {
        var mh$ = SDL_tanf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SDL_iconv_t* SDL_iconv_t;
     * }
     */
    public static final AddressLayout SDL_iconv_t = RuntimeHelper.POINTER;
    public static MethodHandle SDL_iconv_open$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"SDL_iconv_open");
    }
    /**
     * {@snippet :
     * struct _SDL_iconv_t* SDL_iconv_open(char* tocode, char* fromcode);
     * }
     */
    public static MemorySegment SDL_iconv_open(MemorySegment tocode, MemorySegment fromcode) {
        var mh$ = SDL_iconv_open$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tocode, fromcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv_close$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"SDL_iconv_close");
    }
    /**
     * {@snippet :
     * int SDL_iconv_close(struct _SDL_iconv_t* cd);
     * }
     */
    public static int SDL_iconv_close(MemorySegment cd) {
        var mh$ = SDL_iconv_close$MH();
        try {
            return (int)mh$.invokeExact(cd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"SDL_iconv");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_iconv(struct _SDL_iconv_t* cd, char** inbuf, unsigned long long* inbytesleft, char** outbuf, unsigned long long* outbytesleft);
     * }
     */
    public static long SDL_iconv(MemorySegment cd, MemorySegment inbuf, MemorySegment inbytesleft, MemorySegment outbuf, MemorySegment outbytesleft) {
        var mh$ = SDL_iconv$MH();
        try {
            return (long)mh$.invokeExact(cd, inbuf, inbytesleft, outbuf, outbytesleft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv_string$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"SDL_iconv_string");
    }
    /**
     * {@snippet :
     * char* SDL_iconv_string(char* tocode, char* fromcode, char* inbuf, unsigned long long inbytesleft);
     * }
     */
    public static MemorySegment SDL_iconv_string(MemorySegment tocode, MemorySegment fromcode, MemorySegment inbuf, long inbytesleft) {
        var mh$ = SDL_iconv_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tocode, fromcode, inbuf, inbytesleft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetError$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"SDL_SetError");
    }
    /**
     * {@snippet :
     * int SDL_SetError(char* fmt,...);
     * }
     */
    public static int SDL_SetError(MemorySegment fmt, Object... x1) {
        var mh$ = SDL_SetError$MH();
        try {
            return (int)mh$.invokeExact(fmt, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetError$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"SDL_GetError");
    }
    /**
     * {@snippet :
     * char* SDL_GetError();
     * }
     */
    public static MemorySegment SDL_GetError() {
        var mh$ = SDL_GetError$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetErrorMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"SDL_GetErrorMsg");
    }
    /**
     * {@snippet :
     * char* SDL_GetErrorMsg(char* errstr, int maxlen);
     * }
     */
    public static MemorySegment SDL_GetErrorMsg(MemorySegment errstr, int maxlen) {
        var mh$ = SDL_GetErrorMsg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(errstr, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearError$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$6,"SDL_ClearError");
    }
    /**
     * {@snippet :
     * void SDL_ClearError();
     * }
     */
    public static void SDL_ClearError() {
        var mh$ = SDL_ClearError$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_ENOMEM = 0;
     * }
     */
    public static int SDL_ENOMEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFREAD = 1;
     * }
     */
    public static int SDL_EFREAD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFWRITE = 2;
     * }
     */
    public static int SDL_EFWRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFSEEK = 3;
     * }
     */
    public static int SDL_EFSEEK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_UNSUPPORTED = 4;
     * }
     */
    public static int SDL_UNSUPPORTED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_LASTERROR = 5;
     * }
     */
    public static int SDL_LASTERROR() {
        return (int)5L;
    }
    public static MethodHandle SDL_Error$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"SDL_Error");
    }
    /**
     * {@snippet :
     * int SDL_Error(enum SDL_errorcode code);
     * }
     */
    public static int SDL_Error(int code) {
        var mh$ = SDL_Error$MH();
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"SDL_CreateMutex");
    }
    /**
     * {@snippet :
     * struct SDL_mutex* SDL_CreateMutex();
     * }
     */
    public static MemorySegment SDL_CreateMutex() {
        var mh$ = SDL_CreateMutex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2,"SDL_LockMutex");
    }
    /**
     * {@snippet :
     * int SDL_LockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_LockMutex(MemorySegment mutex) {
        var mh$ = SDL_LockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TryLockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"SDL_TryLockMutex");
    }
    /**
     * {@snippet :
     * int SDL_TryLockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_TryLockMutex(MemorySegment mutex) {
        var mh$ = SDL_TryLockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"SDL_UnlockMutex");
    }
    /**
     * {@snippet :
     * int SDL_UnlockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_UnlockMutex(MemorySegment mutex) {
        var mh$ = SDL_UnlockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"SDL_DestroyMutex");
    }
    /**
     * {@snippet :
     * void SDL_DestroyMutex(struct SDL_mutex* mutex);
     * }
     */
    public static void SDL_DestroyMutex(MemorySegment mutex) {
        var mh$ = SDL_DestroyMutex$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"SDL_CreateSemaphore");
    }
    /**
     * {@snippet :
     * struct SDL_semaphore* SDL_CreateSemaphore(unsigned int initial_value);
     * }
     */
    public static MemorySegment SDL_CreateSemaphore(int initial_value) {
        var mh$ = SDL_CreateSemaphore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(initial_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroySemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"SDL_DestroySemaphore");
    }
    /**
     * {@snippet :
     * void SDL_DestroySemaphore(struct SDL_semaphore* sem);
     * }
     */
    public static void SDL_DestroySemaphore(MemorySegment sem) {
        var mh$ = SDL_DestroySemaphore$MH();
        try {
            mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWait$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"SDL_SemWait");
    }
    /**
     * {@snippet :
     * int SDL_SemWait(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemWait(MemorySegment sem) {
        var mh$ = SDL_SemWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemTryWait$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"SDL_SemTryWait");
    }
    /**
     * {@snippet :
     * int SDL_SemTryWait(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemTryWait(MemorySegment sem) {
        var mh$ = SDL_SemTryWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$6,"SDL_SemWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_SemWaitTimeout(struct SDL_semaphore* sem, unsigned int timeout);
     * }
     */
    public static int SDL_SemWaitTimeout(MemorySegment sem, int timeout) {
        var mh$ = SDL_SemWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(sem, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemPost$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"SDL_SemPost");
    }
    /**
     * {@snippet :
     * int SDL_SemPost(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemPost(MemorySegment sem) {
        var mh$ = SDL_SemPost$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemValue$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"SDL_SemValue");
    }
    /**
     * {@snippet :
     * unsigned int SDL_SemValue(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemValue(MemorySegment sem) {
        var mh$ = SDL_SemValue$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateCond$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"SDL_CreateCond");
    }
    /**
     * {@snippet :
     * struct SDL_cond* SDL_CreateCond();
     * }
     */
    public static MemorySegment SDL_CreateCond() {
        var mh$ = SDL_CreateCond$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyCond$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"SDL_DestroyCond");
    }
    /**
     * {@snippet :
     * void SDL_DestroyCond(struct SDL_cond* cond);
     * }
     */
    public static void SDL_DestroyCond(MemorySegment cond) {
        var mh$ = SDL_DestroyCond$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondSignal$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"SDL_CondSignal");
    }
    /**
     * {@snippet :
     * int SDL_CondSignal(struct SDL_cond* cond);
     * }
     */
    public static int SDL_CondSignal(MemorySegment cond) {
        var mh$ = SDL_CondSignal$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondBroadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"SDL_CondBroadcast");
    }
    /**
     * {@snippet :
     * int SDL_CondBroadcast(struct SDL_cond* cond);
     * }
     */
    public static int SDL_CondBroadcast(MemorySegment cond) {
        var mh$ = SDL_CondBroadcast$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWait$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"SDL_CondWait");
    }
    /**
     * {@snippet :
     * int SDL_CondWait(struct SDL_cond* cond, struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_CondWait(MemorySegment cond, MemorySegment mutex) {
        var mh$ = SDL_CondWait$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"SDL_CondWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_CondWaitTimeout(struct SDL_cond* cond, struct SDL_mutex* mutex, unsigned int ms);
     * }
     */
    public static int SDL_CondWaitTimeout(MemorySegment cond, MemorySegment mutex, int ms) {
        var mh$ = SDL_CondWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"SDL_RWFromFile");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromFile(char* file, char* mode);
     * }
     */
    public static MemorySegment SDL_RWFromFile(MemorySegment file, MemorySegment mode) {
        var mh$ = SDL_RWFromFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFP$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"SDL_RWFromFP");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromFP(struct _iobuf* fp, enum SDL_bool autoclose);
     * }
     */
    public static MemorySegment SDL_RWFromFP(MemorySegment fp, int autoclose) {
        var mh$ = SDL_RWFromFP$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fp, autoclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromMem$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"SDL_RWFromMem");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromConstMem$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"SDL_RWFromConstMem");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromConstMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromConstMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromConstMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocRW$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"SDL_AllocRW");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_AllocRW();
     * }
     */
    public static MemorySegment SDL_AllocRW() {
        var mh$ = SDL_AllocRW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeRW$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"SDL_FreeRW");
    }
    /**
     * {@snippet :
     * void SDL_FreeRW(struct SDL_RWops* area);
     * }
     */
    public static void SDL_FreeRW(MemorySegment area) {
        var mh$ = SDL_FreeRW$MH();
        try {
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWsize$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2,"SDL_RWsize");
    }
    /**
     * {@snippet :
     * long long SDL_RWsize(struct SDL_RWops* context);
     * }
     */
    public static long SDL_RWsize(MemorySegment context) {
        var mh$ = SDL_RWsize$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWseek$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"SDL_RWseek");
    }
    /**
     * {@snippet :
     * long long SDL_RWseek(struct SDL_RWops* context, long long offset, int whence);
     * }
     */
    public static long SDL_RWseek(MemorySegment context, long offset, int whence) {
        var mh$ = SDL_RWseek$MH();
        try {
            return (long)mh$.invokeExact(context, offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWtell$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"SDL_RWtell");
    }
    /**
     * {@snippet :
     * long long SDL_RWtell(struct SDL_RWops* context);
     * }
     */
    public static long SDL_RWtell(MemorySegment context) {
        var mh$ = SDL_RWtell$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWread$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"SDL_RWread");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_RWread(struct SDL_RWops* context, void* ptr, unsigned long long size, unsigned long long maxnum);
     * }
     */
    public static long SDL_RWread(MemorySegment context, MemorySegment ptr, long size, long maxnum) {
        var mh$ = SDL_RWread$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, maxnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"SDL_RWwrite");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_RWwrite(struct SDL_RWops* context, void* ptr, unsigned long long size, unsigned long long num);
     * }
     */
    public static long SDL_RWwrite(MemorySegment context, MemorySegment ptr, long size, long num) {
        var mh$ = SDL_RWwrite$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWclose$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3,"SDL_RWclose");
    }
    /**
     * {@snippet :
     * int SDL_RWclose(struct SDL_RWops* context);
     * }
     */
    public static int SDL_RWclose(MemorySegment context) {
        var mh$ = SDL_RWclose$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"SDL_LoadFile_RW");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile_RW(struct SDL_RWops* src, unsigned long long* datasize, int freesrc);
     * }
     */
    public static MemorySegment SDL_LoadFile_RW(MemorySegment src, MemorySegment datasize, int freesrc) {
        var mh$ = SDL_LoadFile_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, datasize, freesrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"SDL_LoadFile");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile(char* file, unsigned long long* datasize);
     * }
     */
    public static MemorySegment SDL_LoadFile(MemorySegment file, MemorySegment datasize) {
        var mh$ = SDL_LoadFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, datasize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadU8$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"SDL_ReadU8");
    }
    /**
     * {@snippet :
     * unsigned char SDL_ReadU8(struct SDL_RWops* src);
     * }
     */
    public static byte SDL_ReadU8(MemorySegment src) {
        var mh$ = SDL_ReadU8$MH();
        try {
            return (byte)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"SDL_ReadLE16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_ReadLE16(struct SDL_RWops* src);
     * }
     */
    public static short SDL_ReadLE16(MemorySegment src) {
        var mh$ = SDL_ReadLE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"SDL_ReadBE16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_ReadBE16(struct SDL_RWops* src);
     * }
     */
    public static short SDL_ReadBE16(MemorySegment src) {
        var mh$ = SDL_ReadBE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"SDL_ReadLE32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_ReadLE32(struct SDL_RWops* src);
     * }
     */
    public static int SDL_ReadLE32(MemorySegment src) {
        var mh$ = SDL_ReadLE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"SDL_ReadBE32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_ReadBE32(struct SDL_RWops* src);
     * }
     */
    public static int SDL_ReadBE32(MemorySegment src) {
        var mh$ = SDL_ReadBE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"SDL_ReadLE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_ReadLE64(struct SDL_RWops* src);
     * }
     */
    public static long SDL_ReadLE64(MemorySegment src) {
        var mh$ = SDL_ReadLE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"SDL_ReadBE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_ReadBE64(struct SDL_RWops* src);
     * }
     */
    public static long SDL_ReadBE64(MemorySegment src) {
        var mh$ = SDL_ReadBE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteU8$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"SDL_WriteU8");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteU8(struct SDL_RWops* dst, unsigned char value);
     * }
     */
    public static long SDL_WriteU8(MemorySegment dst, byte value) {
        var mh$ = SDL_WriteU8$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"SDL_WriteLE16");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE16(struct SDL_RWops* dst, unsigned short value);
     * }
     */
    public static long SDL_WriteLE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteLE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"SDL_WriteBE16");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE16(struct SDL_RWops* dst, unsigned short value);
     * }
     */
    public static long SDL_WriteBE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteBE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"SDL_WriteLE32");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE32(struct SDL_RWops* dst, unsigned int value);
     * }
     */
    public static long SDL_WriteLE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteLE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"SDL_WriteBE32");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE32(struct SDL_RWops* dst, unsigned int value);
     * }
     */
    public static long SDL_WriteBE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteBE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"SDL_WriteLE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE64(struct SDL_RWops* dst, unsigned long long value);
     * }
     */
    public static long SDL_WriteLE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteLE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"SDL_WriteBE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE64(struct SDL_RWops* dst, unsigned long long value);
     * }
     */
    public static long SDL_WriteBE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteBE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_PIXELTYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_INDEX1 = 1;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX1() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_INDEX4 = 2;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX4() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_INDEX8 = 3;
     * }
     */
    public static int SDL_PIXELTYPE_INDEX8() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_PACKED8 = 4;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED8() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_PACKED16 = 5;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED16() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_PACKED32 = 6;
     * }
     */
    public static int SDL_PIXELTYPE_PACKED32() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_ARRAYU8 = 7;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU8() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_ARRAYU16 = 8;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU16() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_ARRAYU32 = 9;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYU32() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_ARRAYF16 = 10;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYF16() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelType.SDL_PIXELTYPE_ARRAYF32 = 11;
     * }
     */
    public static int SDL_PIXELTYPE_ARRAYF32() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_BitmapOrder.SDL_BITMAPORDER_NONE = 0;
     * }
     */
    public static int SDL_BITMAPORDER_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_BitmapOrder.SDL_BITMAPORDER_4321 = 1;
     * }
     */
    public static int SDL_BITMAPORDER_4321() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_BitmapOrder.SDL_BITMAPORDER_1234 = 2;
     * }
     */
    public static int SDL_BITMAPORDER_1234() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_NONE = 0;
     * }
     */
    public static int SDL_PACKEDORDER_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_XRGB = 1;
     * }
     */
    public static int SDL_PACKEDORDER_XRGB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_RGBX = 2;
     * }
     */
    public static int SDL_PACKEDORDER_RGBX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_ARGB = 3;
     * }
     */
    public static int SDL_PACKEDORDER_ARGB() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_RGBA = 4;
     * }
     */
    public static int SDL_PACKEDORDER_RGBA() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_XBGR = 5;
     * }
     */
    public static int SDL_PACKEDORDER_XBGR() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_BGRX = 6;
     * }
     */
    public static int SDL_PACKEDORDER_BGRX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_ABGR = 7;
     * }
     */
    public static int SDL_PACKEDORDER_ABGR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedOrder.SDL_PACKEDORDER_BGRA = 8;
     * }
     */
    public static int SDL_PACKEDORDER_BGRA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_NONE = 0;
     * }
     */
    public static int SDL_ARRAYORDER_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_RGB = 1;
     * }
     */
    public static int SDL_ARRAYORDER_RGB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_RGBA = 2;
     * }
     */
    public static int SDL_ARRAYORDER_RGBA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_ARGB = 3;
     * }
     */
    public static int SDL_ARRAYORDER_ARGB() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_BGR = 4;
     * }
     */
    public static int SDL_ARRAYORDER_BGR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_BGRA = 5;
     * }
     */
    public static int SDL_ARRAYORDER_BGRA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_ArrayOrder.SDL_ARRAYORDER_ABGR = 6;
     * }
     */
    public static int SDL_ARRAYORDER_ABGR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_NONE = 0;
     * }
     */
    public static int SDL_PACKEDLAYOUT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_332 = 1;
     * }
     */
    public static int SDL_PACKEDLAYOUT_332() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_4444 = 2;
     * }
     */
    public static int SDL_PACKEDLAYOUT_4444() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_1555 = 3;
     * }
     */
    public static int SDL_PACKEDLAYOUT_1555() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_5551 = 4;
     * }
     */
    public static int SDL_PACKEDLAYOUT_5551() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_565 = 5;
     * }
     */
    public static int SDL_PACKEDLAYOUT_565() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_8888 = 6;
     * }
     */
    public static int SDL_PACKEDLAYOUT_8888() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_2101010 = 7;
     * }
     */
    public static int SDL_PACKEDLAYOUT_2101010() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_PackedLayout.SDL_PACKEDLAYOUT_1010102 = 8;
     * }
     */
    public static int SDL_PACKEDLAYOUT_1010102() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_UNKNOWN = 0;
     * }
     */
    public static int SDL_PIXELFORMAT_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1LSB = 286261504;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX1LSB() {
        return (int)286261504L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX1MSB = 287310080;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX1MSB() {
        return (int)287310080L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4LSB = 303039488;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX4LSB() {
        return (int)303039488L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX4MSB = 304088064;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX4MSB() {
        return (int)304088064L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_INDEX8 = 318769153;
     * }
     */
    public static int SDL_PIXELFORMAT_INDEX8() {
        return (int)318769153L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB332 = 336660481;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB332() {
        return (int)336660481L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB4444 = 353504258;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB4444() {
        return (int)353504258L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB444 = 353504258;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB444() {
        return (int)353504258L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR4444 = 357698562;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR4444() {
        return (int)357698562L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR444 = 357698562;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR444() {
        return (int)357698562L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB1555 = 353570562;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB1555() {
        return (int)353570562L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB555 = 353570562;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB555() {
        return (int)353570562L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR1555 = 357764866;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR1555() {
        return (int)357764866L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR555 = 357764866;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR555() {
        return (int)357764866L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB4444 = 355602434;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB4444() {
        return (int)355602434L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA4444 = 356651010;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA4444() {
        return (int)356651010L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR4444 = 359796738;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR4444() {
        return (int)359796738L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA4444 = 360845314;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA4444() {
        return (int)360845314L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB1555 = 355667970;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB1555() {
        return (int)355667970L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA5551 = 356782082;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA5551() {
        return (int)356782082L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR1555 = 359862274;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR1555() {
        return (int)359862274L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA5551 = 360976386;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA5551() {
        return (int)360976386L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB565 = 353701890;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB565() {
        return (int)353701890L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR565 = 357896194;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR565() {
        return (int)357896194L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB24 = 386930691;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB24() {
        return (int)386930691L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR24 = 390076419;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR24() {
        return (int)390076419L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XRGB8888 = 370546692;
     * }
     */
    public static int SDL_PIXELFORMAT_XRGB8888() {
        return (int)370546692L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGB888 = 370546692;
     * }
     */
    public static int SDL_PIXELFORMAT_RGB888() {
        return (int)370546692L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBX8888 = 371595268;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBX8888() {
        return (int)371595268L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_XBGR8888 = 374740996;
     * }
     */
    public static int SDL_PIXELFORMAT_XBGR8888() {
        return (int)374740996L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGR888 = 374740996;
     * }
     */
    public static int SDL_PIXELFORMAT_BGR888() {
        return (int)374740996L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRX8888 = 375789572;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRX8888() {
        return (int)375789572L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB8888 = 372645892;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB8888() {
        return (int)372645892L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA8888 = 373694468;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA8888() {
        return (int)373694468L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR8888 = 376840196;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR8888() {
        return (int)376840196L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA8888 = 377888772;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA8888() {
        return (int)377888772L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB2101010 = 372711428;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB2101010() {
        return (int)372711428L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_RGBA32 = 376840196;
     * }
     */
    public static int SDL_PIXELFORMAT_RGBA32() {
        return (int)376840196L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ARGB32 = 377888772;
     * }
     */
    public static int SDL_PIXELFORMAT_ARGB32() {
        return (int)377888772L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_BGRA32 = 372645892;
     * }
     */
    public static int SDL_PIXELFORMAT_BGRA32() {
        return (int)372645892L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_ABGR32 = 373694468;
     * }
     */
    public static int SDL_PIXELFORMAT_ABGR32() {
        return (int)373694468L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_YV12 = 842094169;
     * }
     */
    public static int SDL_PIXELFORMAT_YV12() {
        return (int)842094169L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_IYUV = 1448433993;
     * }
     */
    public static int SDL_PIXELFORMAT_IYUV() {
        return (int)1448433993L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_YUY2 = 844715353;
     * }
     */
    public static int SDL_PIXELFORMAT_YUY2() {
        return (int)844715353L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_UYVY = 1498831189;
     * }
     */
    public static int SDL_PIXELFORMAT_UYVY() {
        return (int)1498831189L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_YVYU = 1431918169;
     * }
     */
    public static int SDL_PIXELFORMAT_YVYU() {
        return (int)1431918169L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV12 = 842094158;
     * }
     */
    public static int SDL_PIXELFORMAT_NV12() {
        return (int)842094158L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_NV21 = 825382478;
     * }
     */
    public static int SDL_PIXELFORMAT_NV21() {
        return (int)825382478L;
    }
    /**
     * {@snippet :
     * enum SDL_PixelFormatEnum.SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;
     * }
     */
    public static int SDL_PIXELFORMAT_EXTERNAL_OES() {
        return (int)542328143L;
    }
    public static MethodHandle SDL_GetPixelFormatName$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"SDL_GetPixelFormatName");
    }
    /**
     * {@snippet :
     * char* SDL_GetPixelFormatName(unsigned int format);
     * }
     */
    public static MemorySegment SDL_GetPixelFormatName(int format) {
        var mh$ = SDL_GetPixelFormatName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PixelFormatEnumToMasks$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"SDL_PixelFormatEnumToMasks");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_PixelFormatEnumToMasks(unsigned int format, int* bpp, unsigned int* Rmask, unsigned int* Gmask, unsigned int* Bmask, unsigned int* Amask);
     * }
     */
    public static int SDL_PixelFormatEnumToMasks(int format, MemorySegment bpp, MemorySegment Rmask, MemorySegment Gmask, MemorySegment Bmask, MemorySegment Amask) {
        var mh$ = SDL_PixelFormatEnumToMasks$MH();
        try {
            return (int)mh$.invokeExact(format, bpp, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MasksToPixelFormatEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"SDL_MasksToPixelFormatEnum");
    }
    /**
     * {@snippet :
     * unsigned int SDL_MasksToPixelFormatEnum(int bpp, unsigned int Rmask, unsigned int Gmask, unsigned int Bmask, unsigned int Amask);
     * }
     */
    public static int SDL_MasksToPixelFormatEnum(int bpp, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_MasksToPixelFormatEnum$MH();
        try {
            return (int)mh$.invokeExact(bpp, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"SDL_AllocFormat");
    }
    /**
     * {@snippet :
     * struct SDL_PixelFormat* SDL_AllocFormat(unsigned int pixel_format);
     * }
     */
    public static MemorySegment SDL_AllocFormat(int pixel_format) {
        var mh$ = SDL_AllocFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixel_format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"SDL_FreeFormat");
    }
    /**
     * {@snippet :
     * void SDL_FreeFormat(struct SDL_PixelFormat* format);
     * }
     */
    public static void SDL_FreeFormat(MemorySegment format) {
        var mh$ = SDL_FreeFormat$MH();
        try {
            mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"SDL_AllocPalette");
    }
    /**
     * {@snippet :
     * struct SDL_Palette* SDL_AllocPalette(int ncolors);
     * }
     */
    public static MemorySegment SDL_AllocPalette(int ncolors) {
        var mh$ = SDL_AllocPalette$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ncolors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetPixelFormatPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"SDL_SetPixelFormatPalette");
    }
    /**
     * {@snippet :
     * int SDL_SetPixelFormatPalette(struct SDL_PixelFormat* format, struct SDL_Palette* palette);
     * }
     */
    public static int SDL_SetPixelFormatPalette(MemorySegment format, MemorySegment palette) {
        var mh$ = SDL_SetPixelFormatPalette$MH();
        try {
            return (int)mh$.invokeExact(format, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetPaletteColors$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"SDL_SetPaletteColors");
    }
    /**
     * {@snippet :
     * int SDL_SetPaletteColors(struct SDL_Palette* palette, struct SDL_Color* colors, int firstcolor, int ncolors);
     * }
     */
    public static int SDL_SetPaletteColors(MemorySegment palette, MemorySegment colors, int firstcolor, int ncolors) {
        var mh$ = SDL_SetPaletteColors$MH();
        try {
            return (int)mh$.invokeExact(palette, colors, firstcolor, ncolors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"SDL_FreePalette");
    }
    /**
     * {@snippet :
     * void SDL_FreePalette(struct SDL_Palette* palette);
     * }
     */
    public static void SDL_FreePalette(MemorySegment palette) {
        var mh$ = SDL_FreePalette$MH();
        try {
            mh$.invokeExact(palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MapRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"SDL_MapRGB");
    }
    /**
     * {@snippet :
     * unsigned int SDL_MapRGB(struct SDL_PixelFormat* format, unsigned char r, unsigned char g, unsigned char b);
     * }
     */
    public static int SDL_MapRGB(MemorySegment format, byte r, byte g, byte b) {
        var mh$ = SDL_MapRGB$MH();
        try {
            return (int)mh$.invokeExact(format, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MapRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"SDL_MapRGBA");
    }
    /**
     * {@snippet :
     * unsigned int SDL_MapRGBA(struct SDL_PixelFormat* format, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
     * }
     */
    public static int SDL_MapRGBA(MemorySegment format, byte r, byte g, byte b, byte a) {
        var mh$ = SDL_MapRGBA$MH();
        try {
            return (int)mh$.invokeExact(format, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRGB$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$6,"SDL_GetRGB");
    }
    /**
     * {@snippet :
     * void SDL_GetRGB(unsigned int pixel, struct SDL_PixelFormat* format, unsigned char* r, unsigned char* g, unsigned char* b);
     * }
     */
    public static void SDL_GetRGB(int pixel, MemorySegment format, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetRGB$MH();
        try {
            mh$.invokeExact(pixel, format, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"SDL_GetRGBA");
    }
    /**
     * {@snippet :
     * void SDL_GetRGBA(unsigned int pixel, struct SDL_PixelFormat* format, unsigned char* r, unsigned char* g, unsigned char* b, unsigned char* a);
     * }
     */
    public static void SDL_GetRGBA(int pixel, MemorySegment format, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment a) {
        var mh$ = SDL_GetRGBA$MH();
        try {
            mh$.invokeExact(pixel, format, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CalculateGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"SDL_CalculateGammaRamp");
    }
    /**
     * {@snippet :
     * void SDL_CalculateGammaRamp(float gamma, unsigned short* ramp);
     * }
     */
    public static void SDL_CalculateGammaRamp(float gamma, MemorySegment ramp) {
        var mh$ = SDL_CalculateGammaRamp$MH();
        try {
            mh$.invokeExact(gamma, ramp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"SDL_HasIntersection");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasIntersection(struct SDL_Rect* A, struct SDL_Rect* B);
     * }
     */
    public static int SDL_HasIntersection(MemorySegment A, MemorySegment B) {
        var mh$ = SDL_HasIntersection$MH();
        try {
            return (int)mh$.invokeExact(A, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectRect$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"SDL_IntersectRect");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IntersectRect(struct SDL_Rect* A, struct SDL_Rect* B, struct SDL_Rect* result);
     * }
     */
    public static int SDL_IntersectRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_IntersectRect$MH();
        try {
            return (int)mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnionRect$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"SDL_UnionRect");
    }
    /**
     * {@snippet :
     * void SDL_UnionRect(struct SDL_Rect* A, struct SDL_Rect* B, struct SDL_Rect* result);
     * }
     */
    public static void SDL_UnionRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_UnionRect$MH();
        try {
            mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EnclosePoints$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"SDL_EnclosePoints");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_EnclosePoints(struct SDL_Point* points, int count, struct SDL_Rect* clip, struct SDL_Rect* result);
     * }
     */
    public static int SDL_EnclosePoints(MemorySegment points, int count, MemorySegment clip, MemorySegment result) {
        var mh$ = SDL_EnclosePoints$MH();
        try {
            return (int)mh$.invokeExact(points, count, clip, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectRectAndLine$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"SDL_IntersectRectAndLine");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IntersectRectAndLine(struct SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);
     * }
     */
    public static int SDL_IntersectRectAndLine(MemorySegment rect, MemorySegment X1, MemorySegment Y1, MemorySegment X2, MemorySegment Y2) {
        var mh$ = SDL_IntersectRectAndLine$MH();
        try {
            return (int)mh$.invokeExact(rect, X1, Y1, X2, Y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasIntersectionF$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"SDL_HasIntersectionF");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasIntersectionF(struct SDL_FRect* A, struct SDL_FRect* B);
     * }
     */
    public static int SDL_HasIntersectionF(MemorySegment A, MemorySegment B) {
        var mh$ = SDL_HasIntersectionF$MH();
        try {
            return (int)mh$.invokeExact(A, B);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectFRect$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"SDL_IntersectFRect");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IntersectFRect(struct SDL_FRect* A, struct SDL_FRect* B, struct SDL_FRect* result);
     * }
     */
    public static int SDL_IntersectFRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_IntersectFRect$MH();
        try {
            return (int)mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnionFRect$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"SDL_UnionFRect");
    }
    /**
     * {@snippet :
     * void SDL_UnionFRect(struct SDL_FRect* A, struct SDL_FRect* B, struct SDL_FRect* result);
     * }
     */
    public static void SDL_UnionFRect(MemorySegment A, MemorySegment B, MemorySegment result) {
        var mh$ = SDL_UnionFRect$MH();
        try {
            mh$.invokeExact(A, B, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EncloseFPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"SDL_EncloseFPoints");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_EncloseFPoints(struct SDL_FPoint* points, int count, struct SDL_FRect* clip, struct SDL_FRect* result);
     * }
     */
    public static int SDL_EncloseFPoints(MemorySegment points, int count, MemorySegment clip, MemorySegment result) {
        var mh$ = SDL_EncloseFPoints$MH();
        try {
            return (int)mh$.invokeExact(points, count, clip, result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IntersectFRectAndLine$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"SDL_IntersectFRectAndLine");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IntersectFRectAndLine(struct SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);
     * }
     */
    public static int SDL_IntersectFRectAndLine(MemorySegment rect, MemorySegment X1, MemorySegment Y1, MemorySegment X2, MemorySegment Y2) {
        var mh$ = SDL_IntersectFRectAndLine$MH();
        try {
            return (int)mh$.invokeExact(rect, X1, Y1, X2, Y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_JPEG = 0;
     * }
     */
    public static int SDL_YUV_CONVERSION_JPEG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT601 = 1;
     * }
     */
    public static int SDL_YUV_CONVERSION_BT601() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_BT709 = 2;
     * }
     */
    public static int SDL_YUV_CONVERSION_BT709() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE.SDL_YUV_CONVERSION_AUTOMATIC = 3;
     * }
     */
    public static int SDL_YUV_CONVERSION_AUTOMATIC() {
        return (int)3L;
    }
    public static MethodHandle SDL_CreateRGBSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"SDL_CreateRGBSurface");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_CreateRGBSurface(unsigned int flags, int width, int height, int depth, unsigned int Rmask, unsigned int Gmask, unsigned int Bmask, unsigned int Amask);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurface(int flags, int width, int height, int depth, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_CreateRGBSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, width, height, depth, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceWithFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$6,"SDL_CreateRGBSurfaceWithFormat");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_CreateRGBSurfaceWithFormat(unsigned int flags, int width, int height, int depth, unsigned int format);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceWithFormat(int flags, int width, int height, int depth, int format) {
        var mh$ = SDL_CreateRGBSurfaceWithFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, width, height, depth, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"SDL_CreateRGBSurfaceFrom");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_CreateRGBSurfaceFrom(void* pixels, int width, int height, int depth, int pitch, unsigned int Rmask, unsigned int Gmask, unsigned int Bmask, unsigned int Amask);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceFrom(MemorySegment pixels, int width, int height, int depth, int pitch, int Rmask, int Gmask, int Bmask, int Amask) {
        var mh$ = SDL_CreateRGBSurfaceFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixels, width, height, depth, pitch, Rmask, Gmask, Bmask, Amask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRGBSurfaceWithFormatFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"SDL_CreateRGBSurfaceWithFormatFrom");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void* pixels, int width, int height, int depth, int pitch, unsigned int format);
     * }
     */
    public static MemorySegment SDL_CreateRGBSurfaceWithFormatFrom(MemorySegment pixels, int width, int height, int depth, int pitch, int format) {
        var mh$ = SDL_CreateRGBSurfaceWithFormatFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pixels, width, height, depth, pitch, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"SDL_FreeSurface");
    }
    /**
     * {@snippet :
     * void SDL_FreeSurface(struct SDL_Surface* surface);
     * }
     */
    public static void SDL_FreeSurface(MemorySegment surface) {
        var mh$ = SDL_FreeSurface$MH();
        try {
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfacePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"SDL_SetSurfacePalette");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfacePalette(struct SDL_Surface* surface, struct SDL_Palette* palette);
     * }
     */
    public static int SDL_SetSurfacePalette(MemorySegment surface, MemorySegment palette) {
        var mh$ = SDL_SetSurfacePalette$MH();
        try {
            return (int)mh$.invokeExact(surface, palette);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"SDL_LockSurface");
    }
    /**
     * {@snippet :
     * int SDL_LockSurface(struct SDL_Surface* surface);
     * }
     */
    public static int SDL_LockSurface(MemorySegment surface) {
        var mh$ = SDL_LockSurface$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"SDL_UnlockSurface");
    }
    /**
     * {@snippet :
     * void SDL_UnlockSurface(struct SDL_Surface* surface);
     * }
     */
    public static void SDL_UnlockSurface(MemorySegment surface) {
        var mh$ = SDL_UnlockSurface$MH();
        try {
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadBMP_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"SDL_LoadBMP_RW");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_LoadBMP_RW(struct SDL_RWops* src, int freesrc);
     * }
     */
    public static MemorySegment SDL_LoadBMP_RW(MemorySegment src, int freesrc) {
        var mh$ = SDL_LoadBMP_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, freesrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SaveBMP_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"SDL_SaveBMP_RW");
    }
    /**
     * {@snippet :
     * int SDL_SaveBMP_RW(struct SDL_Surface* surface, struct SDL_RWops* dst, int freedst);
     * }
     */
    public static int SDL_SaveBMP_RW(MemorySegment surface, MemorySegment dst, int freedst) {
        var mh$ = SDL_SaveBMP_RW$MH();
        try {
            return (int)mh$.invokeExact(surface, dst, freedst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceRLE$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"SDL_SetSurfaceRLE");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceRLE(struct SDL_Surface* surface, int flag);
     * }
     */
    public static int SDL_SetSurfaceRLE(MemorySegment surface, int flag) {
        var mh$ = SDL_SetSurfaceRLE$MH();
        try {
            return (int)mh$.invokeExact(surface, flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasSurfaceRLE$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"SDL_HasSurfaceRLE");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasSurfaceRLE(struct SDL_Surface* surface);
     * }
     */
    public static int SDL_HasSurfaceRLE(MemorySegment surface) {
        var mh$ = SDL_HasSurfaceRLE$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"SDL_SetColorKey");
    }
    /**
     * {@snippet :
     * int SDL_SetColorKey(struct SDL_Surface* surface, int flag, unsigned int key);
     * }
     */
    public static int SDL_SetColorKey(MemorySegment surface, int flag, int key) {
        var mh$ = SDL_SetColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface, flag, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"SDL_HasColorKey");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasColorKey(struct SDL_Surface* surface);
     * }
     */
    public static int SDL_HasColorKey(MemorySegment surface) {
        var mh$ = SDL_HasColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetColorKey$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"SDL_GetColorKey");
    }
    /**
     * {@snippet :
     * int SDL_GetColorKey(struct SDL_Surface* surface, unsigned int* key);
     * }
     */
    public static int SDL_GetColorKey(MemorySegment surface, MemorySegment key) {
        var mh$ = SDL_GetColorKey$MH();
        try {
            return (int)mh$.invokeExact(surface, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"SDL_SetSurfaceColorMod");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceColorMod(struct SDL_Surface* surface, unsigned char r, unsigned char g, unsigned char b);
     * }
     */
    public static int SDL_SetSurfaceColorMod(MemorySegment surface, byte r, byte g, byte b) {
        var mh$ = SDL_SetSurfaceColorMod$MH();
        try {
            return (int)mh$.invokeExact(surface, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$6,"SDL_GetSurfaceColorMod");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceColorMod(struct SDL_Surface* surface, unsigned char* r, unsigned char* g, unsigned char* b);
     * }
     */
    public static int SDL_GetSurfaceColorMod(MemorySegment surface, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetSurfaceColorMod$MH();
        try {
            return (int)mh$.invokeExact(surface, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"SDL_SetSurfaceAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceAlphaMod(struct SDL_Surface* surface, unsigned char alpha);
     * }
     */
    public static int SDL_SetSurfaceAlphaMod(MemorySegment surface, byte alpha) {
        var mh$ = SDL_SetSurfaceAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(surface, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"SDL_GetSurfaceAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceAlphaMod(struct SDL_Surface* surface, unsigned char* alpha);
     * }
     */
    public static int SDL_GetSurfaceAlphaMod(MemorySegment surface, MemorySegment alpha) {
        var mh$ = SDL_GetSurfaceAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(surface, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetSurfaceBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"SDL_SetSurfaceBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetSurfaceBlendMode(struct SDL_Surface* surface, enum SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetSurfaceBlendMode(MemorySegment surface, int blendMode) {
        var mh$ = SDL_SetSurfaceBlendMode$MH();
        try {
            return (int)mh$.invokeExact(surface, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetSurfaceBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"SDL_GetSurfaceBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetSurfaceBlendMode(struct SDL_Surface* surface, enum SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetSurfaceBlendMode(MemorySegment surface, MemorySegment blendMode) {
        var mh$ = SDL_GetSurfaceBlendMode$MH();
        try {
            return (int)mh$.invokeExact(surface, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"SDL_SetClipRect");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_SetClipRect(struct SDL_Surface* surface, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_SetClipRect(MemorySegment surface, MemorySegment rect) {
        var mh$ = SDL_SetClipRect$MH();
        try {
            return (int)mh$.invokeExact(surface, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"SDL_GetClipRect");
    }
    /**
     * {@snippet :
     * void SDL_GetClipRect(struct SDL_Surface* surface, struct SDL_Rect* rect);
     * }
     */
    public static void SDL_GetClipRect(MemorySegment surface, MemorySegment rect) {
        var mh$ = SDL_GetClipRect$MH();
        try {
            mh$.invokeExact(surface, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DuplicateSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"SDL_DuplicateSurface");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_DuplicateSurface(struct SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_DuplicateSurface(MemorySegment surface) {
        var mh$ = SDL_DuplicateSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"SDL_ConvertSurface");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_ConvertSurface(struct SDL_Surface* src, struct SDL_PixelFormat* fmt, unsigned int flags);
     * }
     */
    public static MemorySegment SDL_ConvertSurface(MemorySegment src, MemorySegment fmt, int flags) {
        var mh$ = SDL_ConvertSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, fmt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertSurfaceFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"SDL_ConvertSurfaceFormat");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_ConvertSurfaceFormat(struct SDL_Surface* src, unsigned int pixel_format, unsigned int flags);
     * }
     */
    public static MemorySegment SDL_ConvertSurfaceFormat(MemorySegment src, int pixel_format, int flags) {
        var mh$ = SDL_ConvertSurfaceFormat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, pixel_format, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ConvertPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"SDL_ConvertPixels");
    }
    /**
     * {@snippet :
     * int SDL_ConvertPixels(int width, int height, unsigned int src_format, void* src, int src_pitch, unsigned int dst_format, void* dst, int dst_pitch);
     * }
     */
    public static int SDL_ConvertPixels(int width, int height, int src_format, MemorySegment src, int src_pitch, int dst_format, MemorySegment dst, int dst_pitch) {
        var mh$ = SDL_ConvertPixels$MH();
        try {
            return (int)mh$.invokeExact(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PremultiplyAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"SDL_PremultiplyAlpha");
    }
    /**
     * {@snippet :
     * int SDL_PremultiplyAlpha(int width, int height, unsigned int src_format, void* src, int src_pitch, unsigned int dst_format, void* dst, int dst_pitch);
     * }
     */
    public static int SDL_PremultiplyAlpha(int width, int height, int src_format, MemorySegment src, int src_pitch, int dst_format, MemorySegment dst, int dst_pitch) {
        var mh$ = SDL_PremultiplyAlpha$MH();
        try {
            return (int)mh$.invokeExact(width, height, src_format, src, src_pitch, dst_format, dst, dst_pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"SDL_FillRect");
    }
    /**
     * {@snippet :
     * int SDL_FillRect(struct SDL_Surface* dst, struct SDL_Rect* rect, unsigned int color);
     * }
     */
    public static int SDL_FillRect(MemorySegment dst, MemorySegment rect, int color) {
        var mh$ = SDL_FillRect$MH();
        try {
            return (int)mh$.invokeExact(dst, rect, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FillRects$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"SDL_FillRects");
    }
    /**
     * {@snippet :
     * int SDL_FillRects(struct SDL_Surface* dst, struct SDL_Rect* rects, int count, unsigned int color);
     * }
     */
    public static int SDL_FillRects(MemorySegment dst, MemorySegment rects, int count, int color) {
        var mh$ = SDL_FillRects$MH();
        try {
            return (int)mh$.invokeExact(dst, rects, count, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpperBlit$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"SDL_UpperBlit");
    }
    /**
     * {@snippet :
     * int SDL_UpperBlit(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_UpperBlit(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_UpperBlit$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LowerBlit$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"SDL_LowerBlit");
    }
    /**
     * {@snippet :
     * int SDL_LowerBlit(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_LowerBlit(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_LowerBlit$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SoftStretch$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"SDL_SoftStretch");
    }
    /**
     * {@snippet :
     * int SDL_SoftStretch(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_SoftStretch(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_SoftStretch$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SoftStretchLinear$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"SDL_SoftStretchLinear");
    }
    /**
     * {@snippet :
     * int SDL_SoftStretchLinear(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_SoftStretchLinear(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_SoftStretchLinear$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpperBlitScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"SDL_UpperBlitScaled");
    }
    /**
     * {@snippet :
     * int SDL_UpperBlitScaled(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_UpperBlitScaled(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_UpperBlitScaled$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LowerBlitScaled$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"SDL_LowerBlitScaled");
    }
    /**
     * {@snippet :
     * int SDL_LowerBlitScaled(struct SDL_Surface* src, struct SDL_Rect* srcrect, struct SDL_Surface* dst, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_LowerBlitScaled(MemorySegment src, MemorySegment srcrect, MemorySegment dst, MemorySegment dstrect) {
        var mh$ = SDL_LowerBlitScaled$MH();
        try {
            return (int)mh$.invokeExact(src, srcrect, dst, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetYUVConversionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$6,"SDL_SetYUVConversionMode");
    }
    /**
     * {@snippet :
     * void SDL_SetYUVConversionMode(enum SDL_YUV_CONVERSION_MODE mode);
     * }
     */
    public static void SDL_SetYUVConversionMode(int mode) {
        var mh$ = SDL_SetYUVConversionMode$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetYUVConversionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"SDL_GetYUVConversionMode");
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();
     * }
     */
    public static int SDL_GetYUVConversionMode() {
        var mh$ = SDL_GetYUVConversionMode$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetYUVConversionModeForResolution$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"SDL_GetYUVConversionModeForResolution");
    }
    /**
     * {@snippet :
     * enum SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);
     * }
     */
    public static int SDL_GetYUVConversionModeForResolution(int width, int height) {
        var mh$ = SDL_GetYUVConversionModeForResolution$MH();
        try {
            return (int)mh$.invokeExact(width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_FULLSCREEN = 1;
     * }
     */
    public static int SDL_WINDOW_FULLSCREEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_OPENGL = 2;
     * }
     */
    public static int SDL_WINDOW_OPENGL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_SHOWN = 4;
     * }
     */
    public static int SDL_WINDOW_SHOWN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_HIDDEN = 8;
     * }
     */
    public static int SDL_WINDOW_HIDDEN() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_BORDERLESS = 16;
     * }
     */
    public static int SDL_WINDOW_BORDERLESS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_RESIZABLE = 32;
     * }
     */
    public static int SDL_WINDOW_RESIZABLE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_MINIMIZED = 64;
     * }
     */
    public static int SDL_WINDOW_MINIMIZED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_MAXIMIZED = 128;
     * }
     */
    public static int SDL_WINDOW_MAXIMIZED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_MOUSE_GRABBED = 256;
     * }
     */
    public static int SDL_WINDOW_MOUSE_GRABBED() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_INPUT_FOCUS = 512;
     * }
     */
    public static int SDL_WINDOW_INPUT_FOCUS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_MOUSE_FOCUS = 1024;
     * }
     */
    public static int SDL_WINDOW_MOUSE_FOCUS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;
     * }
     */
    public static int SDL_WINDOW_FULLSCREEN_DESKTOP() {
        return (int)4097L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_FOREIGN = 2048;
     * }
     */
    public static int SDL_WINDOW_FOREIGN() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_ALLOW_HIGHDPI = 8192;
     * }
     */
    public static int SDL_WINDOW_ALLOW_HIGHDPI() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_MOUSE_CAPTURE = 16384;
     * }
     */
    public static int SDL_WINDOW_MOUSE_CAPTURE() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_ALWAYS_ON_TOP = 32768;
     * }
     */
    public static int SDL_WINDOW_ALWAYS_ON_TOP() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_SKIP_TASKBAR = 65536;
     * }
     */
    public static int SDL_WINDOW_SKIP_TASKBAR() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_UTILITY = 131072;
     * }
     */
    public static int SDL_WINDOW_UTILITY() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_TOOLTIP = 262144;
     * }
     */
    public static int SDL_WINDOW_TOOLTIP() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_POPUP_MENU = 524288;
     * }
     */
    public static int SDL_WINDOW_POPUP_MENU() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_KEYBOARD_GRABBED = 1048576;
     * }
     */
    public static int SDL_WINDOW_KEYBOARD_GRABBED() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_VULKAN = 268435456;
     * }
     */
    public static int SDL_WINDOW_VULKAN() {
        return (int)268435456L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_METAL = 536870912;
     * }
     */
    public static int SDL_WINDOW_METAL() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowFlags.SDL_WINDOW_INPUT_GRABBED = 256;
     * }
     */
    public static int SDL_WINDOW_INPUT_GRABBED() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_NONE = 0;
     * }
     */
    public static int SDL_WINDOWEVENT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_SHOWN = 1;
     * }
     */
    public static int SDL_WINDOWEVENT_SHOWN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_HIDDEN = 2;
     * }
     */
    public static int SDL_WINDOWEVENT_HIDDEN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_EXPOSED = 3;
     * }
     */
    public static int SDL_WINDOWEVENT_EXPOSED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_MOVED = 4;
     * }
     */
    public static int SDL_WINDOWEVENT_MOVED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_RESIZED = 5;
     * }
     */
    public static int SDL_WINDOWEVENT_RESIZED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_SIZE_CHANGED = 6;
     * }
     */
    public static int SDL_WINDOWEVENT_SIZE_CHANGED() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_MINIMIZED = 7;
     * }
     */
    public static int SDL_WINDOWEVENT_MINIMIZED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_MAXIMIZED = 8;
     * }
     */
    public static int SDL_WINDOWEVENT_MAXIMIZED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_RESTORED = 9;
     * }
     */
    public static int SDL_WINDOWEVENT_RESTORED() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_ENTER = 10;
     * }
     */
    public static int SDL_WINDOWEVENT_ENTER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_LEAVE = 11;
     * }
     */
    public static int SDL_WINDOWEVENT_LEAVE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_GAINED = 12;
     * }
     */
    public static int SDL_WINDOWEVENT_FOCUS_GAINED() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_FOCUS_LOST = 13;
     * }
     */
    public static int SDL_WINDOWEVENT_FOCUS_LOST() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE = 14;
     * }
     */
    public static int SDL_WINDOWEVENT_CLOSE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_TAKE_FOCUS = 15;
     * }
     */
    public static int SDL_WINDOWEVENT_TAKE_FOCUS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_HIT_TEST = 16;
     * }
     */
    public static int SDL_WINDOWEVENT_HIT_TEST() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_ICCPROF_CHANGED = 17;
     * }
     */
    public static int SDL_WINDOWEVENT_ICCPROF_CHANGED() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SDL_WindowEventID.SDL_WINDOWEVENT_DISPLAY_CHANGED = 18;
     * }
     */
    public static int SDL_WINDOWEVENT_DISPLAY_CHANGED() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayEventID.SDL_DISPLAYEVENT_NONE = 0;
     * }
     */
    public static int SDL_DISPLAYEVENT_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayEventID.SDL_DISPLAYEVENT_ORIENTATION = 1;
     * }
     */
    public static int SDL_DISPLAYEVENT_ORIENTATION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayEventID.SDL_DISPLAYEVENT_CONNECTED = 2;
     * }
     */
    public static int SDL_DISPLAYEVENT_CONNECTED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayEventID.SDL_DISPLAYEVENT_DISCONNECTED = 3;
     * }
     */
    public static int SDL_DISPLAYEVENT_DISCONNECTED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayEventID.SDL_DISPLAYEVENT_MOVED = 4;
     * }
     */
    public static int SDL_DISPLAYEVENT_MOVED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation.SDL_ORIENTATION_UNKNOWN = 0;
     * }
     */
    public static int SDL_ORIENTATION_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE = 1;
     * }
     */
    public static int SDL_ORIENTATION_LANDSCAPE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation.SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
     * }
     */
    public static int SDL_ORIENTATION_LANDSCAPE_FLIPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT = 3;
     * }
     */
    public static int SDL_ORIENTATION_PORTRAIT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation.SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;
     * }
     */
    public static int SDL_ORIENTATION_PORTRAIT_FLIPPED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_FlashOperation.SDL_FLASH_CANCEL = 0;
     * }
     */
    public static int SDL_FLASH_CANCEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_FlashOperation.SDL_FLASH_BRIEFLY = 1;
     * }
     */
    public static int SDL_FLASH_BRIEFLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_FlashOperation.SDL_FLASH_UNTIL_FOCUSED = 2;
     * }
     */
    public static int SDL_FLASH_UNTIL_FOCUSED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef void* SDL_GLContext;
     * }
     */
    public static final AddressLayout SDL_GLContext = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_RED_SIZE = 0;
     * }
     */
    public static int SDL_GL_RED_SIZE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_GREEN_SIZE = 1;
     * }
     */
    public static int SDL_GL_GREEN_SIZE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_BLUE_SIZE = 2;
     * }
     */
    public static int SDL_GL_BLUE_SIZE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ALPHA_SIZE = 3;
     * }
     */
    public static int SDL_GL_ALPHA_SIZE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_BUFFER_SIZE = 4;
     * }
     */
    public static int SDL_GL_BUFFER_SIZE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_DOUBLEBUFFER = 5;
     * }
     */
    public static int SDL_GL_DOUBLEBUFFER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_DEPTH_SIZE = 6;
     * }
     */
    public static int SDL_GL_DEPTH_SIZE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_STENCIL_SIZE = 7;
     * }
     */
    public static int SDL_GL_STENCIL_SIZE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ACCUM_RED_SIZE = 8;
     * }
     */
    public static int SDL_GL_ACCUM_RED_SIZE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE = 9;
     * }
     */
    public static int SDL_GL_ACCUM_GREEN_SIZE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE = 10;
     * }
     */
    public static int SDL_GL_ACCUM_BLUE_SIZE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE = 11;
     * }
     */
    public static int SDL_GL_ACCUM_ALPHA_SIZE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_STEREO = 12;
     * }
     */
    public static int SDL_GL_STEREO() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS = 13;
     * }
     */
    public static int SDL_GL_MULTISAMPLEBUFFERS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES = 14;
     * }
     */
    public static int SDL_GL_MULTISAMPLESAMPLES() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_ACCELERATED_VISUAL = 15;
     * }
     */
    public static int SDL_GL_ACCELERATED_VISUAL() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_RETAINED_BACKING = 16;
     * }
     */
    public static int SDL_GL_RETAINED_BACKING() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION = 17;
     * }
     */
    public static int SDL_GL_CONTEXT_MAJOR_VERSION() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION = 18;
     * }
     */
    public static int SDL_GL_CONTEXT_MINOR_VERSION() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_EGL = 19;
     * }
     */
    public static int SDL_GL_CONTEXT_EGL() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_FLAGS = 20;
     * }
     */
    public static int SDL_GL_CONTEXT_FLAGS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK = 21;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_MASK() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
     * }
     */
    public static int SDL_GL_SHARE_WITH_CURRENT_CONTEXT() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
     * }
     */
    public static int SDL_GL_FRAMEBUFFER_SRGB_CAPABLE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_NOTIFICATION() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_CONTEXT_NO_ERROR = 26;
     * }
     */
    public static int SDL_GL_CONTEXT_NO_ERROR() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum SDL_GLattr.SDL_GL_FLOATBUFFERS = 27;
     * }
     */
    public static int SDL_GL_FLOATBUFFERS() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_CORE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_COMPATIBILITY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_ES = 4;
     * }
     */
    public static int SDL_GL_CONTEXT_PROFILE_ES() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextFlag.SDL_GL_CONTEXT_DEBUG_FLAG = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_DEBUG_FLAG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextFlag.SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
     * }
     */
    public static int SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextFlag.SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
     * }
     */
    public static int SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextFlag.SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_ISOLATION_FLAG() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GLcontextReleaseFlag.SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_NO_NOTIFICATION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GLContextResetNotification.SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;
     * }
     */
    public static int SDL_GL_CONTEXT_RESET_LOSE_CONTEXT() {
        return (int)1L;
    }
    public static MethodHandle SDL_GetNumVideoDrivers$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"SDL_GetNumVideoDrivers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumVideoDrivers();
     * }
     */
    public static int SDL_GetNumVideoDrivers() {
        var mh$ = SDL_GetNumVideoDrivers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetVideoDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"SDL_GetVideoDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetVideoDriver(int index);
     * }
     */
    public static MemorySegment SDL_GetVideoDriver(int index) {
        var mh$ = SDL_GetVideoDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_VideoInit$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"SDL_VideoInit");
    }
    /**
     * {@snippet :
     * int SDL_VideoInit(char* driver_name);
     * }
     */
    public static int SDL_VideoInit(MemorySegment driver_name) {
        var mh$ = SDL_VideoInit$MH();
        try {
            return (int)mh$.invokeExact(driver_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_VideoQuit$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"SDL_VideoQuit");
    }
    /**
     * {@snippet :
     * void SDL_VideoQuit();
     * }
     */
    public static void SDL_VideoQuit() {
        var mh$ = SDL_VideoQuit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCurrentVideoDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"SDL_GetCurrentVideoDriver");
    }
    /**
     * {@snippet :
     * char* SDL_GetCurrentVideoDriver();
     * }
     */
    public static MemorySegment SDL_GetCurrentVideoDriver() {
        var mh$ = SDL_GetCurrentVideoDriver$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumVideoDisplays$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"SDL_GetNumVideoDisplays");
    }
    /**
     * {@snippet :
     * int SDL_GetNumVideoDisplays();
     * }
     */
    public static int SDL_GetNumVideoDisplays() {
        var mh$ = SDL_GetNumVideoDisplays$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayName$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"SDL_GetDisplayName");
    }
    /**
     * {@snippet :
     * char* SDL_GetDisplayName(int displayIndex);
     * }
     */
    public static MemorySegment SDL_GetDisplayName(int displayIndex) {
        var mh$ = SDL_GetDisplayName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"SDL_GetDisplayBounds");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayBounds(int displayIndex, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_GetDisplayBounds(int displayIndex, MemorySegment rect) {
        var mh$ = SDL_GetDisplayBounds$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayUsableBounds$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"SDL_GetDisplayUsableBounds");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayUsableBounds(int displayIndex, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_GetDisplayUsableBounds(int displayIndex, MemorySegment rect) {
        var mh$ = SDL_GetDisplayUsableBounds$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"SDL_GetDisplayDPI");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayDPI(int displayIndex, float* ddpi, float* hdpi, float* vdpi);
     * }
     */
    public static int SDL_GetDisplayDPI(int displayIndex, MemorySegment ddpi, MemorySegment hdpi, MemorySegment vdpi) {
        var mh$ = SDL_GetDisplayDPI$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, ddpi, hdpi, vdpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayOrientation$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"SDL_GetDisplayOrientation");
    }
    /**
     * {@snippet :
     * enum SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);
     * }
     */
    public static int SDL_GetDisplayOrientation(int displayIndex) {
        var mh$ = SDL_GetDisplayOrientation$MH();
        try {
            return (int)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumDisplayModes$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"SDL_GetNumDisplayModes");
    }
    /**
     * {@snippet :
     * int SDL_GetNumDisplayModes(int displayIndex);
     * }
     */
    public static int SDL_GetNumDisplayModes(int displayIndex) {
        var mh$ = SDL_GetNumDisplayModes$MH();
        try {
            return (int)mh$.invokeExact(displayIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$6,"SDL_GetDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetDisplayMode(int displayIndex, int modeIndex, struct SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetDisplayMode(int displayIndex, int modeIndex, MemorySegment mode) {
        var mh$ = SDL_GetDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, modeIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetDesktopDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"SDL_GetDesktopDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetDesktopDisplayMode(int displayIndex, struct SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetDesktopDisplayMode(int displayIndex, MemorySegment mode) {
        var mh$ = SDL_GetDesktopDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetCurrentDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"SDL_GetCurrentDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetCurrentDisplayMode(int displayIndex, struct SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetCurrentDisplayMode(int displayIndex, MemorySegment mode) {
        var mh$ = SDL_GetCurrentDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(displayIndex, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetClosestDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"SDL_GetClosestDisplayMode");
    }
    /**
     * {@snippet :
     * struct SDL_DisplayMode* SDL_GetClosestDisplayMode(int displayIndex, struct SDL_DisplayMode* mode, struct SDL_DisplayMode* closest);
     * }
     */
    public static MemorySegment SDL_GetClosestDisplayMode(int displayIndex, MemorySegment mode, MemorySegment closest) {
        var mh$ = SDL_GetClosestDisplayMode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(displayIndex, mode, closest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetPointDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"SDL_GetPointDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetPointDisplayIndex(struct SDL_Point* point);
     * }
     */
    public static int SDL_GetPointDisplayIndex(MemorySegment point) {
        var mh$ = SDL_GetPointDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRectDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"SDL_GetRectDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetRectDisplayIndex(struct SDL_Rect* rect);
     * }
     */
    public static int SDL_GetRectDisplayIndex(MemorySegment rect) {
        var mh$ = SDL_GetRectDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowDisplayIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"SDL_GetWindowDisplayIndex");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowDisplayIndex(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowDisplayIndex(MemorySegment window) {
        var mh$ = SDL_GetWindowDisplayIndex$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"SDL_SetWindowDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowDisplayMode(struct SDL_Window* window, struct SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_SetWindowDisplayMode(MemorySegment window, MemorySegment mode) {
        var mh$ = SDL_SetWindowDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"SDL_GetWindowDisplayMode");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowDisplayMode(struct SDL_Window* window, struct SDL_DisplayMode* mode);
     * }
     */
    public static int SDL_GetWindowDisplayMode(MemorySegment window, MemorySegment mode) {
        var mh$ = SDL_GetWindowDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(window, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowICCProfile$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"SDL_GetWindowICCProfile");
    }
    /**
     * {@snippet :
     * void* SDL_GetWindowICCProfile(struct SDL_Window* window, unsigned long long* size);
     * }
     */
    public static MemorySegment SDL_GetWindowICCProfile(MemorySegment window, MemorySegment size) {
        var mh$ = SDL_GetWindowICCProfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"SDL_GetWindowPixelFormat");
    }
    /**
     * {@snippet :
     * unsigned int SDL_GetWindowPixelFormat(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowPixelFormat(MemorySegment window) {
        var mh$ = SDL_GetWindowPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"SDL_CreateWindow");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_CreateWindow(char* title, int x, int y, int w, int h, unsigned int flags);
     * }
     */
    public static MemorySegment SDL_CreateWindow(MemorySegment title, int x, int y, int w, int h, int flags) {
        var mh$ = SDL_CreateWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(title, x, y, w, h, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindowFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"SDL_CreateWindowFrom");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_CreateWindowFrom(void* data);
     * }
     */
    public static MemorySegment SDL_CreateWindowFrom(MemorySegment data) {
        var mh$ = SDL_CreateWindowFrom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowID$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"SDL_GetWindowID");
    }
    /**
     * {@snippet :
     * unsigned int SDL_GetWindowID(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowID(MemorySegment window) {
        var mh$ = SDL_GetWindowID$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowFromID$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$2,"SDL_GetWindowFromID");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_GetWindowFromID(unsigned int id);
     * }
     */
    public static MemorySegment SDL_GetWindowFromID(int id) {
        var mh$ = SDL_GetWindowFromID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"SDL_GetWindowFlags");
    }
    /**
     * {@snippet :
     * unsigned int SDL_GetWindowFlags(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowFlags(MemorySegment window) {
        var mh$ = SDL_GetWindowFlags$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"SDL_SetWindowTitle");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowTitle(struct SDL_Window* window, char* title);
     * }
     */
    public static void SDL_SetWindowTitle(MemorySegment window, MemorySegment title) {
        var mh$ = SDL_SetWindowTitle$MH();
        try {
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowTitle$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"SDL_GetWindowTitle");
    }
    /**
     * {@snippet :
     * char* SDL_GetWindowTitle(struct SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowTitle(MemorySegment window) {
        var mh$ = SDL_GetWindowTitle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"SDL_SetWindowIcon");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowIcon(struct SDL_Window* window, struct SDL_Surface* icon);
     * }
     */
    public static void SDL_SetWindowIcon(MemorySegment window, MemorySegment icon) {
        var mh$ = SDL_SetWindowIcon$MH();
        try {
            mh$.invokeExact(window, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowData$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"SDL_SetWindowData");
    }
    /**
     * {@snippet :
     * void* SDL_SetWindowData(struct SDL_Window* window, char* name, void* userdata);
     * }
     */
    public static MemorySegment SDL_SetWindowData(MemorySegment window, MemorySegment name, MemorySegment userdata) {
        var mh$ = SDL_SetWindowData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, name, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowData$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"SDL_GetWindowData");
    }
    /**
     * {@snippet :
     * void* SDL_GetWindowData(struct SDL_Window* window, char* name);
     * }
     */
    public static MemorySegment SDL_GetWindowData(MemorySegment window, MemorySegment name) {
        var mh$ = SDL_GetWindowData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"SDL_SetWindowPosition");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowPosition(struct SDL_Window* window, int x, int y);
     * }
     */
    public static void SDL_SetWindowPosition(MemorySegment window, int x, int y) {
        var mh$ = SDL_SetWindowPosition$MH();
        try {
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"SDL_GetWindowPosition");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowPosition(struct SDL_Window* window, int* x, int* y);
     * }
     */
    public static void SDL_GetWindowPosition(MemorySegment window, MemorySegment x, MemorySegment y) {
        var mh$ = SDL_GetWindowPosition$MH();
        try {
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"SDL_SetWindowSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowSize(struct SDL_Window* window, int w, int h);
     * }
     */
    public static void SDL_SetWindowSize(MemorySegment window, int w, int h) {
        var mh$ = SDL_SetWindowSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"SDL_GetWindowSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowSize(struct SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowBordersSize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"SDL_GetWindowBordersSize");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowBordersSize(struct SDL_Window* window, int* top, int* left, int* bottom, int* right);
     * }
     */
    public static int SDL_GetWindowBordersSize(MemorySegment window, MemorySegment top, MemorySegment left, MemorySegment bottom, MemorySegment right) {
        var mh$ = SDL_GetWindowBordersSize$MH();
        try {
            return (int)mh$.invokeExact(window, top, left, bottom, right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSizeInPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"SDL_GetWindowSizeInPixels");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowSizeInPixels(struct SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowSizeInPixels(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowSizeInPixels$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMinimumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"SDL_SetWindowMinimumSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMinimumSize(struct SDL_Window* window, int min_w, int min_h);
     * }
     */
    public static void SDL_SetWindowMinimumSize(MemorySegment window, int min_w, int min_h) {
        var mh$ = SDL_SetWindowMinimumSize$MH();
        try {
            mh$.invokeExact(window, min_w, min_h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMinimumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"SDL_GetWindowMinimumSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowMinimumSize(struct SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowMinimumSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowMinimumSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMaximumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"SDL_SetWindowMaximumSize");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMaximumSize(struct SDL_Window* window, int max_w, int max_h);
     * }
     */
    public static void SDL_SetWindowMaximumSize(MemorySegment window, int max_w, int max_h) {
        var mh$ = SDL_SetWindowMaximumSize$MH();
        try {
            mh$.invokeExact(window, max_w, max_h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMaximumSize$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"SDL_GetWindowMaximumSize");
    }
    /**
     * {@snippet :
     * void SDL_GetWindowMaximumSize(struct SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GetWindowMaximumSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetWindowMaximumSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowBordered$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"SDL_SetWindowBordered");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowBordered(struct SDL_Window* window, enum SDL_bool bordered);
     * }
     */
    public static void SDL_SetWindowBordered(MemorySegment window, int bordered) {
        var mh$ = SDL_SetWindowBordered$MH();
        try {
            mh$.invokeExact(window, bordered);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowResizable$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"SDL_SetWindowResizable");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowResizable(struct SDL_Window* window, enum SDL_bool resizable);
     * }
     */
    public static void SDL_SetWindowResizable(MemorySegment window, int resizable) {
        var mh$ = SDL_SetWindowResizable$MH();
        try {
            mh$.invokeExact(window, resizable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowAlwaysOnTop$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"SDL_SetWindowAlwaysOnTop");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowAlwaysOnTop(struct SDL_Window* window, enum SDL_bool on_top);
     * }
     */
    public static void SDL_SetWindowAlwaysOnTop(MemorySegment window, int on_top) {
        var mh$ = SDL_SetWindowAlwaysOnTop$MH();
        try {
            mh$.invokeExact(window, on_top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"SDL_ShowWindow");
    }
    /**
     * {@snippet :
     * void SDL_ShowWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_ShowWindow(MemorySegment window) {
        var mh$ = SDL_ShowWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HideWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"SDL_HideWindow");
    }
    /**
     * {@snippet :
     * void SDL_HideWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_HideWindow(MemorySegment window) {
        var mh$ = SDL_HideWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RaiseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"SDL_RaiseWindow");
    }
    /**
     * {@snippet :
     * void SDL_RaiseWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_RaiseWindow(MemorySegment window) {
        var mh$ = SDL_RaiseWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MaximizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"SDL_MaximizeWindow");
    }
    /**
     * {@snippet :
     * void SDL_MaximizeWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_MaximizeWindow(MemorySegment window) {
        var mh$ = SDL_MaximizeWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_MinimizeWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"SDL_MinimizeWindow");
    }
    /**
     * {@snippet :
     * void SDL_MinimizeWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_MinimizeWindow(MemorySegment window) {
        var mh$ = SDL_MinimizeWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RestoreWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"SDL_RestoreWindow");
    }
    /**
     * {@snippet :
     * void SDL_RestoreWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_RestoreWindow(MemorySegment window) {
        var mh$ = SDL_RestoreWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowFullscreen$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"SDL_SetWindowFullscreen");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowFullscreen(struct SDL_Window* window, unsigned int flags);
     * }
     */
    public static int SDL_SetWindowFullscreen(MemorySegment window, int flags) {
        var mh$ = SDL_SetWindowFullscreen$MH();
        try {
            return (int)mh$.invokeExact(window, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"SDL_HasWindowSurface");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasWindowSurface(struct SDL_Window* window);
     * }
     */
    public static int SDL_HasWindowSurface(MemorySegment window) {
        var mh$ = SDL_HasWindowSurface$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"SDL_GetWindowSurface");
    }
    /**
     * {@snippet :
     * struct SDL_Surface* SDL_GetWindowSurface(struct SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowSurface(MemorySegment window) {
        var mh$ = SDL_GetWindowSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"SDL_UpdateWindowSurface");
    }
    /**
     * {@snippet :
     * int SDL_UpdateWindowSurface(struct SDL_Window* window);
     * }
     */
    public static int SDL_UpdateWindowSurface(MemorySegment window) {
        var mh$ = SDL_UpdateWindowSurface$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateWindowSurfaceRects$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"SDL_UpdateWindowSurfaceRects");
    }
    /**
     * {@snippet :
     * int SDL_UpdateWindowSurfaceRects(struct SDL_Window* window, struct SDL_Rect* rects, int numrects);
     * }
     */
    public static int SDL_UpdateWindowSurfaceRects(MemorySegment window, MemorySegment rects, int numrects) {
        var mh$ = SDL_UpdateWindowSurfaceRects$MH();
        try {
            return (int)mh$.invokeExact(window, rects, numrects);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyWindowSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"SDL_DestroyWindowSurface");
    }
    /**
     * {@snippet :
     * int SDL_DestroyWindowSurface(struct SDL_Window* window);
     * }
     */
    public static int SDL_DestroyWindowSurface(MemorySegment window) {
        var mh$ = SDL_DestroyWindowSurface$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"SDL_SetWindowGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowGrab(struct SDL_Window* window, enum SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowKeyboardGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"SDL_SetWindowKeyboardGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowKeyboardGrab(struct SDL_Window* window, enum SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowKeyboardGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowKeyboardGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMouseGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"SDL_SetWindowMouseGrab");
    }
    /**
     * {@snippet :
     * void SDL_SetWindowMouseGrab(struct SDL_Window* window, enum SDL_bool grabbed);
     * }
     */
    public static void SDL_SetWindowMouseGrab(MemorySegment window, int grabbed) {
        var mh$ = SDL_SetWindowMouseGrab$MH();
        try {
            mh$.invokeExact(window, grabbed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"SDL_GetWindowGrab");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GetWindowGrab(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowKeyboardGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"SDL_GetWindowKeyboardGrab");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GetWindowKeyboardGrab(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowKeyboardGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowKeyboardGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMouseGrab$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"SDL_GetWindowMouseGrab");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GetWindowMouseGrab(struct SDL_Window* window);
     * }
     */
    public static int SDL_GetWindowMouseGrab(MemorySegment window) {
        var mh$ = SDL_GetWindowMouseGrab$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetGrabbedWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$0,"SDL_GetGrabbedWindow");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_GetGrabbedWindow();
     * }
     */
    public static MemorySegment SDL_GetGrabbedWindow() {
        var mh$ = SDL_GetGrabbedWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowMouseRect$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"SDL_SetWindowMouseRect");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowMouseRect(struct SDL_Window* window, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_SetWindowMouseRect(MemorySegment window, MemorySegment rect) {
        var mh$ = SDL_SetWindowMouseRect$MH();
        try {
            return (int)mh$.invokeExact(window, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowMouseRect$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"SDL_GetWindowMouseRect");
    }
    /**
     * {@snippet :
     * struct SDL_Rect* SDL_GetWindowMouseRect(struct SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetWindowMouseRect(MemorySegment window) {
        var mh$ = SDL_GetWindowMouseRect$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"SDL_SetWindowBrightness");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowBrightness(struct SDL_Window* window, float brightness);
     * }
     */
    public static int SDL_SetWindowBrightness(MemorySegment window, float brightness) {
        var mh$ = SDL_SetWindowBrightness$MH();
        try {
            return (int)mh$.invokeExact(window, brightness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowBrightness$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$6,"SDL_GetWindowBrightness");
    }
    /**
     * {@snippet :
     * float SDL_GetWindowBrightness(struct SDL_Window* window);
     * }
     */
    public static float SDL_GetWindowBrightness(MemorySegment window) {
        var mh$ = SDL_GetWindowBrightness$MH();
        try {
            return (float)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowOpacity$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"SDL_SetWindowOpacity");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowOpacity(struct SDL_Window* window, float opacity);
     * }
     */
    public static int SDL_SetWindowOpacity(MemorySegment window, float opacity) {
        var mh$ = SDL_SetWindowOpacity$MH();
        try {
            return (int)mh$.invokeExact(window, opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowOpacity$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"SDL_GetWindowOpacity");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowOpacity(struct SDL_Window* window, float* out_opacity);
     * }
     */
    public static int SDL_GetWindowOpacity(MemorySegment window, MemorySegment out_opacity) {
        var mh$ = SDL_GetWindowOpacity$MH();
        try {
            return (int)mh$.invokeExact(window, out_opacity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowModalFor$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"SDL_SetWindowModalFor");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowModalFor(struct SDL_Window* modal_window, struct SDL_Window* parent_window);
     * }
     */
    public static int SDL_SetWindowModalFor(MemorySegment modal_window, MemorySegment parent_window) {
        var mh$ = SDL_SetWindowModalFor$MH();
        try {
            return (int)mh$.invokeExact(modal_window, parent_window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowInputFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"SDL_SetWindowInputFocus");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowInputFocus(struct SDL_Window* window);
     * }
     */
    public static int SDL_SetWindowInputFocus(MemorySegment window) {
        var mh$ = SDL_SetWindowInputFocus$MH();
        try {
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetWindowGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"SDL_SetWindowGammaRamp");
    }
    /**
     * {@snippet :
     * int SDL_SetWindowGammaRamp(struct SDL_Window* window, unsigned short* red, unsigned short* green, unsigned short* blue);
     * }
     */
    public static int SDL_SetWindowGammaRamp(MemorySegment window, MemorySegment red, MemorySegment green, MemorySegment blue) {
        var mh$ = SDL_SetWindowGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(window, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetWindowGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"SDL_GetWindowGammaRamp");
    }
    /**
     * {@snippet :
     * int SDL_GetWindowGammaRamp(struct SDL_Window* window, unsigned short* red, unsigned short* green, unsigned short* blue);
     * }
     */
    public static int SDL_GetWindowGammaRamp(MemorySegment window, MemorySegment red, MemorySegment green, MemorySegment blue) {
        var mh$ = SDL_GetWindowGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(window, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_NORMAL = 0;
     * }
     */
    public static int SDL_HITTEST_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_DRAGGABLE = 1;
     * }
     */
    public static int SDL_HITTEST_DRAGGABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPLEFT = 2;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOPLEFT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_TOP = 3;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_TOPRIGHT = 4;
     * }
     */
    public static int SDL_HITTEST_RESIZE_TOPRIGHT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_RIGHT = 5;
     * }
     */
    public static int SDL_HITTEST_RESIZE_RIGHT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOMRIGHT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOM = 7;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOM() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
     * }
     */
    public static int SDL_HITTEST_RESIZE_BOTTOMLEFT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_HitTestResult.SDL_HITTEST_RESIZE_LEFT = 9;
     * }
     */
    public static int SDL_HITTEST_RESIZE_LEFT() {
        return (int)9L;
    }
    public static MethodHandle SDL_FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"SDL_FlashWindow");
    }
    /**
     * {@snippet :
     * int SDL_FlashWindow(struct SDL_Window* window, enum SDL_FlashOperation operation);
     * }
     */
    public static int SDL_FlashWindow(MemorySegment window, int operation) {
        var mh$ = SDL_FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(window, operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"SDL_DestroyWindow");
    }
    /**
     * {@snippet :
     * void SDL_DestroyWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_DestroyWindow(MemorySegment window) {
        var mh$ = SDL_DestroyWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsScreenSaverEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"SDL_IsScreenSaverEnabled");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IsScreenSaverEnabled();
     * }
     */
    public static int SDL_IsScreenSaverEnabled() {
        var mh$ = SDL_IsScreenSaverEnabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EnableScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"SDL_EnableScreenSaver");
    }
    /**
     * {@snippet :
     * void SDL_EnableScreenSaver();
     * }
     */
    public static void SDL_EnableScreenSaver() {
        var mh$ = SDL_EnableScreenSaver$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DisableScreenSaver$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"SDL_DisableScreenSaver");
    }
    /**
     * {@snippet :
     * void SDL_DisableScreenSaver();
     * }
     */
    public static void SDL_DisableScreenSaver() {
        var mh$ = SDL_DisableScreenSaver$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_LoadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"SDL_GL_LoadLibrary");
    }
    /**
     * {@snippet :
     * int SDL_GL_LoadLibrary(char* path);
     * }
     */
    public static int SDL_GL_LoadLibrary(MemorySegment path) {
        var mh$ = SDL_GL_LoadLibrary$MH();
        try {
            return (int)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"SDL_GL_GetProcAddress");
    }
    /**
     * {@snippet :
     * void* SDL_GL_GetProcAddress(char* proc);
     * }
     */
    public static MemorySegment SDL_GL_GetProcAddress(MemorySegment proc) {
        var mh$ = SDL_GL_GetProcAddress$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_UnloadLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"SDL_GL_UnloadLibrary");
    }
    /**
     * {@snippet :
     * void SDL_GL_UnloadLibrary();
     * }
     */
    public static void SDL_GL_UnloadLibrary() {
        var mh$ = SDL_GL_UnloadLibrary$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_ExtensionSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"SDL_GL_ExtensionSupported");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GL_ExtensionSupported(char* extension);
     * }
     */
    public static int SDL_GL_ExtensionSupported(MemorySegment extension) {
        var mh$ = SDL_GL_ExtensionSupported$MH();
        try {
            return (int)mh$.invokeExact(extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_ResetAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"SDL_GL_ResetAttributes");
    }
    /**
     * {@snippet :
     * void SDL_GL_ResetAttributes();
     * }
     */
    public static void SDL_GL_ResetAttributes() {
        var mh$ = SDL_GL_ResetAttributes$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"SDL_GL_SetAttribute");
    }
    /**
     * {@snippet :
     * int SDL_GL_SetAttribute(enum SDL_GLattr attr, int value);
     * }
     */
    public static int SDL_GL_SetAttribute(int attr, int value) {
        var mh$ = SDL_GL_SetAttribute$MH();
        try {
            return (int)mh$.invokeExact(attr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"SDL_GL_GetAttribute");
    }
    /**
     * {@snippet :
     * int SDL_GL_GetAttribute(enum SDL_GLattr attr, int* value);
     * }
     */
    public static int SDL_GL_GetAttribute(int attr, MemorySegment value) {
        var mh$ = SDL_GL_GetAttribute$MH();
        try {
            return (int)mh$.invokeExact(attr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_CreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"SDL_GL_CreateContext");
    }
    /**
     * {@snippet :
     * void* SDL_GL_CreateContext(struct SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GL_CreateContext(MemorySegment window) {
        var mh$ = SDL_GL_CreateContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_MakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"SDL_GL_MakeCurrent");
    }
    /**
     * {@snippet :
     * int SDL_GL_MakeCurrent(struct SDL_Window* window, void* context);
     * }
     */
    public static int SDL_GL_MakeCurrent(MemorySegment window, MemorySegment context) {
        var mh$ = SDL_GL_MakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(window, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetCurrentWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"SDL_GL_GetCurrentWindow");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_GL_GetCurrentWindow();
     * }
     */
    public static MemorySegment SDL_GL_GetCurrentWindow() {
        var mh$ = SDL_GL_GetCurrentWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"SDL_GL_GetCurrentContext");
    }
    /**
     * {@snippet :
     * void* SDL_GL_GetCurrentContext();
     * }
     */
    public static MemorySegment SDL_GL_GetCurrentContext() {
        var mh$ = SDL_GL_GetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetDrawableSize$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"SDL_GL_GetDrawableSize");
    }
    /**
     * {@snippet :
     * void SDL_GL_GetDrawableSize(struct SDL_Window* window, int* w, int* h);
     * }
     */
    public static void SDL_GL_GetDrawableSize(MemorySegment window, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GL_GetDrawableSize$MH();
        try {
            mh$.invokeExact(window, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SetSwapInterval$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"SDL_GL_SetSwapInterval");
    }
    /**
     * {@snippet :
     * int SDL_GL_SetSwapInterval(int interval);
     * }
     */
    public static int SDL_GL_SetSwapInterval(int interval) {
        var mh$ = SDL_GL_SetSwapInterval$MH();
        try {
            return (int)mh$.invokeExact(interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_GetSwapInterval$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"SDL_GL_GetSwapInterval");
    }
    /**
     * {@snippet :
     * int SDL_GL_GetSwapInterval();
     * }
     */
    public static int SDL_GL_GetSwapInterval() {
        var mh$ = SDL_GL_GetSwapInterval$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_SwapWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"SDL_GL_SwapWindow");
    }
    /**
     * {@snippet :
     * void SDL_GL_SwapWindow(struct SDL_Window* window);
     * }
     */
    public static void SDL_GL_SwapWindow(MemorySegment window) {
        var mh$ = SDL_GL_SwapWindow$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_DeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"SDL_GL_DeleteContext");
    }
    /**
     * {@snippet :
     * void SDL_GL_DeleteContext(void* context);
     * }
     */
    public static void SDL_GL_DeleteContext(MemorySegment context) {
        var mh$ = SDL_GL_DeleteContext$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_Keycode;
     * }
     */
    public static final OfInt SDL_Keycode = JAVA_INT;
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_UNKNOWN = 0;
     * }
     */
    public static int SDLK_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RETURN = 13;
     * }
     */
    public static int SDLK_RETURN() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_ESCAPE = 27;
     * }
     */
    public static int SDLK_ESCAPE() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_BACKSPACE = 8;
     * }
     */
    public static int SDLK_BACKSPACE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_TAB = 9;
     * }
     */
    public static int SDLK_TAB() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SPACE = 32;
     * }
     */
    public static int SDLK_SPACE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_EXCLAIM = 33;
     * }
     */
    public static int SDLK_EXCLAIM() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_QUOTEDBL = 34;
     * }
     */
    public static int SDLK_QUOTEDBL() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_HASH = 35;
     * }
     */
    public static int SDLK_HASH() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PERCENT = 37;
     * }
     */
    public static int SDLK_PERCENT() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_DOLLAR = 36;
     * }
     */
    public static int SDLK_DOLLAR() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AMPERSAND = 38;
     * }
     */
    public static int SDLK_AMPERSAND() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_QUOTE = 39;
     * }
     */
    public static int SDLK_QUOTE() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LEFTPAREN = 40;
     * }
     */
    public static int SDLK_LEFTPAREN() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RIGHTPAREN = 41;
     * }
     */
    public static int SDLK_RIGHTPAREN() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_ASTERISK = 42;
     * }
     */
    public static int SDLK_ASTERISK() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PLUS = 43;
     * }
     */
    public static int SDLK_PLUS() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_COMMA = 44;
     * }
     */
    public static int SDLK_COMMA() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MINUS = 45;
     * }
     */
    public static int SDLK_MINUS() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PERIOD = 46;
     * }
     */
    public static int SDLK_PERIOD() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SLASH = 47;
     * }
     */
    public static int SDLK_SLASH() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_0 = 48;
     * }
     */
    public static int SDLK_0() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_1 = 49;
     * }
     */
    public static int SDLK_1() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_2 = 50;
     * }
     */
    public static int SDLK_2() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_3 = 51;
     * }
     */
    public static int SDLK_3() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_4 = 52;
     * }
     */
    public static int SDLK_4() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_5 = 53;
     * }
     */
    public static int SDLK_5() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_6 = 54;
     * }
     */
    public static int SDLK_6() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_7 = 55;
     * }
     */
    public static int SDLK_7() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_8 = 56;
     * }
     */
    public static int SDLK_8() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_9 = 57;
     * }
     */
    public static int SDLK_9() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_COLON = 58;
     * }
     */
    public static int SDLK_COLON() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SEMICOLON = 59;
     * }
     */
    public static int SDLK_SEMICOLON() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LESS = 60;
     * }
     */
    public static int SDLK_LESS() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_EQUALS = 61;
     * }
     */
    public static int SDLK_EQUALS() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_GREATER = 62;
     * }
     */
    public static int SDLK_GREATER() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_QUESTION = 63;
     * }
     */
    public static int SDLK_QUESTION() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AT = 64;
     * }
     */
    public static int SDLK_AT() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LEFTBRACKET = 91;
     * }
     */
    public static int SDLK_LEFTBRACKET() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_BACKSLASH = 92;
     * }
     */
    public static int SDLK_BACKSLASH() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RIGHTBRACKET = 93;
     * }
     */
    public static int SDLK_RIGHTBRACKET() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CARET = 94;
     * }
     */
    public static int SDLK_CARET() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_UNDERSCORE = 95;
     * }
     */
    public static int SDLK_UNDERSCORE() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_BACKQUOTE = 96;
     * }
     */
    public static int SDLK_BACKQUOTE() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_a = 97;
     * }
     */
    public static int SDLK_a() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_b = 98;
     * }
     */
    public static int SDLK_b() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_c = 99;
     * }
     */
    public static int SDLK_c() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_d = 100;
     * }
     */
    public static int SDLK_d() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_e = 101;
     * }
     */
    public static int SDLK_e() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_f = 102;
     * }
     */
    public static int SDLK_f() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_g = 103;
     * }
     */
    public static int SDLK_g() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_h = 104;
     * }
     */
    public static int SDLK_h() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_i = 105;
     * }
     */
    public static int SDLK_i() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_j = 106;
     * }
     */
    public static int SDLK_j() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_k = 107;
     * }
     */
    public static int SDLK_k() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_l = 108;
     * }
     */
    public static int SDLK_l() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_m = 109;
     * }
     */
    public static int SDLK_m() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_n = 110;
     * }
     */
    public static int SDLK_n() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_o = 111;
     * }
     */
    public static int SDLK_o() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_p = 112;
     * }
     */
    public static int SDLK_p() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_q = 113;
     * }
     */
    public static int SDLK_q() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_r = 114;
     * }
     */
    public static int SDLK_r() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_s = 115;
     * }
     */
    public static int SDLK_s() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_t = 116;
     * }
     */
    public static int SDLK_t() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_u = 117;
     * }
     */
    public static int SDLK_u() {
        return (int)117L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_v = 118;
     * }
     */
    public static int SDLK_v() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_w = 119;
     * }
     */
    public static int SDLK_w() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_x = 120;
     * }
     */
    public static int SDLK_x() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_y = 121;
     * }
     */
    public static int SDLK_y() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_z = 122;
     * }
     */
    public static int SDLK_z() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CAPSLOCK = 1073741881;
     * }
     */
    public static int SDLK_CAPSLOCK() {
        return (int)1073741881L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F1 = 1073741882;
     * }
     */
    public static int SDLK_F1() {
        return (int)1073741882L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F2 = 1073741883;
     * }
     */
    public static int SDLK_F2() {
        return (int)1073741883L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F3 = 1073741884;
     * }
     */
    public static int SDLK_F3() {
        return (int)1073741884L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F4 = 1073741885;
     * }
     */
    public static int SDLK_F4() {
        return (int)1073741885L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F5 = 1073741886;
     * }
     */
    public static int SDLK_F5() {
        return (int)1073741886L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F6 = 1073741887;
     * }
     */
    public static int SDLK_F6() {
        return (int)1073741887L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F7 = 1073741888;
     * }
     */
    public static int SDLK_F7() {
        return (int)1073741888L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F8 = 1073741889;
     * }
     */
    public static int SDLK_F8() {
        return (int)1073741889L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F9 = 1073741890;
     * }
     */
    public static int SDLK_F9() {
        return (int)1073741890L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F10 = 1073741891;
     * }
     */
    public static int SDLK_F10() {
        return (int)1073741891L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F11 = 1073741892;
     * }
     */
    public static int SDLK_F11() {
        return (int)1073741892L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F12 = 1073741893;
     * }
     */
    public static int SDLK_F12() {
        return (int)1073741893L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PRINTSCREEN = 1073741894;
     * }
     */
    public static int SDLK_PRINTSCREEN() {
        return (int)1073741894L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SCROLLLOCK = 1073741895;
     * }
     */
    public static int SDLK_SCROLLLOCK() {
        return (int)1073741895L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PAUSE = 1073741896;
     * }
     */
    public static int SDLK_PAUSE() {
        return (int)1073741896L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_INSERT = 1073741897;
     * }
     */
    public static int SDLK_INSERT() {
        return (int)1073741897L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_HOME = 1073741898;
     * }
     */
    public static int SDLK_HOME() {
        return (int)1073741898L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PAGEUP = 1073741899;
     * }
     */
    public static int SDLK_PAGEUP() {
        return (int)1073741899L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_DELETE = 127;
     * }
     */
    public static int SDLK_DELETE() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_END = 1073741901;
     * }
     */
    public static int SDLK_END() {
        return (int)1073741901L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PAGEDOWN = 1073741902;
     * }
     */
    public static int SDLK_PAGEDOWN() {
        return (int)1073741902L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RIGHT = 1073741903;
     * }
     */
    public static int SDLK_RIGHT() {
        return (int)1073741903L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LEFT = 1073741904;
     * }
     */
    public static int SDLK_LEFT() {
        return (int)1073741904L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_DOWN = 1073741905;
     * }
     */
    public static int SDLK_DOWN() {
        return (int)1073741905L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_UP = 1073741906;
     * }
     */
    public static int SDLK_UP() {
        return (int)1073741906L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_NUMLOCKCLEAR = 1073741907;
     * }
     */
    public static int SDLK_NUMLOCKCLEAR() {
        return (int)1073741907L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_DIVIDE = 1073741908;
     * }
     */
    public static int SDLK_KP_DIVIDE() {
        return (int)1073741908L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MULTIPLY = 1073741909;
     * }
     */
    public static int SDLK_KP_MULTIPLY() {
        return (int)1073741909L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MINUS = 1073741910;
     * }
     */
    public static int SDLK_KP_MINUS() {
        return (int)1073741910L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_PLUS = 1073741911;
     * }
     */
    public static int SDLK_KP_PLUS() {
        return (int)1073741911L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_ENTER = 1073741912;
     * }
     */
    public static int SDLK_KP_ENTER() {
        return (int)1073741912L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_1 = 1073741913;
     * }
     */
    public static int SDLK_KP_1() {
        return (int)1073741913L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_2 = 1073741914;
     * }
     */
    public static int SDLK_KP_2() {
        return (int)1073741914L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_3 = 1073741915;
     * }
     */
    public static int SDLK_KP_3() {
        return (int)1073741915L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_4 = 1073741916;
     * }
     */
    public static int SDLK_KP_4() {
        return (int)1073741916L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_5 = 1073741917;
     * }
     */
    public static int SDLK_KP_5() {
        return (int)1073741917L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_6 = 1073741918;
     * }
     */
    public static int SDLK_KP_6() {
        return (int)1073741918L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_7 = 1073741919;
     * }
     */
    public static int SDLK_KP_7() {
        return (int)1073741919L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_8 = 1073741920;
     * }
     */
    public static int SDLK_KP_8() {
        return (int)1073741920L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_9 = 1073741921;
     * }
     */
    public static int SDLK_KP_9() {
        return (int)1073741921L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_0 = 1073741922;
     * }
     */
    public static int SDLK_KP_0() {
        return (int)1073741922L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_PERIOD = 1073741923;
     * }
     */
    public static int SDLK_KP_PERIOD() {
        return (int)1073741923L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_APPLICATION = 1073741925;
     * }
     */
    public static int SDLK_APPLICATION() {
        return (int)1073741925L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_POWER = 1073741926;
     * }
     */
    public static int SDLK_POWER() {
        return (int)1073741926L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_EQUALS = 1073741927;
     * }
     */
    public static int SDLK_KP_EQUALS() {
        return (int)1073741927L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F13 = 1073741928;
     * }
     */
    public static int SDLK_F13() {
        return (int)1073741928L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F14 = 1073741929;
     * }
     */
    public static int SDLK_F14() {
        return (int)1073741929L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F15 = 1073741930;
     * }
     */
    public static int SDLK_F15() {
        return (int)1073741930L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F16 = 1073741931;
     * }
     */
    public static int SDLK_F16() {
        return (int)1073741931L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F17 = 1073741932;
     * }
     */
    public static int SDLK_F17() {
        return (int)1073741932L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F18 = 1073741933;
     * }
     */
    public static int SDLK_F18() {
        return (int)1073741933L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F19 = 1073741934;
     * }
     */
    public static int SDLK_F19() {
        return (int)1073741934L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F20 = 1073741935;
     * }
     */
    public static int SDLK_F20() {
        return (int)1073741935L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F21 = 1073741936;
     * }
     */
    public static int SDLK_F21() {
        return (int)1073741936L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F22 = 1073741937;
     * }
     */
    public static int SDLK_F22() {
        return (int)1073741937L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F23 = 1073741938;
     * }
     */
    public static int SDLK_F23() {
        return (int)1073741938L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_F24 = 1073741939;
     * }
     */
    public static int SDLK_F24() {
        return (int)1073741939L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_EXECUTE = 1073741940;
     * }
     */
    public static int SDLK_EXECUTE() {
        return (int)1073741940L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_HELP = 1073741941;
     * }
     */
    public static int SDLK_HELP() {
        return (int)1073741941L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MENU = 1073741942;
     * }
     */
    public static int SDLK_MENU() {
        return (int)1073741942L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SELECT = 1073741943;
     * }
     */
    public static int SDLK_SELECT() {
        return (int)1073741943L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_STOP = 1073741944;
     * }
     */
    public static int SDLK_STOP() {
        return (int)1073741944L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AGAIN = 1073741945;
     * }
     */
    public static int SDLK_AGAIN() {
        return (int)1073741945L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_UNDO = 1073741946;
     * }
     */
    public static int SDLK_UNDO() {
        return (int)1073741946L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CUT = 1073741947;
     * }
     */
    public static int SDLK_CUT() {
        return (int)1073741947L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_COPY = 1073741948;
     * }
     */
    public static int SDLK_COPY() {
        return (int)1073741948L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PASTE = 1073741949;
     * }
     */
    public static int SDLK_PASTE() {
        return (int)1073741949L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_FIND = 1073741950;
     * }
     */
    public static int SDLK_FIND() {
        return (int)1073741950L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MUTE = 1073741951;
     * }
     */
    public static int SDLK_MUTE() {
        return (int)1073741951L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_VOLUMEUP = 1073741952;
     * }
     */
    public static int SDLK_VOLUMEUP() {
        return (int)1073741952L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_VOLUMEDOWN = 1073741953;
     * }
     */
    public static int SDLK_VOLUMEDOWN() {
        return (int)1073741953L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_COMMA = 1073741957;
     * }
     */
    public static int SDLK_KP_COMMA() {
        return (int)1073741957L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_EQUALSAS400 = 1073741958;
     * }
     */
    public static int SDLK_KP_EQUALSAS400() {
        return (int)1073741958L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_ALTERASE = 1073741977;
     * }
     */
    public static int SDLK_ALTERASE() {
        return (int)1073741977L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SYSREQ = 1073741978;
     * }
     */
    public static int SDLK_SYSREQ() {
        return (int)1073741978L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CANCEL = 1073741979;
     * }
     */
    public static int SDLK_CANCEL() {
        return (int)1073741979L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CLEAR = 1073741980;
     * }
     */
    public static int SDLK_CLEAR() {
        return (int)1073741980L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_PRIOR = 1073741981;
     * }
     */
    public static int SDLK_PRIOR() {
        return (int)1073741981L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RETURN2 = 1073741982;
     * }
     */
    public static int SDLK_RETURN2() {
        return (int)1073741982L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SEPARATOR = 1073741983;
     * }
     */
    public static int SDLK_SEPARATOR() {
        return (int)1073741983L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_OUT = 1073741984;
     * }
     */
    public static int SDLK_OUT() {
        return (int)1073741984L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_OPER = 1073741985;
     * }
     */
    public static int SDLK_OPER() {
        return (int)1073741985L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CLEARAGAIN = 1073741986;
     * }
     */
    public static int SDLK_CLEARAGAIN() {
        return (int)1073741986L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CRSEL = 1073741987;
     * }
     */
    public static int SDLK_CRSEL() {
        return (int)1073741987L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_EXSEL = 1073741988;
     * }
     */
    public static int SDLK_EXSEL() {
        return (int)1073741988L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_00 = 1073742000;
     * }
     */
    public static int SDLK_KP_00() {
        return (int)1073742000L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_000 = 1073742001;
     * }
     */
    public static int SDLK_KP_000() {
        return (int)1073742001L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_THOUSANDSSEPARATOR = 1073742002;
     * }
     */
    public static int SDLK_THOUSANDSSEPARATOR() {
        return (int)1073742002L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_DECIMALSEPARATOR = 1073742003;
     * }
     */
    public static int SDLK_DECIMALSEPARATOR() {
        return (int)1073742003L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CURRENCYUNIT = 1073742004;
     * }
     */
    public static int SDLK_CURRENCYUNIT() {
        return (int)1073742004L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CURRENCYSUBUNIT = 1073742005;
     * }
     */
    public static int SDLK_CURRENCYSUBUNIT() {
        return (int)1073742005L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_LEFTPAREN = 1073742006;
     * }
     */
    public static int SDLK_KP_LEFTPAREN() {
        return (int)1073742006L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_RIGHTPAREN = 1073742007;
     * }
     */
    public static int SDLK_KP_RIGHTPAREN() {
        return (int)1073742007L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_LEFTBRACE = 1073742008;
     * }
     */
    public static int SDLK_KP_LEFTBRACE() {
        return (int)1073742008L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_RIGHTBRACE = 1073742009;
     * }
     */
    public static int SDLK_KP_RIGHTBRACE() {
        return (int)1073742009L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_TAB = 1073742010;
     * }
     */
    public static int SDLK_KP_TAB() {
        return (int)1073742010L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_BACKSPACE = 1073742011;
     * }
     */
    public static int SDLK_KP_BACKSPACE() {
        return (int)1073742011L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_A = 1073742012;
     * }
     */
    public static int SDLK_KP_A() {
        return (int)1073742012L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_B = 1073742013;
     * }
     */
    public static int SDLK_KP_B() {
        return (int)1073742013L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_C = 1073742014;
     * }
     */
    public static int SDLK_KP_C() {
        return (int)1073742014L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_D = 1073742015;
     * }
     */
    public static int SDLK_KP_D() {
        return (int)1073742015L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_E = 1073742016;
     * }
     */
    public static int SDLK_KP_E() {
        return (int)1073742016L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_F = 1073742017;
     * }
     */
    public static int SDLK_KP_F() {
        return (int)1073742017L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_XOR = 1073742018;
     * }
     */
    public static int SDLK_KP_XOR() {
        return (int)1073742018L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_POWER = 1073742019;
     * }
     */
    public static int SDLK_KP_POWER() {
        return (int)1073742019L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_PERCENT = 1073742020;
     * }
     */
    public static int SDLK_KP_PERCENT() {
        return (int)1073742020L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_LESS = 1073742021;
     * }
     */
    public static int SDLK_KP_LESS() {
        return (int)1073742021L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_GREATER = 1073742022;
     * }
     */
    public static int SDLK_KP_GREATER() {
        return (int)1073742022L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_AMPERSAND = 1073742023;
     * }
     */
    public static int SDLK_KP_AMPERSAND() {
        return (int)1073742023L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_DBLAMPERSAND = 1073742024;
     * }
     */
    public static int SDLK_KP_DBLAMPERSAND() {
        return (int)1073742024L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_VERTICALBAR = 1073742025;
     * }
     */
    public static int SDLK_KP_VERTICALBAR() {
        return (int)1073742025L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_DBLVERTICALBAR = 1073742026;
     * }
     */
    public static int SDLK_KP_DBLVERTICALBAR() {
        return (int)1073742026L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_COLON = 1073742027;
     * }
     */
    public static int SDLK_KP_COLON() {
        return (int)1073742027L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_HASH = 1073742028;
     * }
     */
    public static int SDLK_KP_HASH() {
        return (int)1073742028L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_SPACE = 1073742029;
     * }
     */
    public static int SDLK_KP_SPACE() {
        return (int)1073742029L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_AT = 1073742030;
     * }
     */
    public static int SDLK_KP_AT() {
        return (int)1073742030L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_EXCLAM = 1073742031;
     * }
     */
    public static int SDLK_KP_EXCLAM() {
        return (int)1073742031L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMSTORE = 1073742032;
     * }
     */
    public static int SDLK_KP_MEMSTORE() {
        return (int)1073742032L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMRECALL = 1073742033;
     * }
     */
    public static int SDLK_KP_MEMRECALL() {
        return (int)1073742033L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMCLEAR = 1073742034;
     * }
     */
    public static int SDLK_KP_MEMCLEAR() {
        return (int)1073742034L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMADD = 1073742035;
     * }
     */
    public static int SDLK_KP_MEMADD() {
        return (int)1073742035L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMSUBTRACT = 1073742036;
     * }
     */
    public static int SDLK_KP_MEMSUBTRACT() {
        return (int)1073742036L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMMULTIPLY = 1073742037;
     * }
     */
    public static int SDLK_KP_MEMMULTIPLY() {
        return (int)1073742037L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_MEMDIVIDE = 1073742038;
     * }
     */
    public static int SDLK_KP_MEMDIVIDE() {
        return (int)1073742038L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_PLUSMINUS = 1073742039;
     * }
     */
    public static int SDLK_KP_PLUSMINUS() {
        return (int)1073742039L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_CLEAR = 1073742040;
     * }
     */
    public static int SDLK_KP_CLEAR() {
        return (int)1073742040L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_CLEARENTRY = 1073742041;
     * }
     */
    public static int SDLK_KP_CLEARENTRY() {
        return (int)1073742041L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_BINARY = 1073742042;
     * }
     */
    public static int SDLK_KP_BINARY() {
        return (int)1073742042L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_OCTAL = 1073742043;
     * }
     */
    public static int SDLK_KP_OCTAL() {
        return (int)1073742043L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_DECIMAL = 1073742044;
     * }
     */
    public static int SDLK_KP_DECIMAL() {
        return (int)1073742044L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KP_HEXADECIMAL = 1073742045;
     * }
     */
    public static int SDLK_KP_HEXADECIMAL() {
        return (int)1073742045L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LCTRL = 1073742048;
     * }
     */
    public static int SDLK_LCTRL() {
        return (int)1073742048L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LSHIFT = 1073742049;
     * }
     */
    public static int SDLK_LSHIFT() {
        return (int)1073742049L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LALT = 1073742050;
     * }
     */
    public static int SDLK_LALT() {
        return (int)1073742050L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_LGUI = 1073742051;
     * }
     */
    public static int SDLK_LGUI() {
        return (int)1073742051L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RCTRL = 1073742052;
     * }
     */
    public static int SDLK_RCTRL() {
        return (int)1073742052L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RSHIFT = 1073742053;
     * }
     */
    public static int SDLK_RSHIFT() {
        return (int)1073742053L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RALT = 1073742054;
     * }
     */
    public static int SDLK_RALT() {
        return (int)1073742054L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_RGUI = 1073742055;
     * }
     */
    public static int SDLK_RGUI() {
        return (int)1073742055L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MODE = 1073742081;
     * }
     */
    public static int SDLK_MODE() {
        return (int)1073742081L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIONEXT = 1073742082;
     * }
     */
    public static int SDLK_AUDIONEXT() {
        return (int)1073742082L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOPREV = 1073742083;
     * }
     */
    public static int SDLK_AUDIOPREV() {
        return (int)1073742083L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOSTOP = 1073742084;
     * }
     */
    public static int SDLK_AUDIOSTOP() {
        return (int)1073742084L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOPLAY = 1073742085;
     * }
     */
    public static int SDLK_AUDIOPLAY() {
        return (int)1073742085L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOMUTE = 1073742086;
     * }
     */
    public static int SDLK_AUDIOMUTE() {
        return (int)1073742086L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MEDIASELECT = 1073742087;
     * }
     */
    public static int SDLK_MEDIASELECT() {
        return (int)1073742087L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_WWW = 1073742088;
     * }
     */
    public static int SDLK_WWW() {
        return (int)1073742088L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_MAIL = 1073742089;
     * }
     */
    public static int SDLK_MAIL() {
        return (int)1073742089L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CALCULATOR = 1073742090;
     * }
     */
    public static int SDLK_CALCULATOR() {
        return (int)1073742090L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_COMPUTER = 1073742091;
     * }
     */
    public static int SDLK_COMPUTER() {
        return (int)1073742091L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_SEARCH = 1073742092;
     * }
     */
    public static int SDLK_AC_SEARCH() {
        return (int)1073742092L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_HOME = 1073742093;
     * }
     */
    public static int SDLK_AC_HOME() {
        return (int)1073742093L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_BACK = 1073742094;
     * }
     */
    public static int SDLK_AC_BACK() {
        return (int)1073742094L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_FORWARD = 1073742095;
     * }
     */
    public static int SDLK_AC_FORWARD() {
        return (int)1073742095L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_STOP = 1073742096;
     * }
     */
    public static int SDLK_AC_STOP() {
        return (int)1073742096L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_REFRESH = 1073742097;
     * }
     */
    public static int SDLK_AC_REFRESH() {
        return (int)1073742097L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AC_BOOKMARKS = 1073742098;
     * }
     */
    public static int SDLK_AC_BOOKMARKS() {
        return (int)1073742098L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_BRIGHTNESSDOWN = 1073742099;
     * }
     */
    public static int SDLK_BRIGHTNESSDOWN() {
        return (int)1073742099L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_BRIGHTNESSUP = 1073742100;
     * }
     */
    public static int SDLK_BRIGHTNESSUP() {
        return (int)1073742100L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_DISPLAYSWITCH = 1073742101;
     * }
     */
    public static int SDLK_DISPLAYSWITCH() {
        return (int)1073742101L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KBDILLUMTOGGLE = 1073742102;
     * }
     */
    public static int SDLK_KBDILLUMTOGGLE() {
        return (int)1073742102L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KBDILLUMDOWN = 1073742103;
     * }
     */
    public static int SDLK_KBDILLUMDOWN() {
        return (int)1073742103L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_KBDILLUMUP = 1073742104;
     * }
     */
    public static int SDLK_KBDILLUMUP() {
        return (int)1073742104L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_EJECT = 1073742105;
     * }
     */
    public static int SDLK_EJECT() {
        return (int)1073742105L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SLEEP = 1073742106;
     * }
     */
    public static int SDLK_SLEEP() {
        return (int)1073742106L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_APP1 = 1073742107;
     * }
     */
    public static int SDLK_APP1() {
        return (int)1073742107L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_APP2 = 1073742108;
     * }
     */
    public static int SDLK_APP2() {
        return (int)1073742108L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOREWIND = 1073742109;
     * }
     */
    public static int SDLK_AUDIOREWIND() {
        return (int)1073742109L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_AUDIOFASTFORWARD = 1073742110;
     * }
     */
    public static int SDLK_AUDIOFASTFORWARD() {
        return (int)1073742110L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SOFTLEFT = 1073742111;
     * }
     */
    public static int SDLK_SOFTLEFT() {
        return (int)1073742111L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_SOFTRIGHT = 1073742112;
     * }
     */
    public static int SDLK_SOFTRIGHT() {
        return (int)1073742112L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_CALL = 1073742113;
     * }
     */
    public static int SDLK_CALL() {
        return (int)1073742113L;
    }
    /**
     * {@snippet :
     * enum SDL_KeyCode.SDLK_ENDCALL = 1073742114;
     * }
     */
    public static int SDLK_ENDCALL() {
        return (int)1073742114L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_NONE = 0;
     * }
     */
    public static int KMOD_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_LSHIFT = 1;
     * }
     */
    public static int KMOD_LSHIFT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_RSHIFT = 2;
     * }
     */
    public static int KMOD_RSHIFT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_LCTRL = 64;
     * }
     */
    public static int KMOD_LCTRL() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_RCTRL = 128;
     * }
     */
    public static int KMOD_RCTRL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_LALT = 256;
     * }
     */
    public static int KMOD_LALT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_RALT = 512;
     * }
     */
    public static int KMOD_RALT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_LGUI = 1024;
     * }
     */
    public static int KMOD_LGUI() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_RGUI = 2048;
     * }
     */
    public static int KMOD_RGUI() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_NUM = 4096;
     * }
     */
    public static int KMOD_NUM() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_CAPS = 8192;
     * }
     */
    public static int KMOD_CAPS() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_MODE = 16384;
     * }
     */
    public static int KMOD_MODE() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_SCROLL = 32768;
     * }
     */
    public static int KMOD_SCROLL() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_CTRL = 192;
     * }
     */
    public static int KMOD_CTRL() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_SHIFT = 3;
     * }
     */
    public static int KMOD_SHIFT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_ALT = 768;
     * }
     */
    public static int KMOD_ALT() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_GUI = 3072;
     * }
     */
    public static int KMOD_GUI() {
        return (int)3072L;
    }
    /**
     * {@snippet :
     * enum SDL_Keymod.KMOD_RESERVED = 32768;
     * }
     */
    public static int KMOD_RESERVED() {
        return (int)32768L;
    }
    public static MethodHandle SDL_GetKeyboardFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"SDL_GetKeyboardFocus");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_GetKeyboardFocus();
     * }
     */
    public static MemorySegment SDL_GetKeyboardFocus() {
        var mh$ = SDL_GetKeyboardFocus$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"SDL_GetKeyboardState");
    }
    /**
     * {@snippet :
     * unsigned char* SDL_GetKeyboardState(int* numkeys);
     * }
     */
    public static MemorySegment SDL_GetKeyboardState(MemorySegment numkeys) {
        var mh$ = SDL_GetKeyboardState$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(numkeys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetKeyboard$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"SDL_ResetKeyboard");
    }
    /**
     * {@snippet :
     * void SDL_ResetKeyboard();
     * }
     */
    public static void SDL_ResetKeyboard() {
        var mh$ = SDL_ResetKeyboard$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetModState$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"SDL_GetModState");
    }
    /**
     * {@snippet :
     * enum SDL_Keymod SDL_GetModState();
     * }
     */
    public static int SDL_GetModState() {
        var mh$ = SDL_GetModState$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetModState$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"SDL_SetModState");
    }
    /**
     * {@snippet :
     * void SDL_SetModState(enum SDL_Keymod modstate);
     * }
     */
    public static void SDL_SetModState(int modstate) {
        var mh$ = SDL_SetModState$MH();
        try {
            mh$.invokeExact(modstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyFromScancode$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"SDL_GetKeyFromScancode");
    }
    /**
     * {@snippet :
     * int SDL_GetKeyFromScancode(enum SDL_Scancode scancode);
     * }
     */
    public static int SDL_GetKeyFromScancode(int scancode) {
        var mh$ = SDL_GetKeyFromScancode$MH();
        try {
            return (int)mh$.invokeExact(scancode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeFromKey$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"SDL_GetScancodeFromKey");
    }
    /**
     * {@snippet :
     * enum SDL_Scancode SDL_GetScancodeFromKey(int key);
     * }
     */
    public static int SDL_GetScancodeFromKey(int key) {
        var mh$ = SDL_GetScancodeFromKey$MH();
        try {
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeName$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"SDL_GetScancodeName");
    }
    /**
     * {@snippet :
     * char* SDL_GetScancodeName(enum SDL_Scancode scancode);
     * }
     */
    public static MemorySegment SDL_GetScancodeName(int scancode) {
        var mh$ = SDL_GetScancodeName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scancode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetScancodeFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"SDL_GetScancodeFromName");
    }
    /**
     * {@snippet :
     * enum SDL_Scancode SDL_GetScancodeFromName(char* name);
     * }
     */
    public static int SDL_GetScancodeFromName(MemorySegment name) {
        var mh$ = SDL_GetScancodeFromName$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyName$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$5,"SDL_GetKeyName");
    }
    /**
     * {@snippet :
     * char* SDL_GetKeyName(int key);
     * }
     */
    public static MemorySegment SDL_GetKeyName(int key) {
        var mh$ = SDL_GetKeyName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetKeyFromName$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"SDL_GetKeyFromName");
    }
    /**
     * {@snippet :
     * int SDL_GetKeyFromName(char* name);
     * }
     */
    public static int SDL_GetKeyFromName(MemorySegment name) {
        var mh$ = SDL_GetKeyFromName$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_StartTextInput$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$1,"SDL_StartTextInput");
    }
    /**
     * {@snippet :
     * void SDL_StartTextInput();
     * }
     */
    public static void SDL_StartTextInput() {
        var mh$ = SDL_StartTextInput$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsTextInputActive$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"SDL_IsTextInputActive");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IsTextInputActive();
     * }
     */
    public static int SDL_IsTextInputActive() {
        var mh$ = SDL_IsTextInputActive$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_StopTextInput$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$3,"SDL_StopTextInput");
    }
    /**
     * {@snippet :
     * void SDL_StopTextInput();
     * }
     */
    public static void SDL_StopTextInput() {
        var mh$ = SDL_StopTextInput$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


