// Generated by jextract

package sdl.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct SDL_KeyboardEvent {
 *     unsigned int type;
 *     unsigned int timestamp;
 *     unsigned int windowID;
 *     unsigned char state;
 *     unsigned char repeat;
 *     unsigned char padding2;
 *     unsigned char padding3;
 *     struct SDL_Keysym keysym;
 * };
 * }
 */
public class SDL_KeyboardEvent {

    public static MemoryLayout $LAYOUT() {
        return constants$125.const$3;
    }
    public static VarHandle type$VH() {
        return constants$125.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$125.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$125.const$4.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$125.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$125.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle timestamp$VH() {
        return constants$125.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int timestamp;
     * }
     */
    public static int timestamp$get(MemorySegment seg) {
        return (int)constants$125.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, int x) {
        constants$125.const$5.set(seg, x);
    }
    public static int timestamp$get(MemorySegment seg, long index) {
        return (int)constants$125.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, int x) {
        constants$125.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle windowID$VH() {
        return constants$126.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int windowID;
     * }
     */
    public static int windowID$get(MemorySegment seg) {
        return (int)constants$126.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int windowID;
     * }
     */
    public static void windowID$set(MemorySegment seg, int x) {
        constants$126.const$0.set(seg, x);
    }
    public static int windowID$get(MemorySegment seg, long index) {
        return (int)constants$126.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void windowID$set(MemorySegment seg, long index, int x) {
        constants$126.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle state$VH() {
        return constants$126.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char state;
     * }
     */
    public static byte state$get(MemorySegment seg) {
        return (byte)constants$126.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char state;
     * }
     */
    public static void state$set(MemorySegment seg, byte x) {
        constants$126.const$1.set(seg, x);
    }
    public static byte state$get(MemorySegment seg, long index) {
        return (byte)constants$126.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, byte x) {
        constants$126.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle repeat$VH() {
        return constants$126.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char repeat;
     * }
     */
    public static byte repeat$get(MemorySegment seg) {
        return (byte)constants$126.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char repeat;
     * }
     */
    public static void repeat$set(MemorySegment seg, byte x) {
        constants$126.const$2.set(seg, x);
    }
    public static byte repeat$get(MemorySegment seg, long index) {
        return (byte)constants$126.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void repeat$set(MemorySegment seg, long index, byte x) {
        constants$126.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle padding2$VH() {
        return constants$126.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char padding2;
     * }
     */
    public static byte padding2$get(MemorySegment seg) {
        return (byte)constants$126.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char padding2;
     * }
     */
    public static void padding2$set(MemorySegment seg, byte x) {
        constants$126.const$3.set(seg, x);
    }
    public static byte padding2$get(MemorySegment seg, long index) {
        return (byte)constants$126.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void padding2$set(MemorySegment seg, long index, byte x) {
        constants$126.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle padding3$VH() {
        return constants$126.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char padding3;
     * }
     */
    public static byte padding3$get(MemorySegment seg) {
        return (byte)constants$126.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char padding3;
     * }
     */
    public static void padding3$set(MemorySegment seg, byte x) {
        constants$126.const$4.set(seg, x);
    }
    public static byte padding3$get(MemorySegment seg, long index) {
        return (byte)constants$126.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void padding3$set(MemorySegment seg, long index, byte x) {
        constants$126.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct SDL_Keysym {
     *     enum SDL_Scancode scancode;
     *     int sym;
     *     unsigned short mod;
     *     unsigned int unused;
     * };
     * }
     */
    public static final class SDL_Keysym {

        // Suppresses default constructor, ensuring non-instantiability.
        private SDL_Keysym() {}
        public static MemoryLayout $LAYOUT() {
            return constants$126.const$5;
        }
        public static VarHandle scancode$VH() {
            return constants$127.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * enum SDL_Scancode scancode;
         * }
         */
        public static int scancode$get(MemorySegment seg) {
            return (int)constants$127.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * enum SDL_Scancode scancode;
         * }
         */
        public static void scancode$set(MemorySegment seg, int x) {
            constants$127.const$0.set(seg, x);
        }
        public static int scancode$get(MemorySegment seg, long index) {
            return (int)constants$127.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void scancode$set(MemorySegment seg, long index, int x) {
            constants$127.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle sym$VH() {
            return constants$127.const$1;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int sym;
         * }
         */
        public static int sym$get(MemorySegment seg) {
            return (int)constants$127.const$1.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int sym;
         * }
         */
        public static void sym$set(MemorySegment seg, int x) {
            constants$127.const$1.set(seg, x);
        }
        public static int sym$get(MemorySegment seg, long index) {
            return (int)constants$127.const$1.get(seg.asSlice(index*sizeof()));
        }
        public static void sym$set(MemorySegment seg, long index, int x) {
            constants$127.const$1.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle mod$VH() {
            return constants$127.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * unsigned short mod;
         * }
         */
        public static short mod$get(MemorySegment seg) {
            return (short)constants$127.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * unsigned short mod;
         * }
         */
        public static void mod$set(MemorySegment seg, short x) {
            constants$127.const$2.set(seg, x);
        }
        public static short mod$get(MemorySegment seg, long index) {
            return (short)constants$127.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void mod$set(MemorySegment seg, long index, short x) {
            constants$127.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle unused$VH() {
            return constants$127.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * unsigned int unused;
         * }
         */
        public static int unused$get(MemorySegment seg) {
            return (int)constants$127.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * unsigned int unused;
         * }
         */
        public static void unused$set(MemorySegment seg, int x) {
            constants$127.const$3.set(seg, x);
        }
        public static int unused$get(MemorySegment seg, long index) {
            return (int)constants$127.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void unused$set(MemorySegment seg, long index, int x) {
            constants$127.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment keysym$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


