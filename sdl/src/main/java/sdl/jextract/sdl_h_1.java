// Generated by jextract

package sdl.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class sdl_h_1 {

    public static MethodHandle SDL_GUIDToString$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"SDL_GUIDToString");
    }
    /**
     * {@snippet :
     * void SDL_GUIDToString(struct SDL_GUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_GUIDToString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_GUIDToString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"SDL_GUIDFromString");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_GUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_GUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_GUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_JoystickID;
     * }
     */
    public static final OfInt SDL_JoystickID = JAVA_INT;
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GAMECONTROLLER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_WHEEL = 2;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_WHEEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_STICK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_FLIGHT_STICK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DANCE_PAD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_GUITAR = 6;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GUITAR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DRUM_KIT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_PAD() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_THROTTLE = 9;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_THROTTLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_UNKNOWN = -1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_EMPTY = 0;
     * }
     */
    public static int SDL_JOYSTICK_POWER_EMPTY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_LOW = 1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_LOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MEDIUM = 2;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MEDIUM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_FULL = 3;
     * }
     */
    public static int SDL_JOYSTICK_POWER_FULL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_WIRED = 4;
     * }
     */
    public static int SDL_JOYSTICK_POWER_WIRED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MAX = 5;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MAX() {
        return (int)5L;
    }
    public static MethodHandle SDL_LockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"SDL_LockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_LockJoysticks();
     * }
     */
    public static void SDL_LockJoysticks() {
        var mh$ = SDL_LockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"SDL_UnlockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_UnlockJoysticks();
     * }
     */
    public static void SDL_UnlockJoysticks() {
        var mh$ = SDL_UnlockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"SDL_NumJoysticks");
    }
    /**
     * {@snippet :
     * int SDL_NumJoysticks();
     * }
     */
    public static int SDL_NumJoysticks() {
        var mh$ = SDL_NumJoysticks$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"SDL_JoystickNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickNameForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickNameForIndex(int device_index) {
        var mh$ = SDL_JoystickNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$0,"SDL_JoystickPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPathForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickPathForIndex(int device_index) {
        var mh$ = SDL_JoystickPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDevicePlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$1,"SDL_JoystickGetDevicePlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetDevicePlayerIndex(int device_index);
     * }
     */
    public static int SDL_JoystickGetDevicePlayerIndex(int device_index) {
        var mh$ = SDL_JoystickGetDevicePlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$3,"SDL_JoystickGetDeviceGUID");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetDeviceGUID(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickGetDeviceGUID(SegmentAllocator allocator, int device_index) {
        var mh$ = SDL_JoystickGetDeviceGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$5,"SDL_JoystickGetDeviceVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceVendor(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceVendor(int device_index) {
        var mh$ = SDL_JoystickGetDeviceVendor$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$0,"SDL_JoystickGetDeviceProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceProduct(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProduct(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProduct$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$1,"SDL_JoystickGetDeviceProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceProductVersion(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProductVersion(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProductVersion$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$2,"SDL_JoystickGetDeviceType");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceType(int device_index) {
        var mh$ = SDL_JoystickGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$3,"SDL_JoystickGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_JoystickGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$4,"SDL_JoystickOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickOpen(int device_index) {
        var mh$ = SDL_JoystickOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$84.const$5,"SDL_JoystickFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickFromInstanceID(int instance_id);
     * }
     */
    public static MemorySegment SDL_JoystickFromInstanceID(int instance_id) {
        var mh$ = SDL_JoystickFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$0,"SDL_JoystickFromPlayerIndex");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_JoystickFromPlayerIndex(int player_index) {
        var mh$ = SDL_JoystickFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$2,"SDL_JoystickAttachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtual(enum SDL_JoystickType type, int naxes, int nbuttons, int nhats);
     * }
     */
    public static int SDL_JoystickAttachVirtual(int type, int naxes, int nbuttons, int nhats) {
        var mh$ = SDL_JoystickAttachVirtual$MH();
        try {
            return (int)mh$.invokeExact(type, naxes, nbuttons, nhats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtualEx$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$4,"SDL_JoystickAttachVirtualEx");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtualEx(struct SDL_VirtualJoystickDesc* desc);
     * }
     */
    public static int SDL_JoystickAttachVirtualEx(MemorySegment desc) {
        var mh$ = SDL_JoystickAttachVirtualEx$MH();
        try {
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickDetachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"SDL_JoystickDetachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickDetachVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickDetachVirtual(int device_index) {
        var mh$ = SDL_JoystickDetachVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickIsVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$0,"SDL_JoystickIsVirtual");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickIsVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickIsVirtual(int device_index) {
        var mh$ = SDL_JoystickIsVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$2,"SDL_JoystickSetVirtualAxis");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualAxis(struct _SDL_Joystick* joystick, int axis, short value);
     * }
     */
    public static int SDL_JoystickSetVirtualAxis(MemorySegment joystick, int axis, short value) {
        var mh$ = SDL_JoystickSetVirtualAxis$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualButton$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"SDL_JoystickSetVirtualButton");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualButton(struct _SDL_Joystick* joystick, int button, unsigned char value);
     * }
     */
    public static int SDL_JoystickSetVirtualButton(MemorySegment joystick, int button, byte value) {
        var mh$ = SDL_JoystickSetVirtualButton$MH();
        try {
            return (int)mh$.invokeExact(joystick, button, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualHat$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$5,"SDL_JoystickSetVirtualHat");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualHat(struct _SDL_Joystick* joystick, int hat, unsigned char value);
     * }
     */
    public static int SDL_JoystickSetVirtualHat(MemorySegment joystick, int hat, byte value) {
        var mh$ = SDL_JoystickSetVirtualHat$MH();
        try {
            return (int)mh$.invokeExact(joystick, hat, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickName$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"SDL_JoystickName");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickName(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickName(MemorySegment joystick) {
        var mh$ = SDL_JoystickName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPath$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"SDL_JoystickPath");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPath(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickPath(MemorySegment joystick) {
        var mh$ = SDL_JoystickPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$2,"SDL_JoystickGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetPlayerIndex(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetPlayerIndex(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"SDL_JoystickSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_JoystickSetPlayerIndex(struct _SDL_Joystick* joystick, int player_index);
     * }
     */
    public static void SDL_JoystickSetPlayerIndex(MemorySegment joystick, int player_index) {
        var mh$ = SDL_JoystickSetPlayerIndex$MH();
        try {
            mh$.invokeExact(joystick, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"SDL_JoystickGetGUID");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetGUID(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUID(SegmentAllocator allocator, MemorySegment joystick) {
        var mh$ = SDL_JoystickGetGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$5,"SDL_JoystickGetVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetVendor(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetVendor(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetVendor$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$0,"SDL_JoystickGetProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetProduct(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProduct(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProduct$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"SDL_JoystickGetProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetProductVersion(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProductVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$2,"SDL_JoystickGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetFirmwareVersion(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetFirmwareVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$3,"SDL_JoystickGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickGetSerial(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetSerial(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$4,"SDL_JoystickGetType");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType SDL_JoystickGetType(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetType(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetType$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDString$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"SDL_JoystickGetGUIDString");
    }
    /**
     * {@snippet :
     * void SDL_JoystickGetGUIDString(struct SDL_GUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_JoystickGetGUIDString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_JoystickGetGUIDString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$0,"SDL_JoystickGetGUIDFromString");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetGUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_JoystickGetGUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetJoystickGUIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$2,"SDL_GetJoystickGUIDInfo");
    }
    /**
     * {@snippet :
     * void SDL_GetJoystickGUIDInfo(struct SDL_GUID guid, unsigned short* vendor, unsigned short* product, unsigned short* version, unsigned short* crc16);
     * }
     */
    public static void SDL_GetJoystickGUIDInfo(MemorySegment guid, MemorySegment vendor, MemorySegment product, MemorySegment version, MemorySegment crc16) {
        var mh$ = SDL_GetJoystickGUIDInfo$MH();
        try {
            mh$.invokeExact(guid, vendor, product, version, crc16);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$3,"SDL_JoystickGetAttached");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickGetAttached(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetAttached(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetAttached$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$4,"SDL_JoystickInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_JoystickInstanceID(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickInstanceID(MemorySegment joystick) {
        var mh$ = SDL_JoystickInstanceID$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumAxes$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$5,"SDL_JoystickNumAxes");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumAxes(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumAxes(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumAxes$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumBalls$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$0,"SDL_JoystickNumBalls");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumBalls(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumBalls(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumBalls$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumHats$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$1,"SDL_JoystickNumHats");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumHats(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumHats(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumHats$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$2,"SDL_JoystickNumButtons");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumButtons(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumButtons(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumButtons$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$3,"SDL_JoystickUpdate");
    }
    /**
     * {@snippet :
     * void SDL_JoystickUpdate();
     * }
     */
    public static void SDL_JoystickUpdate() {
        var mh$ = SDL_JoystickUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$4,"SDL_JoystickEventState");
    }
    /**
     * {@snippet :
     * int SDL_JoystickEventState(int state);
     * }
     */
    public static int SDL_JoystickEventState(int state) {
        var mh$ = SDL_JoystickEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$6,"SDL_JoystickGetAxis");
    }
    /**
     * {@snippet :
     * short SDL_JoystickGetAxis(struct _SDL_Joystick* joystick, int axis);
     * }
     */
    public static short SDL_JoystickGetAxis(MemorySegment joystick, int axis) {
        var mh$ = SDL_JoystickGetAxis$MH();
        try {
            return (short)mh$.invokeExact(joystick, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxisInitialState$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$1,"SDL_JoystickGetAxisInitialState");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickGetAxisInitialState(struct _SDL_Joystick* joystick, int axis, short* state);
     * }
     */
    public static int SDL_JoystickGetAxisInitialState(MemorySegment joystick, int axis, MemorySegment state) {
        var mh$ = SDL_JoystickGetAxisInitialState$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetHat$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$3,"SDL_JoystickGetHat");
    }
    /**
     * {@snippet :
     * unsigned char SDL_JoystickGetHat(struct _SDL_Joystick* joystick, int hat);
     * }
     */
    public static byte SDL_JoystickGetHat(MemorySegment joystick, int hat) {
        var mh$ = SDL_JoystickGetHat$MH();
        try {
            return (byte)mh$.invokeExact(joystick, hat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetBall$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"SDL_JoystickGetBall");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetBall(struct _SDL_Joystick* joystick, int ball, int* dx, int* dy);
     * }
     */
    public static int SDL_JoystickGetBall(MemorySegment joystick, int ball, MemorySegment dx, MemorySegment dy) {
        var mh$ = SDL_JoystickGetBall$MH();
        try {
            return (int)mh$.invokeExact(joystick, ball, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$5,"SDL_JoystickGetButton");
    }
    /**
     * {@snippet :
     * unsigned char SDL_JoystickGetButton(struct _SDL_Joystick* joystick, int button);
     * }
     */
    public static byte SDL_JoystickGetButton(MemorySegment joystick, int button) {
        var mh$ = SDL_JoystickGetButton$MH();
        try {
            return (byte)mh$.invokeExact(joystick, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$1,"SDL_JoystickRumble");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumble(struct _SDL_Joystick* joystick, unsigned short low_frequency_rumble, unsigned short high_frequency_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_JoystickRumble(MemorySegment joystick, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$2,"SDL_JoystickRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumbleTriggers(struct _SDL_Joystick* joystick, unsigned short left_rumble, unsigned short right_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_JoystickRumbleTriggers(MemorySegment joystick, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$3,"SDL_JoystickHasLED");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasLED(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasLED(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasLED$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$4,"SDL_JoystickHasRumble");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasRumble(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumble(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$5,"SDL_JoystickHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasRumbleTriggers(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumbleTriggers(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$0,"SDL_JoystickSetLED");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetLED(struct _SDL_Joystick* joystick, unsigned char red, unsigned char green, unsigned char blue);
     * }
     */
    public static int SDL_JoystickSetLED(MemorySegment joystick, byte red, byte green, byte blue) {
        var mh$ = SDL_JoystickSetLED$MH();
        try {
            return (int)mh$.invokeExact(joystick, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"SDL_JoystickSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSendEffect(struct _SDL_Joystick* joystick, void* data, int size);
     * }
     */
    public static int SDL_JoystickSendEffect(MemorySegment joystick, MemorySegment data, int size) {
        var mh$ = SDL_JoystickSendEffect$MH();
        try {
            return (int)mh$.invokeExact(joystick, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickClose$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$2,"SDL_JoystickClose");
    }
    /**
     * {@snippet :
     * void SDL_JoystickClose(struct _SDL_Joystick* joystick);
     * }
     */
    public static void SDL_JoystickClose(MemorySegment joystick) {
        var mh$ = SDL_JoystickClose$MH();
        try {
            mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickCurrentPowerLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"SDL_JoystickCurrentPowerLevel");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickCurrentPowerLevel(MemorySegment joystick) {
        var mh$ = SDL_JoystickCurrentPowerLevel$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_SensorID;
     * }
     */
    public static final OfInt SDL_SensorID = JAVA_INT;
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_INVALID = -1;
     * }
     */
    public static int SDL_SENSOR_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_UNKNOWN = 0;
     * }
     */
    public static int SDL_SENSOR_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL = 1;
     * }
     */
    public static int SDL_SENSOR_ACCEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO = 2;
     * }
     */
    public static int SDL_SENSOR_GYRO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL_L = 3;
     * }
     */
    public static int SDL_SENSOR_ACCEL_L() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO_L = 4;
     * }
     */
    public static int SDL_SENSOR_GYRO_L() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL_R = 5;
     * }
     */
    public static int SDL_SENSOR_ACCEL_R() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO_R = 6;
     * }
     */
    public static int SDL_SENSOR_GYRO_R() {
        return (int)6L;
    }
    public static MethodHandle SDL_LockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"SDL_LockSensors");
    }
    /**
     * {@snippet :
     * void SDL_LockSensors();
     * }
     */
    public static void SDL_LockSensors() {
        var mh$ = SDL_LockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$5,"SDL_UnlockSensors");
    }
    /**
     * {@snippet :
     * void SDL_UnlockSensors();
     * }
     */
    public static void SDL_UnlockSensors() {
        var mh$ = SDL_UnlockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$0,"SDL_NumSensors");
    }
    /**
     * {@snippet :
     * int SDL_NumSensors();
     * }
     */
    public static int SDL_NumSensors() {
        var mh$ = SDL_NumSensors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceName$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$1,"SDL_SensorGetDeviceName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetDeviceName(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorGetDeviceName(int device_index) {
        var mh$ = SDL_SensorGetDeviceName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$2,"SDL_SensorGetDeviceType");
    }
    /**
     * {@snippet :
     * enum SDL_SensorType SDL_SensorGetDeviceType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceType(int device_index) {
        var mh$ = SDL_SensorGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$3,"SDL_SensorGetDeviceNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDeviceNonPortableType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceNonPortableType(int device_index) {
        var mh$ = SDL_SensorGetDeviceNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$4,"SDL_SensorGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_SensorGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$5,"SDL_SensorOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_Sensor* SDL_SensorOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorOpen(int device_index) {
        var mh$ = SDL_SensorOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$0,"SDL_SensorFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_Sensor* SDL_SensorFromInstanceID(int instance_id);
     * }
     */
    public static MemorySegment SDL_SensorFromInstanceID(int instance_id) {
        var mh$ = SDL_SensorFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$1,"SDL_SensorGetName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetName(struct _SDL_Sensor* sensor);
     * }
     */
    public static MemorySegment SDL_SensorGetName(MemorySegment sensor) {
        var mh$ = SDL_SensorGetName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$2,"SDL_SensorGetType");
    }
    /**
     * {@snippet :
     * enum SDL_SensorType SDL_SensorGetType(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$3,"SDL_SensorGetNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetNonPortableType(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetNonPortableType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$4,"SDL_SensorGetInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetInstanceID(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetInstanceID(MemorySegment sensor) {
        var mh$ = SDL_SensorGetInstanceID$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$5,"SDL_SensorGetData");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetData(struct _SDL_Sensor* sensor, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetData(MemorySegment sensor, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetData$MH();
        try {
            return (int)mh$.invokeExact(sensor, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"SDL_SensorGetDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDataWithTimestamp(struct _SDL_Sensor* sensor, unsigned long long* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetDataWithTimestamp(MemorySegment sensor, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(sensor, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorClose$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$2,"SDL_SensorClose");
    }
    /**
     * {@snippet :
     * void SDL_SensorClose(struct _SDL_Sensor* sensor);
     * }
     */
    public static void SDL_SensorClose(MemorySegment sensor) {
        var mh$ = SDL_SensorClose$MH();
        try {
            mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"SDL_SensorUpdate");
    }
    /**
     * {@snippet :
     * void SDL_SensorUpdate();
     * }
     */
    public static void SDL_SensorUpdate() {
        var mh$ = SDL_SensorUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOX360 = 1;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOX360() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOXONE = 2;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOXONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS3 = 3;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS4 = 4;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS4() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_VIRTUAL = 6;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_VIRTUAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS5 = 7;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS5() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_AMAZON_LUNA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_GOOGLE_STADIA() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = 10;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NVIDIA_SHIELD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 11;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 12;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 13;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE = 0;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_BUTTON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS = 2;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_AXIS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT = 3;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_HAT() {
        return (int)3L;
    }
    public static MethodHandle SDL_GameControllerAddMappingsFromRW$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"SDL_GameControllerAddMappingsFromRW");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMappingsFromRW(struct SDL_RWops* rw, int freerw);
     * }
     */
    public static int SDL_GameControllerAddMappingsFromRW(MemorySegment rw, int freerw) {
        var mh$ = SDL_GameControllerAddMappingsFromRW$MH();
        try {
            return (int)mh$.invokeExact(rw, freerw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerAddMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"SDL_GameControllerAddMapping");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMapping(char* mappingString);
     * }
     */
    public static int SDL_GameControllerAddMapping(MemorySegment mappingString) {
        var mh$ = SDL_GameControllerAddMapping$MH();
        try {
            return (int)mh$.invokeExact(mappingString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNumMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$2,"SDL_GameControllerNumMappings");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerNumMappings();
     * }
     */
    public static int SDL_GameControllerNumMappings() {
        var mh$ = SDL_GameControllerNumMappings$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"SDL_GameControllerMappingForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForIndex(int mapping_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForIndex(int mapping_index) {
        var mh$ = SDL_GameControllerMappingForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mapping_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"SDL_GameControllerMappingForGUID");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForGUID(struct SDL_GUID guid);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForGUID(MemorySegment guid) {
        var mh$ = SDL_GameControllerMappingForGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"SDL_GameControllerMapping");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMapping(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerMapping(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerMapping$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsGameController$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"SDL_IsGameController");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IsGameController(int joystick_index);
     * }
     */
    public static int SDL_IsGameController(int joystick_index) {
        var mh$ = SDL_IsGameController$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"SDL_GameControllerNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerNameForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerNameForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"SDL_GameControllerPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPathForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerPathForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerTypeForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"SDL_GameControllerTypeForIndex");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);
     * }
     */
    public static int SDL_GameControllerTypeForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerTypeForIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForDeviceIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"SDL_GameControllerMappingForDeviceIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForDeviceIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForDeviceIndex(int joystick_index) {
        var mh$ = SDL_GameControllerMappingForDeviceIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$0,"SDL_GameControllerOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerOpen(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerOpen(int joystick_index) {
        var mh$ = SDL_GameControllerOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"SDL_GameControllerFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerFromInstanceID(int joyid);
     * }
     */
    public static MemorySegment SDL_GameControllerFromInstanceID(int joyid) {
        var mh$ = SDL_GameControllerFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joyid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$2,"SDL_GameControllerFromPlayerIndex");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_GameControllerFromPlayerIndex(int player_index) {
        var mh$ = SDL_GameControllerFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerName$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"SDL_GameControllerName");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerName(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerName(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPath$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"SDL_GameControllerPath");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPath(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerPath(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"SDL_GameControllerGetType");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType SDL_GameControllerGetType(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetType(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetType$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"SDL_GameControllerGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetPlayerIndex(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetPlayerIndex(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"SDL_GameControllerSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerSetPlayerIndex(struct _SDL_GameController* gamecontroller, int player_index);
     * }
     */
    public static void SDL_GameControllerSetPlayerIndex(MemorySegment gamecontroller, int player_index) {
        var mh$ = SDL_GameControllerSetPlayerIndex$MH();
        try {
            mh$.invokeExact(gamecontroller, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$2,"SDL_GameControllerGetVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetVendor(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetVendor(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetVendor$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"SDL_GameControllerGetProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetProduct(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProduct(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProduct$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"SDL_GameControllerGetProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetProductVersion(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProductVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"SDL_GameControllerGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetFirmwareVersion(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetFirmwareVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"SDL_GameControllerGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetSerial(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetSerial(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"SDL_GameControllerGetAttached");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerGetAttached(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetAttached(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetAttached$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetJoystick$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"SDL_GameControllerGetJoystick");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_GameControllerGetJoystick(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetJoystick(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetJoystick$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"SDL_GameControllerEventState");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerEventState(int state);
     * }
     */
    public static int SDL_GameControllerEventState(int state) {
        var mh$ = SDL_GameControllerEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"SDL_GameControllerUpdate");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerUpdate();
     * }
     */
    public static void SDL_GameControllerUpdate() {
        var mh$ = SDL_GameControllerUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX = 0;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY = 1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX = 2;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY = 3;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERLEFT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERRIGHT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX = 6;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_MAX() {
        return (int)6L;
    }
    public static MethodHandle SDL_GameControllerGetAxisFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"SDL_GameControllerGetAxisFromString");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetAxisFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetAxisFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"SDL_GameControllerGetStringForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForAxis(enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForAxis(int axis) {
        var mh$ = SDL_GameControllerGetStringForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"SDL_GameControllerGetBindForAxis");
    }
    /**
     * {@snippet :
     * struct SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForAxis(SegmentAllocator allocator, MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetBindForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"SDL_GameControllerHasAxis");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static int SDL_GameControllerHasAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerHasAxis$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"SDL_GameControllerGetAxis");
    }
    /**
     * {@snippet :
     * short SDL_GameControllerGetAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static short SDL_GameControllerGetAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAxis$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A = 0;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_A() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B = 1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X = 2;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_X() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y = 3;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_Y() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK = 4;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_BACK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE = 5;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_GUIDE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START = 6;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_START() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSTICK() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSTICK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSHOULDER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSHOULDER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_UP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_DOWN() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_LEFT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_RIGHT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MISC1 = 15;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MISC1() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE1() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE2() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE3() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE4() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_TOUCHPAD() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX = 21;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MAX() {
        return (int)21L;
    }
    public static MethodHandle SDL_GameControllerGetButtonFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"SDL_GameControllerGetButtonFromString");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton SDL_GameControllerGetButtonFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetButtonFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetButtonFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$0,"SDL_GameControllerGetStringForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForButton(enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForButton(int button) {
        var mh$ = SDL_GameControllerGetStringForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"SDL_GameControllerGetBindForButton");
    }
    /**
     * {@snippet :
     * struct SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForButton(SegmentAllocator allocator, MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetBindForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasButton$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"SDL_GameControllerHasButton");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static int SDL_GameControllerHasButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerHasButton$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$3,"SDL_GameControllerGetButton");
    }
    /**
     * {@snippet :
     * unsigned char SDL_GameControllerGetButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static byte SDL_GameControllerGetButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetButton$MH();
        try {
            return (byte)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpads$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"SDL_GameControllerGetNumTouchpads");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpads(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpads(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetNumTouchpads$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpadFingers$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"SDL_GameControllerGetNumTouchpadFingers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpadFingers(struct _SDL_GameController* gamecontroller, int touchpad);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpadFingers(MemorySegment gamecontroller, int touchpad) {
        var mh$ = SDL_GameControllerGetNumTouchpadFingers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetTouchpadFinger$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"SDL_GameControllerGetTouchpadFinger");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetTouchpadFinger(struct _SDL_GameController* gamecontroller, int touchpad, int finger, unsigned char* state, float* x, float* y, float* pressure);
     * }
     */
    public static int SDL_GameControllerGetTouchpadFinger(MemorySegment gamecontroller, int touchpad, int finger, MemorySegment state, MemorySegment x, MemorySegment y, MemorySegment pressure) {
        var mh$ = SDL_GameControllerGetTouchpadFinger$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad, finger, state, x, y, pressure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasSensor$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"SDL_GameControllerHasSensor");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasSensor(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerHasSensor(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerHasSensor$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"SDL_GameControllerSetSensorEnabled");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetSensorEnabled(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, enum SDL_bool enabled);
     * }
     */
    public static int SDL_GameControllerSetSensorEnabled(MemorySegment gamecontroller, int type, int enabled) {
        var mh$ = SDL_GameControllerSetSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerIsSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"SDL_GameControllerIsSensorEnabled");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerIsSensorEnabled(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerIsSensorEnabled(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerIsSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataRate$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$6,"SDL_GameControllerGetSensorDataRate");
    }
    /**
     * {@snippet :
     * float SDL_GameControllerGetSensorDataRate(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static float SDL_GameControllerGetSensorDataRate(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerGetSensorDataRate$MH();
        try {
            return (float)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorData$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"SDL_GameControllerGetSensorData");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorData(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorData(MemorySegment gamecontroller, int type, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorData$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$3,"SDL_GameControllerGetSensorDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorDataWithTimestamp(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, unsigned long long* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorDataWithTimestamp(MemorySegment gamecontroller, int type, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$4,"SDL_GameControllerRumble");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumble(struct _SDL_GameController* gamecontroller, unsigned short low_frequency_rumble, unsigned short high_frequency_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_GameControllerRumble(MemorySegment gamecontroller, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"SDL_GameControllerRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumbleTriggers(struct _SDL_GameController* gamecontroller, unsigned short left_rumble, unsigned short right_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_GameControllerRumbleTriggers(MemorySegment gamecontroller, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$0,"SDL_GameControllerHasLED");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasLED(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasLED(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"SDL_GameControllerHasRumble");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasRumble(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumble(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"SDL_GameControllerHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasRumbleTriggers(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumbleTriggers(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$3,"SDL_GameControllerSetLED");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetLED(struct _SDL_GameController* gamecontroller, unsigned char red, unsigned char green, unsigned char blue);
     * }
     */
    public static int SDL_GameControllerSetLED(MemorySegment gamecontroller, byte red, byte green, byte blue) {
        var mh$ = SDL_GameControllerSetLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"SDL_GameControllerSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSendEffect(struct _SDL_GameController* gamecontroller, void* data, int size);
     * }
     */
    public static int SDL_GameControllerSendEffect(MemorySegment gamecontroller, MemorySegment data, int size) {
        var mh$ = SDL_GameControllerSendEffect$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerClose$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$5,"SDL_GameControllerClose");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerClose(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static void SDL_GameControllerClose(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerClose$MH();
        try {
            mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"SDL_GameControllerGetAppleSFSymbolsNameForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"SDL_GameControllerGetAppleSFSymbolsNameForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_FIRSTEVENT = 0;
     * }
     */
    public static int SDL_FIRSTEVENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_QUIT = 256;
     * }
     */
    public static int SDL_QUIT() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_TERMINATING = 257;
     * }
     */
    public static int SDL_APP_TERMINATING() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_LOWMEMORY = 258;
     * }
     */
    public static int SDL_APP_LOWMEMORY() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_WILLENTERBACKGROUND = 259;
     * }
     */
    public static int SDL_APP_WILLENTERBACKGROUND() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_DIDENTERBACKGROUND = 260;
     * }
     */
    public static int SDL_APP_DIDENTERBACKGROUND() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_WILLENTERFOREGROUND = 261;
     * }
     */
    public static int SDL_APP_WILLENTERFOREGROUND() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_APP_DIDENTERFOREGROUND = 262;
     * }
     */
    public static int SDL_APP_DIDENTERFOREGROUND() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_LOCALECHANGED = 263;
     * }
     */
    public static int SDL_LOCALECHANGED() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DISPLAYEVENT = 336;
     * }
     */
    public static int SDL_DISPLAYEVENT() {
        return (int)336L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_WINDOWEVENT = 512;
     * }
     */
    public static int SDL_WINDOWEVENT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_SYSWMEVENT = 513;
     * }
     */
    public static int SDL_SYSWMEVENT() {
        return (int)513L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_KEYDOWN = 768;
     * }
     */
    public static int SDL_KEYDOWN() {
        return (int)768L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_KEYUP = 769;
     * }
     */
    public static int SDL_KEYUP() {
        return (int)769L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_TEXTEDITING = 770;
     * }
     */
    public static int SDL_TEXTEDITING() {
        return (int)770L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_TEXTINPUT = 771;
     * }
     */
    public static int SDL_TEXTINPUT() {
        return (int)771L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_KEYMAPCHANGED = 772;
     * }
     */
    public static int SDL_KEYMAPCHANGED() {
        return (int)772L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_TEXTEDITING_EXT = 773;
     * }
     */
    public static int SDL_TEXTEDITING_EXT() {
        return (int)773L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_MOUSEMOTION = 1024;
     * }
     */
    public static int SDL_MOUSEMOTION() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_MOUSEBUTTONDOWN = 1025;
     * }
     */
    public static int SDL_MOUSEBUTTONDOWN() {
        return (int)1025L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_MOUSEBUTTONUP = 1026;
     * }
     */
    public static int SDL_MOUSEBUTTONUP() {
        return (int)1026L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_MOUSEWHEEL = 1027;
     * }
     */
    public static int SDL_MOUSEWHEEL() {
        return (int)1027L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYAXISMOTION = 1536;
     * }
     */
    public static int SDL_JOYAXISMOTION() {
        return (int)1536L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYBALLMOTION = 1537;
     * }
     */
    public static int SDL_JOYBALLMOTION() {
        return (int)1537L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYHATMOTION = 1538;
     * }
     */
    public static int SDL_JOYHATMOTION() {
        return (int)1538L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYBUTTONDOWN = 1539;
     * }
     */
    public static int SDL_JOYBUTTONDOWN() {
        return (int)1539L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYBUTTONUP = 1540;
     * }
     */
    public static int SDL_JOYBUTTONUP() {
        return (int)1540L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYDEVICEADDED = 1541;
     * }
     */
    public static int SDL_JOYDEVICEADDED() {
        return (int)1541L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYDEVICEREMOVED = 1542;
     * }
     */
    public static int SDL_JOYDEVICEREMOVED() {
        return (int)1542L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_JOYBATTERYUPDATED = 1543;
     * }
     */
    public static int SDL_JOYBATTERYUPDATED() {
        return (int)1543L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERAXISMOTION = 1616;
     * }
     */
    public static int SDL_CONTROLLERAXISMOTION() {
        return (int)1616L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERBUTTONDOWN = 1617;
     * }
     */
    public static int SDL_CONTROLLERBUTTONDOWN() {
        return (int)1617L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERBUTTONUP = 1618;
     * }
     */
    public static int SDL_CONTROLLERBUTTONUP() {
        return (int)1618L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERDEVICEADDED = 1619;
     * }
     */
    public static int SDL_CONTROLLERDEVICEADDED() {
        return (int)1619L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERDEVICEREMOVED = 1620;
     * }
     */
    public static int SDL_CONTROLLERDEVICEREMOVED() {
        return (int)1620L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERDEVICEREMAPPED = 1621;
     * }
     */
    public static int SDL_CONTROLLERDEVICEREMAPPED() {
        return (int)1621L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERTOUCHPADDOWN = 1622;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADDOWN() {
        return (int)1622L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERTOUCHPADMOTION = 1623;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADMOTION() {
        return (int)1623L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERTOUCHPADUP = 1624;
     * }
     */
    public static int SDL_CONTROLLERTOUCHPADUP() {
        return (int)1624L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CONTROLLERSENSORUPDATE = 1625;
     * }
     */
    public static int SDL_CONTROLLERSENSORUPDATE() {
        return (int)1625L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_FINGERDOWN = 1792;
     * }
     */
    public static int SDL_FINGERDOWN() {
        return (int)1792L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_FINGERUP = 1793;
     * }
     */
    public static int SDL_FINGERUP() {
        return (int)1793L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_FINGERMOTION = 1794;
     * }
     */
    public static int SDL_FINGERMOTION() {
        return (int)1794L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DOLLARGESTURE = 2048;
     * }
     */
    public static int SDL_DOLLARGESTURE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DOLLARRECORD = 2049;
     * }
     */
    public static int SDL_DOLLARRECORD() {
        return (int)2049L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_MULTIGESTURE = 2050;
     * }
     */
    public static int SDL_MULTIGESTURE() {
        return (int)2050L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_CLIPBOARDUPDATE = 2304;
     * }
     */
    public static int SDL_CLIPBOARDUPDATE() {
        return (int)2304L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DROPFILE = 4096;
     * }
     */
    public static int SDL_DROPFILE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DROPTEXT = 4097;
     * }
     */
    public static int SDL_DROPTEXT() {
        return (int)4097L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DROPBEGIN = 4098;
     * }
     */
    public static int SDL_DROPBEGIN() {
        return (int)4098L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_DROPCOMPLETE = 4099;
     * }
     */
    public static int SDL_DROPCOMPLETE() {
        return (int)4099L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_AUDIODEVICEADDED = 4352;
     * }
     */
    public static int SDL_AUDIODEVICEADDED() {
        return (int)4352L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_AUDIODEVICEREMOVED = 4353;
     * }
     */
    public static int SDL_AUDIODEVICEREMOVED() {
        return (int)4353L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_SENSORUPDATE = 4608;
     * }
     */
    public static int SDL_SENSORUPDATE() {
        return (int)4608L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_RENDER_TARGETS_RESET = 8192;
     * }
     */
    public static int SDL_RENDER_TARGETS_RESET() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_RENDER_DEVICE_RESET = 8193;
     * }
     */
    public static int SDL_RENDER_DEVICE_RESET() {
        return (int)8193L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_POLLSENTINEL = 32512;
     * }
     */
    public static int SDL_POLLSENTINEL() {
        return (int)32512L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_USEREVENT = 32768;
     * }
     */
    public static int SDL_USEREVENT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum SDL_EventType.SDL_LASTEVENT = 65535;
     * }
     */
    public static int SDL_LASTEVENT() {
        return (int)65535L;
    }
    public static MethodHandle SDL_PumpEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$3,"SDL_PumpEvents");
    }
    /**
     * {@snippet :
     * void SDL_PumpEvents();
     * }
     */
    public static void SDL_PumpEvents() {
        var mh$ = SDL_PumpEvents$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_eventaction.SDL_ADDEVENT = 0;
     * }
     */
    public static int SDL_ADDEVENT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_eventaction.SDL_PEEKEVENT = 1;
     * }
     */
    public static int SDL_PEEKEVENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_eventaction.SDL_GETEVENT = 2;
     * }
     */
    public static int SDL_GETEVENT() {
        return (int)2L;
    }
    public static MethodHandle SDL_PeepEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$5,"SDL_PeepEvents");
    }
    /**
     * {@snippet :
     * int SDL_PeepEvents(union SDL_Event* events, int numevents, enum SDL_eventaction action, unsigned int minType, unsigned int maxType);
     * }
     */
    public static int SDL_PeepEvents(MemorySegment events, int numevents, int action, int minType, int maxType) {
        var mh$ = SDL_PeepEvents$MH();
        try {
            return (int)mh$.invokeExact(events, numevents, action, minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$0,"SDL_HasEvent");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasEvent(unsigned int type);
     * }
     */
    public static int SDL_HasEvent(int type) {
        var mh$ = SDL_HasEvent$MH();
        try {
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_HasEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$1,"SDL_HasEvents");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_HasEvents(unsigned int minType, unsigned int maxType);
     * }
     */
    public static int SDL_HasEvents(int minType, int maxType) {
        var mh$ = SDL_HasEvents$MH();
        try {
            return (int)mh$.invokeExact(minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FlushEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$2,"SDL_FlushEvent");
    }
    /**
     * {@snippet :
     * void SDL_FlushEvent(unsigned int type);
     * }
     */
    public static void SDL_FlushEvent(int type) {
        var mh$ = SDL_FlushEvent$MH();
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FlushEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$4,"SDL_FlushEvents");
    }
    /**
     * {@snippet :
     * void SDL_FlushEvents(unsigned int minType, unsigned int maxType);
     * }
     */
    public static void SDL_FlushEvents(int minType, int maxType) {
        var mh$ = SDL_FlushEvents$MH();
        try {
            mh$.invokeExact(minType, maxType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PollEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$5,"SDL_PollEvent");
    }
    /**
     * {@snippet :
     * int SDL_PollEvent(union SDL_Event* event);
     * }
     */
    public static int SDL_PollEvent(MemorySegment event) {
        var mh$ = SDL_PollEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WaitEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$0,"SDL_WaitEvent");
    }
    /**
     * {@snippet :
     * int SDL_WaitEvent(union SDL_Event* event);
     * }
     */
    public static int SDL_WaitEvent(MemorySegment event) {
        var mh$ = SDL_WaitEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WaitEventTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"SDL_WaitEventTimeout");
    }
    /**
     * {@snippet :
     * int SDL_WaitEventTimeout(union SDL_Event* event, int timeout);
     * }
     */
    public static int SDL_WaitEventTimeout(MemorySegment event, int timeout) {
        var mh$ = SDL_WaitEventTimeout$MH();
        try {
            return (int)mh$.invokeExact(event, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_PushEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"SDL_PushEvent");
    }
    /**
     * {@snippet :
     * int SDL_PushEvent(union SDL_Event* event);
     * }
     */
    public static int SDL_PushEvent(MemorySegment event) {
        var mh$ = SDL_PushEvent$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetEventFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$0,"SDL_SetEventFilter");
    }
    /**
     * {@snippet :
     * void SDL_SetEventFilter(int (*filter)(void*,union SDL_Event*), void* userdata);
     * }
     */
    public static void SDL_SetEventFilter(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_SetEventFilter$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetEventFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"SDL_GetEventFilter");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GetEventFilter(int (**filter)(void*,union SDL_Event*), void** userdata);
     * }
     */
    public static int SDL_GetEventFilter(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_GetEventFilter$MH();
        try {
            return (int)mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AddEventWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$4,"SDL_AddEventWatch");
    }
    /**
     * {@snippet :
     * void SDL_AddEventWatch(int (*filter)(void*,union SDL_Event*), void* userdata);
     * }
     */
    public static void SDL_AddEventWatch(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_AddEventWatch$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DelEventWatch$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$0,"SDL_DelEventWatch");
    }
    /**
     * {@snippet :
     * void SDL_DelEventWatch(int (*filter)(void*,union SDL_Event*), void* userdata);
     * }
     */
    public static void SDL_DelEventWatch(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_DelEventWatch$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FilterEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$2,"SDL_FilterEvents");
    }
    /**
     * {@snippet :
     * void SDL_FilterEvents(int (*filter)(void*,union SDL_Event*), void* userdata);
     * }
     */
    public static void SDL_FilterEvents(MemorySegment filter, MemorySegment userdata) {
        var mh$ = SDL_FilterEvents$MH();
        try {
            mh$.invokeExact(filter, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_EventState$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$4,"SDL_EventState");
    }
    /**
     * {@snippet :
     * unsigned char SDL_EventState(unsigned int type, int state);
     * }
     */
    public static byte SDL_EventState(int type, int state) {
        var mh$ = SDL_EventState$MH();
        try {
            return (byte)mh$.invokeExact(type, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RegisterEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"SDL_RegisterEvents");
    }
    /**
     * {@snippet :
     * unsigned int SDL_RegisterEvents(int numevents);
     * }
     */
    public static int SDL_RegisterEvents(int numevents) {
        var mh$ = SDL_RegisterEvents$MH();
        try {
            return (int)mh$.invokeExact(numevents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_HintPriority.SDL_HINT_DEFAULT = 0;
     * }
     */
    public static int SDL_HINT_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_HintPriority.SDL_HINT_NORMAL = 1;
     * }
     */
    public static int SDL_HINT_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_HintPriority.SDL_HINT_OVERRIDE = 2;
     * }
     */
    public static int SDL_HINT_OVERRIDE() {
        return (int)2L;
    }
    public static MethodHandle SDL_SetHintWithPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$0,"SDL_SetHintWithPriority");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_SetHintWithPriority(char* name, char* value, enum SDL_HintPriority priority);
     * }
     */
    public static int SDL_SetHintWithPriority(MemorySegment name, MemorySegment value, int priority) {
        var mh$ = SDL_SetHintWithPriority$MH();
        try {
            return (int)mh$.invokeExact(name, value, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$1,"SDL_SetHint");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_SetHint(char* name, char* value);
     * }
     */
    public static int SDL_SetHint(MemorySegment name, MemorySegment value) {
        var mh$ = SDL_SetHint$MH();
        try {
            return (int)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$2,"SDL_ResetHint");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_ResetHint(char* name);
     * }
     */
    public static int SDL_ResetHint(MemorySegment name) {
        var mh$ = SDL_ResetHint$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ResetHints$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$3,"SDL_ResetHints");
    }
    /**
     * {@snippet :
     * void SDL_ResetHints();
     * }
     */
    public static void SDL_ResetHints() {
        var mh$ = SDL_ResetHints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetHint$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$4,"SDL_GetHint");
    }
    /**
     * {@snippet :
     * char* SDL_GetHint(char* name);
     * }
     */
    public static MemorySegment SDL_GetHint(MemorySegment name) {
        var mh$ = SDL_GetHint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetHintBoolean$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$5,"SDL_GetHintBoolean");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GetHintBoolean(char* name, enum SDL_bool default_value);
     * }
     */
    public static int SDL_GetHintBoolean(MemorySegment name, int default_value) {
        var mh$ = SDL_GetHintBoolean$MH();
        try {
            return (int)mh$.invokeExact(name, default_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearHints$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$0,"SDL_ClearHints");
    }
    /**
     * {@snippet :
     * void SDL_ClearHints();
     * }
     */
    public static void SDL_ClearHints() {
        var mh$ = SDL_ClearHints$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlags.SDL_RENDERER_SOFTWARE = 1;
     * }
     */
    public static int SDL_RENDERER_SOFTWARE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlags.SDL_RENDERER_ACCELERATED = 2;
     * }
     */
    public static int SDL_RENDERER_ACCELERATED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC = 4;
     * }
     */
    public static int SDL_RENDERER_PRESENTVSYNC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlags.SDL_RENDERER_TARGETTEXTURE = 8;
     * }
     */
    public static int SDL_RENDERER_TARGETTEXTURE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_ScaleMode.SDL_ScaleModeNearest = 0;
     * }
     */
    public static int SDL_ScaleModeNearest() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_ScaleMode.SDL_ScaleModeLinear = 1;
     * }
     */
    public static int SDL_ScaleModeLinear() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_ScaleMode.SDL_ScaleModeBest = 2;
     * }
     */
    public static int SDL_ScaleModeBest() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureAccess.SDL_TEXTUREACCESS_STATIC = 0;
     * }
     */
    public static int SDL_TEXTUREACCESS_STATIC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureAccess.SDL_TEXTUREACCESS_STREAMING = 1;
     * }
     */
    public static int SDL_TEXTUREACCESS_STREAMING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureAccess.SDL_TEXTUREACCESS_TARGET = 2;
     * }
     */
    public static int SDL_TEXTUREACCESS_TARGET() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureModulate.SDL_TEXTUREMODULATE_NONE = 0;
     * }
     */
    public static int SDL_TEXTUREMODULATE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureModulate.SDL_TEXTUREMODULATE_COLOR = 1;
     * }
     */
    public static int SDL_TEXTUREMODULATE_COLOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_TextureModulate.SDL_TEXTUREMODULATE_ALPHA = 2;
     * }
     */
    public static int SDL_TEXTUREMODULATE_ALPHA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlip.SDL_FLIP_NONE = 0;
     * }
     */
    public static int SDL_FLIP_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlip.SDL_FLIP_HORIZONTAL = 1;
     * }
     */
    public static int SDL_FLIP_HORIZONTAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_RendererFlip.SDL_FLIP_VERTICAL = 2;
     * }
     */
    public static int SDL_FLIP_VERTICAL() {
        return (int)2L;
    }
    public static MethodHandle SDL_GetNumRenderDrivers$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$2,"SDL_GetNumRenderDrivers");
    }
    /**
     * {@snippet :
     * int SDL_GetNumRenderDrivers();
     * }
     */
    public static int SDL_GetNumRenderDrivers() {
        var mh$ = SDL_GetNumRenderDrivers$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDriverInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$3,"SDL_GetRenderDriverInfo");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDriverInfo(int index, struct SDL_RendererInfo* info);
     * }
     */
    public static int SDL_GetRenderDriverInfo(int index, MemorySegment info) {
        var mh$ = SDL_GetRenderDriverInfo$MH();
        try {
            return (int)mh$.invokeExact(index, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateWindowAndRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$5,"SDL_CreateWindowAndRenderer");
    }
    /**
     * {@snippet :
     * int SDL_CreateWindowAndRenderer(int width, int height, unsigned int window_flags, struct SDL_Window** window, struct SDL_Renderer** renderer);
     * }
     */
    public static int SDL_CreateWindowAndRenderer(int width, int height, int window_flags, MemorySegment window, MemorySegment renderer) {
        var mh$ = SDL_CreateWindowAndRenderer$MH();
        try {
            return (int)mh$.invokeExact(width, height, window_flags, window, renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$0,"SDL_CreateRenderer");
    }
    /**
     * {@snippet :
     * struct SDL_Renderer* SDL_CreateRenderer(struct SDL_Window* window, int index, unsigned int flags);
     * }
     */
    public static MemorySegment SDL_CreateRenderer(MemorySegment window, int index, int flags) {
        var mh$ = SDL_CreateRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window, index, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSoftwareRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$1,"SDL_CreateSoftwareRenderer");
    }
    /**
     * {@snippet :
     * struct SDL_Renderer* SDL_CreateSoftwareRenderer(struct SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_CreateSoftwareRenderer(MemorySegment surface) {
        var mh$ = SDL_CreateSoftwareRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$2,"SDL_GetRenderer");
    }
    /**
     * {@snippet :
     * struct SDL_Renderer* SDL_GetRenderer(struct SDL_Window* window);
     * }
     */
    public static MemorySegment SDL_GetRenderer(MemorySegment window) {
        var mh$ = SDL_GetRenderer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"SDL_RenderGetWindow");
    }
    /**
     * {@snippet :
     * struct SDL_Window* SDL_RenderGetWindow(struct SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetWindow(MemorySegment renderer) {
        var mh$ = SDL_RenderGetWindow$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRendererInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$4,"SDL_GetRendererInfo");
    }
    /**
     * {@snippet :
     * int SDL_GetRendererInfo(struct SDL_Renderer* renderer, struct SDL_RendererInfo* info);
     * }
     */
    public static int SDL_GetRendererInfo(MemorySegment renderer, MemorySegment info) {
        var mh$ = SDL_GetRendererInfo$MH();
        try {
            return (int)mh$.invokeExact(renderer, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRendererOutputSize$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"SDL_GetRendererOutputSize");
    }
    /**
     * {@snippet :
     * int SDL_GetRendererOutputSize(struct SDL_Renderer* renderer, int* w, int* h);
     * }
     */
    public static int SDL_GetRendererOutputSize(MemorySegment renderer, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_GetRendererOutputSize$MH();
        try {
            return (int)mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$1,"SDL_CreateTexture");
    }
    /**
     * {@snippet :
     * struct SDL_Texture* SDL_CreateTexture(struct SDL_Renderer* renderer, unsigned int format, int access, int w, int h);
     * }
     */
    public static MemorySegment SDL_CreateTexture(MemorySegment renderer, int format, int access, int w, int h) {
        var mh$ = SDL_CreateTexture$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer, format, access, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateTextureFromSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$2,"SDL_CreateTextureFromSurface");
    }
    /**
     * {@snippet :
     * struct SDL_Texture* SDL_CreateTextureFromSurface(struct SDL_Renderer* renderer, struct SDL_Surface* surface);
     * }
     */
    public static MemorySegment SDL_CreateTextureFromSurface(MemorySegment renderer, MemorySegment surface) {
        var mh$ = SDL_CreateTextureFromSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer, surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_QueryTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"SDL_QueryTexture");
    }
    /**
     * {@snippet :
     * int SDL_QueryTexture(struct SDL_Texture* texture, unsigned int* format, int* access, int* w, int* h);
     * }
     */
    public static int SDL_QueryTexture(MemorySegment texture, MemorySegment format, MemorySegment access, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_QueryTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, format, access, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$4,"SDL_SetTextureColorMod");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureColorMod(struct SDL_Texture* texture, unsigned char r, unsigned char g, unsigned char b);
     * }
     */
    public static int SDL_SetTextureColorMod(MemorySegment texture, byte r, byte g, byte b) {
        var mh$ = SDL_SetTextureColorMod$MH();
        try {
            return (int)mh$.invokeExact(texture, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureColorMod$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"SDL_GetTextureColorMod");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureColorMod(struct SDL_Texture* texture, unsigned char* r, unsigned char* g, unsigned char* b);
     * }
     */
    public static int SDL_GetTextureColorMod(MemorySegment texture, MemorySegment r, MemorySegment g, MemorySegment b) {
        var mh$ = SDL_GetTextureColorMod$MH();
        try {
            return (int)mh$.invokeExact(texture, r, g, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$0,"SDL_SetTextureAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureAlphaMod(struct SDL_Texture* texture, unsigned char alpha);
     * }
     */
    public static int SDL_SetTextureAlphaMod(MemorySegment texture, byte alpha) {
        var mh$ = SDL_SetTextureAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(texture, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureAlphaMod$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"SDL_GetTextureAlphaMod");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureAlphaMod(struct SDL_Texture* texture, unsigned char* alpha);
     * }
     */
    public static int SDL_GetTextureAlphaMod(MemorySegment texture, MemorySegment alpha) {
        var mh$ = SDL_GetTextureAlphaMod$MH();
        try {
            return (int)mh$.invokeExact(texture, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$2,"SDL_SetTextureBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureBlendMode(struct SDL_Texture* texture, enum SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetTextureBlendMode(MemorySegment texture, int blendMode) {
        var mh$ = SDL_SetTextureBlendMode$MH();
        try {
            return (int)mh$.invokeExact(texture, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"SDL_GetTextureBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureBlendMode(struct SDL_Texture* texture, enum SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetTextureBlendMode(MemorySegment texture, MemorySegment blendMode) {
        var mh$ = SDL_GetTextureBlendMode$MH();
        try {
            return (int)mh$.invokeExact(texture, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureScaleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"SDL_SetTextureScaleMode");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureScaleMode(struct SDL_Texture* texture, enum SDL_ScaleMode scaleMode);
     * }
     */
    public static int SDL_SetTextureScaleMode(MemorySegment texture, int scaleMode) {
        var mh$ = SDL_SetTextureScaleMode$MH();
        try {
            return (int)mh$.invokeExact(texture, scaleMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureScaleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$5,"SDL_GetTextureScaleMode");
    }
    /**
     * {@snippet :
     * int SDL_GetTextureScaleMode(struct SDL_Texture* texture, enum SDL_ScaleMode* scaleMode);
     * }
     */
    public static int SDL_GetTextureScaleMode(MemorySegment texture, MemorySegment scaleMode) {
        var mh$ = SDL_GetTextureScaleMode$MH();
        try {
            return (int)mh$.invokeExact(texture, scaleMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetTextureUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$0,"SDL_SetTextureUserData");
    }
    /**
     * {@snippet :
     * int SDL_SetTextureUserData(struct SDL_Texture* texture, void* userdata);
     * }
     */
    public static int SDL_SetTextureUserData(MemorySegment texture, MemorySegment userdata) {
        var mh$ = SDL_SetTextureUserData$MH();
        try {
            return (int)mh$.invokeExact(texture, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetTextureUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"SDL_GetTextureUserData");
    }
    /**
     * {@snippet :
     * void* SDL_GetTextureUserData(struct SDL_Texture* texture);
     * }
     */
    public static MemorySegment SDL_GetTextureUserData(MemorySegment texture) {
        var mh$ = SDL_GetTextureUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$2,"SDL_UpdateTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateTexture(struct SDL_Texture* texture, struct SDL_Rect* rect, void* pixels, int pitch);
     * }
     */
    public static int SDL_UpdateTexture(MemorySegment texture, MemorySegment rect, MemorySegment pixels, int pitch) {
        var mh$ = SDL_UpdateTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateYUVTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"SDL_UpdateYUVTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateYUVTexture(struct SDL_Texture* texture, struct SDL_Rect* rect, unsigned char* Yplane, int Ypitch, unsigned char* Uplane, int Upitch, unsigned char* Vplane, int Vpitch);
     * }
     */
    public static int SDL_UpdateYUVTexture(MemorySegment texture, MemorySegment rect, MemorySegment Yplane, int Ypitch, MemorySegment Uplane, int Upitch, MemorySegment Vplane, int Vpitch) {
        var mh$ = SDL_UpdateYUVTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, Yplane, Ypitch, Uplane, Upitch, Vplane, Vpitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UpdateNVTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$6,"SDL_UpdateNVTexture");
    }
    /**
     * {@snippet :
     * int SDL_UpdateNVTexture(struct SDL_Texture* texture, struct SDL_Rect* rect, unsigned char* Yplane, int Ypitch, unsigned char* UVplane, int UVpitch);
     * }
     */
    public static int SDL_UpdateNVTexture(MemorySegment texture, MemorySegment rect, MemorySegment Yplane, int Ypitch, MemorySegment UVplane, int UVpitch) {
        var mh$ = SDL_UpdateNVTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, Yplane, Ypitch, UVplane, UVpitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$0,"SDL_LockTexture");
    }
    /**
     * {@snippet :
     * int SDL_LockTexture(struct SDL_Texture* texture, struct SDL_Rect* rect, void** pixels, int* pitch);
     * }
     */
    public static int SDL_LockTexture(MemorySegment texture, MemorySegment rect, MemorySegment pixels, MemorySegment pitch) {
        var mh$ = SDL_LockTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockTextureToSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$1,"SDL_LockTextureToSurface");
    }
    /**
     * {@snippet :
     * int SDL_LockTextureToSurface(struct SDL_Texture* texture, struct SDL_Rect* rect, struct SDL_Surface** surface);
     * }
     */
    public static int SDL_LockTextureToSurface(MemorySegment texture, MemorySegment rect, MemorySegment surface) {
        var mh$ = SDL_LockTextureToSurface$MH();
        try {
            return (int)mh$.invokeExact(texture, rect, surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"SDL_UnlockTexture");
    }
    /**
     * {@snippet :
     * void SDL_UnlockTexture(struct SDL_Texture* texture);
     * }
     */
    public static void SDL_UnlockTexture(MemorySegment texture) {
        var mh$ = SDL_UnlockTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderTargetSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$3,"SDL_RenderTargetSupported");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_RenderTargetSupported(struct SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderTargetSupported(MemorySegment renderer) {
        var mh$ = SDL_RenderTargetSupported$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$4,"SDL_SetRenderTarget");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderTarget(struct SDL_Renderer* renderer, struct SDL_Texture* texture);
     * }
     */
    public static int SDL_SetRenderTarget(MemorySegment renderer, MemorySegment texture) {
        var mh$ = SDL_SetRenderTarget$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$5,"SDL_GetRenderTarget");
    }
    /**
     * {@snippet :
     * struct SDL_Texture* SDL_GetRenderTarget(struct SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_GetRenderTarget(MemorySegment renderer) {
        var mh$ = SDL_GetRenderTarget$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetLogicalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$0,"SDL_RenderSetLogicalSize");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetLogicalSize(struct SDL_Renderer* renderer, int w, int h);
     * }
     */
    public static int SDL_RenderSetLogicalSize(MemorySegment renderer, int w, int h) {
        var mh$ = SDL_RenderSetLogicalSize$MH();
        try {
            return (int)mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetLogicalSize$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$1,"SDL_RenderGetLogicalSize");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetLogicalSize(struct SDL_Renderer* renderer, int* w, int* h);
     * }
     */
    public static void SDL_RenderGetLogicalSize(MemorySegment renderer, MemorySegment w, MemorySegment h) {
        var mh$ = SDL_RenderGetLogicalSize$MH();
        try {
            mh$.invokeExact(renderer, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetIntegerScale$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$2,"SDL_RenderSetIntegerScale");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetIntegerScale(struct SDL_Renderer* renderer, enum SDL_bool enable);
     * }
     */
    public static int SDL_RenderSetIntegerScale(MemorySegment renderer, int enable) {
        var mh$ = SDL_RenderSetIntegerScale$MH();
        try {
            return (int)mh$.invokeExact(renderer, enable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetIntegerScale$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$3,"SDL_RenderGetIntegerScale");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_RenderGetIntegerScale(struct SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderGetIntegerScale(MemorySegment renderer) {
        var mh$ = SDL_RenderGetIntegerScale$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$4,"SDL_RenderSetViewport");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetViewport(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderSetViewport(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderSetViewport$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetViewport$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$5,"SDL_RenderGetViewport");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetViewport(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static void SDL_RenderGetViewport(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderGetViewport$MH();
        try {
            mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"SDL_RenderSetClipRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetClipRect(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderSetClipRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderSetClipRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$1,"SDL_RenderGetClipRect");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetClipRect(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static void SDL_RenderGetClipRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderGetClipRect$MH();
        try {
            mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderIsClipEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$2,"SDL_RenderIsClipEnabled");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_RenderIsClipEnabled(struct SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderIsClipEnabled(MemorySegment renderer) {
        var mh$ = SDL_RenderIsClipEnabled$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"SDL_RenderSetScale");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetScale(struct SDL_Renderer* renderer, float scaleX, float scaleY);
     * }
     */
    public static int SDL_RenderSetScale(MemorySegment renderer, float scaleX, float scaleY) {
        var mh$ = SDL_RenderSetScale$MH();
        try {
            return (int)mh$.invokeExact(renderer, scaleX, scaleY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"SDL_RenderGetScale");
    }
    /**
     * {@snippet :
     * void SDL_RenderGetScale(struct SDL_Renderer* renderer, float* scaleX, float* scaleY);
     * }
     */
    public static void SDL_RenderGetScale(MemorySegment renderer, MemorySegment scaleX, MemorySegment scaleY) {
        var mh$ = SDL_RenderGetScale$MH();
        try {
            mh$.invokeExact(renderer, scaleX, scaleY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderWindowToLogical$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$1,"SDL_RenderWindowToLogical");
    }
    /**
     * {@snippet :
     * void SDL_RenderWindowToLogical(struct SDL_Renderer* renderer, int windowX, int windowY, float* logicalX, float* logicalY);
     * }
     */
    public static void SDL_RenderWindowToLogical(MemorySegment renderer, int windowX, int windowY, MemorySegment logicalX, MemorySegment logicalY) {
        var mh$ = SDL_RenderWindowToLogical$MH();
        try {
            mh$.invokeExact(renderer, windowX, windowY, logicalX, logicalY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderLogicalToWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$3,"SDL_RenderLogicalToWindow");
    }
    /**
     * {@snippet :
     * void SDL_RenderLogicalToWindow(struct SDL_Renderer* renderer, float logicalX, float logicalY, int* windowX, int* windowY);
     * }
     */
    public static void SDL_RenderLogicalToWindow(MemorySegment renderer, float logicalX, float logicalY, MemorySegment windowX, MemorySegment windowY) {
        var mh$ = SDL_RenderLogicalToWindow$MH();
        try {
            mh$.invokeExact(renderer, logicalX, logicalY, windowX, windowY);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderDrawColor$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"SDL_SetRenderDrawColor");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderDrawColor(struct SDL_Renderer* renderer, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
     * }
     */
    public static int SDL_SetRenderDrawColor(MemorySegment renderer, byte r, byte g, byte b, byte a) {
        var mh$ = SDL_SetRenderDrawColor$MH();
        try {
            return (int)mh$.invokeExact(renderer, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDrawColor$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"SDL_GetRenderDrawColor");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDrawColor(struct SDL_Renderer* renderer, unsigned char* r, unsigned char* g, unsigned char* b, unsigned char* a);
     * }
     */
    public static int SDL_GetRenderDrawColor(MemorySegment renderer, MemorySegment r, MemorySegment g, MemorySegment b, MemorySegment a) {
        var mh$ = SDL_GetRenderDrawColor$MH();
        try {
            return (int)mh$.invokeExact(renderer, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetRenderDrawBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$0,"SDL_SetRenderDrawBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_SetRenderDrawBlendMode(struct SDL_Renderer* renderer, enum SDL_BlendMode blendMode);
     * }
     */
    public static int SDL_SetRenderDrawBlendMode(MemorySegment renderer, int blendMode) {
        var mh$ = SDL_SetRenderDrawBlendMode$MH();
        try {
            return (int)mh$.invokeExact(renderer, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetRenderDrawBlendMode$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$1,"SDL_GetRenderDrawBlendMode");
    }
    /**
     * {@snippet :
     * int SDL_GetRenderDrawBlendMode(struct SDL_Renderer* renderer, enum SDL_BlendMode* blendMode);
     * }
     */
    public static int SDL_GetRenderDrawBlendMode(MemorySegment renderer, MemorySegment blendMode) {
        var mh$ = SDL_GetRenderDrawBlendMode$MH();
        try {
            return (int)mh$.invokeExact(renderer, blendMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderClear$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$2,"SDL_RenderClear");
    }
    /**
     * {@snippet :
     * int SDL_RenderClear(struct SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderClear(MemorySegment renderer) {
        var mh$ = SDL_RenderClear$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$3,"SDL_RenderDrawPoint");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPoint(struct SDL_Renderer* renderer, int x, int y);
     * }
     */
    public static int SDL_RenderDrawPoint(MemorySegment renderer, int x, int y) {
        var mh$ = SDL_RenderDrawPoint$MH();
        try {
            return (int)mh$.invokeExact(renderer, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$4,"SDL_RenderDrawPoints");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPoints(struct SDL_Renderer* renderer, struct SDL_Point* points, int count);
     * }
     */
    public static int SDL_RenderDrawPoints(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawPoints$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLine$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$5,"SDL_RenderDrawLine");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLine(struct SDL_Renderer* renderer, int x1, int y1, int x2, int y2);
     * }
     */
    public static int SDL_RenderDrawLine(MemorySegment renderer, int x1, int y1, int x2, int y2) {
        var mh$ = SDL_RenderDrawLine$MH();
        try {
            return (int)mh$.invokeExact(renderer, x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLines$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$0,"SDL_RenderDrawLines");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLines(struct SDL_Renderer* renderer, struct SDL_Point* points, int count);
     * }
     */
    public static int SDL_RenderDrawLines(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawLines$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRect$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$1,"SDL_RenderDrawRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRect(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderDrawRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderDrawRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRects$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$2,"SDL_RenderDrawRects");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRects(struct SDL_Renderer* renderer, struct SDL_Rect* rects, int count);
     * }
     */
    public static int SDL_RenderDrawRects(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderDrawRects$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$3,"SDL_RenderFillRect");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRect(struct SDL_Renderer* renderer, struct SDL_Rect* rect);
     * }
     */
    public static int SDL_RenderFillRect(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderFillRect$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRects$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$4,"SDL_RenderFillRects");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRects(struct SDL_Renderer* renderer, struct SDL_Rect* rects, int count);
     * }
     */
    public static int SDL_RenderFillRects(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderFillRects$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$5,"SDL_RenderCopy");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopy(struct SDL_Renderer* renderer, struct SDL_Texture* texture, struct SDL_Rect* srcrect, struct SDL_Rect* dstrect);
     * }
     */
    public static int SDL_RenderCopy(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect) {
        var mh$ = SDL_RenderCopy$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyEx$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$1,"SDL_RenderCopyEx");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyEx(struct SDL_Renderer* renderer, struct SDL_Texture* texture, struct SDL_Rect* srcrect, struct SDL_Rect* dstrect, double angle, struct SDL_Point* center, enum SDL_RendererFlip flip);
     * }
     */
    public static int SDL_RenderCopyEx(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect, double angle, MemorySegment center, int flip) {
        var mh$ = SDL_RenderCopyEx$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect, angle, center, flip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPointF$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$2,"SDL_RenderDrawPointF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPointF(struct SDL_Renderer* renderer, float x, float y);
     * }
     */
    public static int SDL_RenderDrawPointF(MemorySegment renderer, float x, float y) {
        var mh$ = SDL_RenderDrawPointF$MH();
        try {
            return (int)mh$.invokeExact(renderer, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawPointsF$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$3,"SDL_RenderDrawPointsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawPointsF(struct SDL_Renderer* renderer, struct SDL_FPoint* points, int count);
     * }
     */
    public static int SDL_RenderDrawPointsF(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawPointsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLineF$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$5,"SDL_RenderDrawLineF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLineF(struct SDL_Renderer* renderer, float x1, float y1, float x2, float y2);
     * }
     */
    public static int SDL_RenderDrawLineF(MemorySegment renderer, float x1, float y1, float x2, float y2) {
        var mh$ = SDL_RenderDrawLineF$MH();
        try {
            return (int)mh$.invokeExact(renderer, x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawLinesF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$0,"SDL_RenderDrawLinesF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawLinesF(struct SDL_Renderer* renderer, struct SDL_FPoint* points, int count);
     * }
     */
    public static int SDL_RenderDrawLinesF(MemorySegment renderer, MemorySegment points, int count) {
        var mh$ = SDL_RenderDrawLinesF$MH();
        try {
            return (int)mh$.invokeExact(renderer, points, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRectF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$1,"SDL_RenderDrawRectF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRectF(struct SDL_Renderer* renderer, struct SDL_FRect* rect);
     * }
     */
    public static int SDL_RenderDrawRectF(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderDrawRectF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderDrawRectsF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$2,"SDL_RenderDrawRectsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderDrawRectsF(struct SDL_Renderer* renderer, struct SDL_FRect* rects, int count);
     * }
     */
    public static int SDL_RenderDrawRectsF(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderDrawRectsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRectF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$3,"SDL_RenderFillRectF");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRectF(struct SDL_Renderer* renderer, struct SDL_FRect* rect);
     * }
     */
    public static int SDL_RenderFillRectF(MemorySegment renderer, MemorySegment rect) {
        var mh$ = SDL_RenderFillRectF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFillRectsF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$4,"SDL_RenderFillRectsF");
    }
    /**
     * {@snippet :
     * int SDL_RenderFillRectsF(struct SDL_Renderer* renderer, struct SDL_FRect* rects, int count);
     * }
     */
    public static int SDL_RenderFillRectsF(MemorySegment renderer, MemorySegment rects, int count) {
        var mh$ = SDL_RenderFillRectsF$MH();
        try {
            return (int)mh$.invokeExact(renderer, rects, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyF$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$5,"SDL_RenderCopyF");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyF(struct SDL_Renderer* renderer, struct SDL_Texture* texture, struct SDL_Rect* srcrect, struct SDL_FRect* dstrect);
     * }
     */
    public static int SDL_RenderCopyF(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect) {
        var mh$ = SDL_RenderCopyF$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderCopyExF$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$0,"SDL_RenderCopyExF");
    }
    /**
     * {@snippet :
     * int SDL_RenderCopyExF(struct SDL_Renderer* renderer, struct SDL_Texture* texture, struct SDL_Rect* srcrect, struct SDL_FRect* dstrect, double angle, struct SDL_FPoint* center, enum SDL_RendererFlip flip);
     * }
     */
    public static int SDL_RenderCopyExF(MemorySegment renderer, MemorySegment texture, MemorySegment srcrect, MemorySegment dstrect, double angle, MemorySegment center, int flip) {
        var mh$ = SDL_RenderCopyExF$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, srcrect, dstrect, angle, center, flip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGeometry$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$1,"SDL_RenderGeometry");
    }
    /**
     * {@snippet :
     * int SDL_RenderGeometry(struct SDL_Renderer* renderer, struct SDL_Texture* texture, struct SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);
     * }
     */
    public static int SDL_RenderGeometry(MemorySegment renderer, MemorySegment texture, MemorySegment vertices, int num_vertices, MemorySegment indices, int num_indices) {
        var mh$ = SDL_RenderGeometry$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, vertices, num_vertices, indices, num_indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGeometryRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$3,"SDL_RenderGeometryRaw");
    }
    /**
     * {@snippet :
     * int SDL_RenderGeometryRaw(struct SDL_Renderer* renderer, struct SDL_Texture* texture, float* xy, int xy_stride, struct SDL_Color* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);
     * }
     */
    public static int SDL_RenderGeometryRaw(MemorySegment renderer, MemorySegment texture, MemorySegment xy, int xy_stride, MemorySegment color, int color_stride, MemorySegment uv, int uv_stride, int num_vertices, MemorySegment indices, int num_indices, int size_indices) {
        var mh$ = SDL_RenderGeometryRaw$MH();
        try {
            return (int)mh$.invokeExact(renderer, texture, xy, xy_stride, color, color_stride, uv, uv_stride, num_vertices, indices, num_indices, size_indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$5,"SDL_RenderReadPixels");
    }
    /**
     * {@snippet :
     * int SDL_RenderReadPixels(struct SDL_Renderer* renderer, struct SDL_Rect* rect, unsigned int format, void* pixels, int pitch);
     * }
     */
    public static int SDL_RenderReadPixels(MemorySegment renderer, MemorySegment rect, int format, MemorySegment pixels, int pitch) {
        var mh$ = SDL_RenderReadPixels$MH();
        try {
            return (int)mh$.invokeExact(renderer, rect, format, pixels, pitch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderPresent$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$0,"SDL_RenderPresent");
    }
    /**
     * {@snippet :
     * void SDL_RenderPresent(struct SDL_Renderer* renderer);
     * }
     */
    public static void SDL_RenderPresent(MemorySegment renderer) {
        var mh$ = SDL_RenderPresent$MH();
        try {
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$1,"SDL_DestroyTexture");
    }
    /**
     * {@snippet :
     * void SDL_DestroyTexture(struct SDL_Texture* texture);
     * }
     */
    public static void SDL_DestroyTexture(MemorySegment texture) {
        var mh$ = SDL_DestroyTexture$MH();
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$2,"SDL_DestroyRenderer");
    }
    /**
     * {@snippet :
     * void SDL_DestroyRenderer(struct SDL_Renderer* renderer);
     * }
     */
    public static void SDL_DestroyRenderer(MemorySegment renderer) {
        var mh$ = SDL_DestroyRenderer$MH();
        try {
            mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$3,"SDL_RenderFlush");
    }
    /**
     * {@snippet :
     * int SDL_RenderFlush(struct SDL_Renderer* renderer);
     * }
     */
    public static int SDL_RenderFlush(MemorySegment renderer) {
        var mh$ = SDL_RenderFlush$MH();
        try {
            return (int)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_BindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$4,"SDL_GL_BindTexture");
    }
    /**
     * {@snippet :
     * int SDL_GL_BindTexture(struct SDL_Texture* texture, float* texw, float* texh);
     * }
     */
    public static int SDL_GL_BindTexture(MemorySegment texture, MemorySegment texw, MemorySegment texh) {
        var mh$ = SDL_GL_BindTexture$MH();
        try {
            return (int)mh$.invokeExact(texture, texw, texh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GL_UnbindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$5,"SDL_GL_UnbindTexture");
    }
    /**
     * {@snippet :
     * int SDL_GL_UnbindTexture(struct SDL_Texture* texture);
     * }
     */
    public static int SDL_GL_UnbindTexture(MemorySegment texture) {
        var mh$ = SDL_GL_UnbindTexture$MH();
        try {
            return (int)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetMetalLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$0,"SDL_RenderGetMetalLayer");
    }
    /**
     * {@snippet :
     * void* SDL_RenderGetMetalLayer(struct SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetMetalLayer(MemorySegment renderer) {
        var mh$ = SDL_RenderGetMetalLayer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderGetMetalCommandEncoder$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"SDL_RenderGetMetalCommandEncoder");
    }
    /**
     * {@snippet :
     * void* SDL_RenderGetMetalCommandEncoder(struct SDL_Renderer* renderer);
     * }
     */
    public static MemorySegment SDL_RenderGetMetalCommandEncoder(MemorySegment renderer) {
        var mh$ = SDL_RenderGetMetalCommandEncoder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(renderer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RenderSetVSync$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$2,"SDL_RenderSetVSync");
    }
    /**
     * {@snippet :
     * int SDL_RenderSetVSync(struct SDL_Renderer* renderer, int vsync);
     * }
     */
    public static int SDL_RenderSetVSync(MemorySegment renderer, int vsync) {
        var mh$ = SDL_RenderSetVSync$MH();
        try {
            return (int)mh$.invokeExact(renderer, vsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Init$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$3,"SDL_Init");
    }
    /**
     * {@snippet :
     * int SDL_Init(unsigned int flags);
     * }
     */
    public static int SDL_Init(int flags) {
        var mh$ = SDL_Init$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_InitSubSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$4,"SDL_InitSubSystem");
    }
    /**
     * {@snippet :
     * int SDL_InitSubSystem(unsigned int flags);
     * }
     */
    public static int SDL_InitSubSystem(int flags) {
        var mh$ = SDL_InitSubSystem$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_QuitSubSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$5,"SDL_QuitSubSystem");
    }
    /**
     * {@snippet :
     * void SDL_QuitSubSystem(unsigned int flags);
     * }
     */
    public static void SDL_QuitSubSystem(int flags) {
        var mh$ = SDL_QuitSubSystem$MH();
        try {
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WasInit$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$0,"SDL_WasInit");
    }
    /**
     * {@snippet :
     * unsigned int SDL_WasInit(unsigned int flags);
     * }
     */
    public static int SDL_WasInit(int flags) {
        var mh$ = SDL_WasInit$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_Quit$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$1,"SDL_Quit");
    }
    /**
     * {@snippet :
     * void SDL_Quit();
     * }
     */
    public static void SDL_Quit() {
        var mh$ = SDL_Quit$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define WINAPI_FAMILY_WINRT 0
     * }
     */
    public static int WINAPI_FAMILY_WINRT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_SIZE_MAX -1
     * }
     */
    public static long SDL_SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT8 127
     * }
     */
    public static byte SDL_MAX_SINT8() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT8 -128
     * }
     */
    public static byte SDL_MIN_SINT8() {
        return (byte)-128L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT8 255
     * }
     */
    public static byte SDL_MAX_UINT8() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT8 0
     * }
     */
    public static byte SDL_MIN_UINT8() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT16 32767
     * }
     */
    public static short SDL_MAX_SINT16() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT16 -32768
     * }
     */
    public static short SDL_MIN_SINT16() {
        return (short)-32768L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT16 65535
     * }
     */
    public static short SDL_MAX_UINT16() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT16 0
     * }
     */
    public static short SDL_MIN_UINT16() {
        return (short)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT32 2147483647
     * }
     */
    public static int SDL_MAX_SINT32() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT32 -2147483648
     * }
     */
    public static int SDL_MIN_SINT32() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT32 4294967295
     * }
     */
    public static int SDL_MAX_UINT32() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT32 0
     * }
     */
    public static int SDL_MIN_UINT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT64 9223372036854775807
     * }
     */
    public static long SDL_MAX_SINT64() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT64 -9223372036854775808
     * }
     */
    public static long SDL_MIN_SINT64() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT64 -1
     * }
     */
    public static long SDL_MAX_UINT64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT64 0
     * }
     */
    public static long SDL_MIN_UINT64() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define SDL_FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float SDL_FLT_EPSILON() {
        return 1.1920928955078125E-7f;
    }
    /**
     * {@snippet :
     * #define SDL_PRIs64 "I64d"
     * }
     */
    public static MemorySegment SDL_PRIs64() {
        return constants$174.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_PRIu64 "I64u"
     * }
     */
    public static MemorySegment SDL_PRIu64() {
        return constants$174.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_PRIx64 "I64x"
     * }
     */
    public static MemorySegment SDL_PRIx64() {
        return constants$174.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_PRIX64 "I64X"
     * }
     */
    public static MemorySegment SDL_PRIX64() {
        return constants$174.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_PRIs32 "d"
     * }
     */
    public static MemorySegment SDL_PRIs32() {
        return constants$175.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_PRIu32 "u"
     * }
     */
    public static MemorySegment SDL_PRIu32() {
        return constants$175.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_PRIx32 "x"
     * }
     */
    public static MemorySegment SDL_PRIx32() {
        return constants$175.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_PRIX32 "X"
     * }
     */
    public static MemorySegment SDL_PRIX32() {
        return constants$175.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_ERROR -1
     * }
     */
    public static long SDL_ICONV_ERROR() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_E2BIG -2
     * }
     */
    public static long SDL_ICONV_E2BIG() {
        return -2L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_EILSEQ -3
     * }
     */
    public static long SDL_ICONV_EILSEQ() {
        return -3L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_EINVAL -4
     * }
     */
    public static long SDL_ICONV_EINVAL() {
        return -4L;
    }
    /**
     * {@snippet :
     * #define SDL_MUTEX_MAXWAIT 4294967295
     * }
     */
    public static int SDL_MUTEX_MAXWAIT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_UNKNOWN 0
     * }
     */
    public static int SDL_RWOPS_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_WINFILE 1
     * }
     */
    public static int SDL_RWOPS_WINFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_STDFILE 2
     * }
     */
    public static int SDL_RWOPS_STDFILE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_JNIFILE 3
     * }
     */
    public static int SDL_RWOPS_JNIFILE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY 4
     * }
     */
    public static int SDL_RWOPS_MEMORY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY_RO 5
     * }
     */
    public static int SDL_RWOPS_MEMORY_RO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_UNDEFINED_MASK 536805376
     * }
     */
    public static int SDL_WINDOWPOS_UNDEFINED_MASK() {
        return (int)536805376L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_UNDEFINED 536805376
     * }
     */
    public static int SDL_WINDOWPOS_UNDEFINED() {
        return (int)536805376L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_CENTERED_MASK 805240832
     * }
     */
    public static int SDL_WINDOWPOS_CENTERED_MASK() {
        return (int)805240832L;
    }
    /**
     * {@snippet :
     * #define SDL_WINDOWPOS_CENTERED 805240832
     * }
     */
    public static int SDL_WINDOWPOS_CENTERED() {
        return (int)805240832L;
    }
    /**
     * {@snippet :
     * #define SDLK_SCANCODE_MASK 1073741824
     * }
     */
    public static int SDLK_SCANCODE_MASK() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define SDL_IPHONE_MAX_GFORCE 5.0
     * }
     */
    public static double SDL_IPHONE_MAX_GFORCE() {
        return 5.0d;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MIN -32768
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTUP 3
     * }
     */
    public static int SDL_HAT_RIGHTUP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTDOWN 6
     * }
     */
    public static int SDL_HAT_RIGHTDOWN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTUP 9
     * }
     */
    public static int SDL_HAT_LEFTUP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTDOWN 12
     * }
     */
    public static int SDL_HAT_LEFTDOWN() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define SDL_STANDARD_GRAVITY 9.806650161743164
     * }
     */
    public static float SDL_STANDARD_GRAVITY() {
        return 9.806650161743164f;
    }
    /**
     * {@snippet :
     * #define SDL_TEXTEDITINGEVENT_TEXT_SIZE 32
     * }
     */
    public static int SDL_TEXTEDITINGEVENT_TEXT_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_TEXTINPUTEVENT_TEXT_SIZE 32
     * }
     */
    public static int SDL_TEXTINPUTEVENT_TEXT_SIZE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_QUERY -1
     * }
     */
    public static int SDL_QUERY() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ACCELEROMETER_AS_JOYSTICK "SDL_ACCELEROMETER_AS_JOYSTICK"
     * }
     */
    public static MemorySegment SDL_HINT_ACCELEROMETER_AS_JOYSTICK() {
        return constants$175.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED "SDL_ALLOW_ALT_TAB_WHILE_GRABBED"
     * }
     */
    public static MemorySegment SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED() {
        return constants$175.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ALLOW_TOPMOST "SDL_ALLOW_TOPMOST"
     * }
     */
    public static MemorySegment SDL_HINT_ALLOW_TOPMOST() {
        return constants$176.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION() {
        return constants$176.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION() {
        return constants$176.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_BLOCK_ON_PAUSE "SDL_ANDROID_BLOCK_ON_PAUSE"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_BLOCK_ON_PAUSE() {
        return constants$176.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO "SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO() {
        return constants$176.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ANDROID_TRAP_BACK_BUTTON "SDL_ANDROID_TRAP_BACK_BUTTON"
     * }
     */
    public static MemorySegment SDL_HINT_ANDROID_TRAP_BACK_BUTTON() {
        return constants$176.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APP_NAME "SDL_APP_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_APP_NAME() {
        return constants$177.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS() {
        return constants$177.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"
     * }
     */
    public static MemorySegment SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION() {
        return constants$177.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_CATEGORY "SDL_AUDIO_CATEGORY"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_CATEGORY() {
        return constants$177.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_APP_NAME "SDL_AUDIO_DEVICE_APP_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_APP_NAME() {
        return constants$177.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_STREAM_NAME "SDL_AUDIO_DEVICE_STREAM_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_STREAM_NAME() {
        return constants$177.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE "SDL_AUDIO_DEVICE_STREAM_ROLE"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_DEVICE_STREAM_ROLE() {
        return constants$178.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_RESAMPLING_MODE "SDL_AUDIO_RESAMPLING_MODE"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_RESAMPLING_MODE() {
        return constants$178.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUTO_UPDATE_JOYSTICKS "SDL_AUTO_UPDATE_JOYSTICKS"
     * }
     */
    public static MemorySegment SDL_HINT_AUTO_UPDATE_JOYSTICKS() {
        return constants$178.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUTO_UPDATE_SENSORS "SDL_AUTO_UPDATE_SENSORS"
     * }
     */
    public static MemorySegment SDL_HINT_AUTO_UPDATE_SENSORS() {
        return constants$178.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_BMP_SAVE_LEGACY_FORMAT "SDL_BMP_SAVE_LEGACY_FORMAT"
     * }
     */
    public static MemorySegment SDL_HINT_BMP_SAVE_LEGACY_FORMAT() {
        return constants$178.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_DISPLAY_USABLE_BOUNDS "SDL_DISPLAY_USABLE_BOUNDS"
     * }
     */
    public static MemorySegment SDL_HINT_DISPLAY_USABLE_BOUNDS() {
        return constants$178.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EMSCRIPTEN_ASYNCIFY "SDL_EMSCRIPTEN_ASYNCIFY"
     * }
     */
    public static MemorySegment SDL_HINT_EMSCRIPTEN_ASYNCIFY() {
        return constants$179.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"
     * }
     */
    public static MemorySegment SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT() {
        return constants$179.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ENABLE_SCREEN_KEYBOARD "SDL_ENABLE_SCREEN_KEYBOARD"
     * }
     */
    public static MemorySegment SDL_HINT_ENABLE_SCREEN_KEYBOARD() {
        return constants$179.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ENABLE_STEAM_CONTROLLERS "SDL_ENABLE_STEAM_CONTROLLERS"
     * }
     */
    public static MemorySegment SDL_HINT_ENABLE_STEAM_CONTROLLERS() {
        return constants$179.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_EVENT_LOGGING "SDL_EVENT_LOGGING"
     * }
     */
    public static MemorySegment SDL_HINT_EVENT_LOGGING() {
        return constants$179.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_FORCE_RAISEWINDOW "SDL_HINT_FORCE_RAISEWINDOW"
     * }
     */
    public static MemorySegment SDL_HINT_FORCE_RAISEWINDOW() {
        return constants$179.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_FRAMEBUFFER_ACCELERATION "SDL_FRAMEBUFFER_ACCELERATION"
     * }
     */
    public static MemorySegment SDL_HINT_FRAMEBUFFER_ACCELERATION() {
        return constants$180.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERCONFIG() {
        return constants$180.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERCONFIG_FILE "SDL_GAMECONTROLLERCONFIG_FILE"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERCONFIG_FILE() {
        return constants$180.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLERTYPE "SDL_GAMECONTROLLERTYPE"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLERTYPE() {
        return constants$180.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES "SDL_GAMECONTROLLER_IGNORE_DEVICES"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES() {
        return constants$180.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT() {
        return constants$180.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS "SDL_GAMECONTROLLER_USE_BUTTON_LABELS"
     * }
     */
    public static MemorySegment SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS() {
        return constants$181.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_GRAB_KEYBOARD "SDL_GRAB_KEYBOARD"
     * }
     */
    public static MemorySegment SDL_HINT_GRAB_KEYBOARD() {
        return constants$181.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_HIDAPI_IGNORE_DEVICES "SDL_HIDAPI_IGNORE_DEVICES"
     * }
     */
    public static MemorySegment SDL_HINT_HIDAPI_IGNORE_DEVICES() {
        return constants$181.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IDLE_TIMER_DISABLED "SDL_IOS_IDLE_TIMER_DISABLED"
     * }
     */
    public static MemorySegment SDL_HINT_IDLE_TIMER_DISABLED() {
        return constants$181.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_INTERNAL_EDITING "SDL_IME_INTERNAL_EDITING"
     * }
     */
    public static MemorySegment SDL_HINT_IME_INTERNAL_EDITING() {
        return constants$181.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_SHOW_UI "SDL_IME_SHOW_UI"
     * }
     */
    public static MemorySegment SDL_HINT_IME_SHOW_UI() {
        return constants$181.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IME_SUPPORT_EXTENDED_TEXT "SDL_IME_SUPPORT_EXTENDED_TEXT"
     * }
     */
    public static MemorySegment SDL_HINT_IME_SUPPORT_EXTENDED_TEXT() {
        return constants$182.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_IOS_HIDE_HOME_INDICATOR "SDL_IOS_HIDE_HOME_INDICATOR"
     * }
     */
    public static MemorySegment SDL_HINT_IOS_HIDE_HOME_INDICATOR() {
        return constants$182.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS() {
        return constants$182.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI "SDL_JOYSTICK_HIDAPI"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI() {
        return constants$182.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE "SDL_JOYSTICK_HIDAPI_GAMECUBE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE() {
        return constants$182.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE "SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE() {
        return constants$182.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS "SDL_JOYSTICK_HIDAPI_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS() {
        return constants$183.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS "SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS() {
        return constants$183.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS "SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS() {
        return constants$183.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_LUNA "SDL_JOYSTICK_HIDAPI_LUNA"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_LUNA() {
        return constants$183.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC "SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC() {
        return constants$183.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SHIELD "SDL_JOYSTICK_HIDAPI_SHIELD"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SHIELD() {
        return constants$183.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS3 "SDL_JOYSTICK_HIDAPI_PS3"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS3() {
        return constants$184.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS4 "SDL_JOYSTICK_HIDAPI_PS4"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS4() {
        return constants$184.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE() {
        return constants$184.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5 "SDL_JOYSTICK_HIDAPI_PS5"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5() {
        return constants$184.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED "SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED() {
        return constants$184.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE "SDL_JOYSTICK_HIDAPI_PS5_RUMBLE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE() {
        return constants$184.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_STADIA "SDL_JOYSTICK_HIDAPI_STADIA"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_STADIA() {
        return constants$185.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_STEAM "SDL_JOYSTICK_HIDAPI_STEAM"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_STEAM() {
        return constants$185.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH "SDL_JOYSTICK_HIDAPI_SWITCH"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH() {
        return constants$185.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED "SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED() {
        return constants$185.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED "SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED() {
        return constants$185.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED "SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED() {
        return constants$185.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_WII "SDL_JOYSTICK_HIDAPI_WII"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_WII() {
        return constants$186.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED "SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED() {
        return constants$186.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX "SDL_JOYSTICK_HIDAPI_XBOX"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX() {
        return constants$186.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 "SDL_JOYSTICK_HIDAPI_XBOX_360"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360() {
        return constants$186.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED "SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED() {
        return constants$186.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS "SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS() {
        return constants$186.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE "SDL_JOYSTICK_HIDAPI_XBOX_ONE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE() {
        return constants$187.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED "SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED() {
        return constants$187.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_RAWINPUT "SDL_JOYSTICK_RAWINPUT"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_RAWINPUT() {
        return constants$187.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT "SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT() {
        return constants$187.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_ROG_CHAKRAM "SDL_JOYSTICK_ROG_CHAKRAM"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_ROG_CHAKRAM() {
        return constants$187.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_THREAD "SDL_JOYSTICK_THREAD"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_THREAD() {
        return constants$187.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_WGI "SDL_JOYSTICK_WGI"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_WGI() {
        return constants$188.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER "SDL_KMSDRM_REQUIRE_DRM_MASTER"
     * }
     */
    public static MemorySegment SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER() {
        return constants$188.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_JOYSTICK_DEVICE "SDL_JOYSTICK_DEVICE"
     * }
     */
    public static MemorySegment SDL_HINT_JOYSTICK_DEVICE() {
        return constants$188.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_DIGITAL_HATS "SDL_LINUX_DIGITAL_HATS"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_DIGITAL_HATS() {
        return constants$188.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_HAT_DEADZONES "SDL_LINUX_HAT_DEADZONES"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_HAT_DEADZONES() {
        return constants$188.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_JOYSTICK_CLASSIC "SDL_LINUX_JOYSTICK_CLASSIC"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_JOYSTICK_CLASSIC() {
        return constants$188.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_LINUX_JOYSTICK_DEADZONES "SDL_LINUX_JOYSTICK_DEADZONES"
     * }
     */
    public static MemorySegment SDL_HINT_LINUX_JOYSTICK_DEADZONES() {
        return constants$189.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_BACKGROUND_APP "SDL_MAC_BACKGROUND_APP"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_BACKGROUND_APP() {
        return constants$189.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK() {
        return constants$189.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH "SDL_MAC_OPENGL_ASYNC_DISPATCH"
     * }
     */
    public static MemorySegment SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH() {
        return constants$189.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS "SDL_MOUSE_DOUBLE_CLICK_RADIUS"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS() {
        return constants$189.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME "SDL_MOUSE_DOUBLE_CLICK_TIME"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_DOUBLE_CLICK_TIME() {
        return constants$189.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH "SDL_MOUSE_FOCUS_CLICKTHROUGH"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH() {
        return constants$190.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE "SDL_MOUSE_NORMAL_SPEED_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_NORMAL_SPEED_SCALE() {
        return constants$190.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER "SDL_MOUSE_RELATIVE_MODE_CENTER"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_MODE_CENTER() {
        return constants$190.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_MODE_WARP "SDL_MOUSE_RELATIVE_MODE_WARP"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_MODE_WARP() {
        return constants$190.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SCALING "SDL_MOUSE_RELATIVE_SCALING"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SCALING() {
        return constants$190.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE "SDL_MOUSE_RELATIVE_SPEED_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE() {
        return constants$190.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE "SDL_MOUSE_RELATIVE_SYSTEM_SCALE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE() {
        return constants$191.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION "SDL_MOUSE_RELATIVE_WARP_MOTION"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_RELATIVE_WARP_MOTION() {
        return constants$191.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_TOUCH_EVENTS "SDL_MOUSE_TOUCH_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_TOUCH_EVENTS() {
        return constants$191.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_MOUSE_AUTO_CAPTURE "SDL_MOUSE_AUTO_CAPTURE"
     * }
     */
    public static MemorySegment SDL_HINT_MOUSE_AUTO_CAPTURE() {
        return constants$191.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_NO_SIGNAL_HANDLERS "SDL_NO_SIGNAL_HANDLERS"
     * }
     */
    public static MemorySegment SDL_HINT_NO_SIGNAL_HANDLERS() {
        return constants$191.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_OPENGL_ES_DRIVER "SDL_OPENGL_ES_DRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_OPENGL_ES_DRIVER() {
        return constants$191.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_ORIENTATIONS "SDL_IOS_ORIENTATIONS"
     * }
     */
    public static MemorySegment SDL_HINT_ORIENTATIONS() {
        return constants$192.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_POLL_SENTINEL "SDL_POLL_SENTINEL"
     * }
     */
    public static MemorySegment SDL_HINT_POLL_SENTINEL() {
        return constants$192.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_PREFERRED_LOCALES "SDL_PREFERRED_LOCALES"
     * }
     */
    public static MemorySegment SDL_HINT_PREFERRED_LOCALES() {
        return constants$192.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION "SDL_QTWAYLAND_CONTENT_ORIENTATION"
     * }
     */
    public static MemorySegment SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION() {
        return constants$192.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QTWAYLAND_WINDOW_FLAGS "SDL_QTWAYLAND_WINDOW_FLAGS"
     * }
     */
    public static MemorySegment SDL_HINT_QTWAYLAND_WINDOW_FLAGS() {
        return constants$192.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_BATCHING "SDL_RENDER_BATCHING"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_BATCHING() {
        return constants$192.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_LINE_METHOD "SDL_RENDER_LINE_METHOD"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_LINE_METHOD() {
        return constants$193.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DIRECT3D11_DEBUG "SDL_RENDER_DIRECT3D11_DEBUG"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DIRECT3D11_DEBUG() {
        return constants$193.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DIRECT3D_THREADSAFE "SDL_RENDER_DIRECT3D_THREADSAFE"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DIRECT3D_THREADSAFE() {
        return constants$193.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_DRIVER "SDL_RENDER_DRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_DRIVER() {
        return constants$193.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_LOGICAL_SIZE_MODE "SDL_RENDER_LOGICAL_SIZE_MODE"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_LOGICAL_SIZE_MODE() {
        return constants$193.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_OPENGL_SHADERS "SDL_RENDER_OPENGL_SHADERS"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_OPENGL_SHADERS() {
        return constants$193.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_SCALE_QUALITY "SDL_RENDER_SCALE_QUALITY"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_SCALE_QUALITY() {
        return constants$194.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_VSYNC "SDL_RENDER_VSYNC"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_VSYNC() {
        return constants$194.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE "SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE"
     * }
     */
    public static MemorySegment SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE() {
        return constants$194.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_PS2_DYNAMIC_VSYNC "SDL_PS2_DYNAMIC_VSYNC"
     * }
     */
    public static MemorySegment SDL_HINT_PS2_DYNAMIC_VSYNC() {
        return constants$194.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RETURN_KEY_HIDES_IME "SDL_RETURN_KEY_HIDES_IME"
     * }
     */
    public static MemorySegment SDL_HINT_RETURN_KEY_HIDES_IME() {
        return constants$194.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_RPI_VIDEO_LAYER "SDL_RPI_VIDEO_LAYER"
     * }
     */
    public static MemorySegment SDL_HINT_RPI_VIDEO_LAYER() {
        return constants$194.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME "SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME"
     * }
     */
    public static MemorySegment SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME() {
        return constants$195.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL "SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL() {
        return constants$195.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_PRIORITY_POLICY "SDL_THREAD_PRIORITY_POLICY"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_PRIORITY_POLICY() {
        return constants$195.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_THREAD_STACK_SIZE "SDL_THREAD_STACK_SIZE"
     * }
     */
    public static MemorySegment SDL_HINT_THREAD_STACK_SIZE() {
        return constants$195.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"
     * }
     */
    public static MemorySegment SDL_HINT_TIMER_RESOLUTION() {
        return constants$195.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TOUCH_MOUSE_EVENTS "SDL_TOUCH_MOUSE_EVENTS"
     * }
     */
    public static MemorySegment SDL_HINT_TOUCH_MOUSE_EVENTS() {
        return constants$195.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE"
     * }
     */
    public static MemorySegment SDL_HINT_VITA_TOUCH_MOUSE_DEVICE() {
        return constants$196.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TV_REMOTE_AS_JOYSTICK "SDL_TV_REMOTE_AS_JOYSTICK"
     * }
     */
    public static MemorySegment SDL_HINT_TV_REMOTE_AS_JOYSTICK() {
        return constants$196.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_ALLOW_SCREENSAVER "SDL_VIDEO_ALLOW_SCREENSAVER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_ALLOW_SCREENSAVER() {
        return constants$196.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_DOUBLE_BUFFER "SDL_VIDEO_DOUBLE_BUFFER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_DOUBLE_BUFFER() {
        return constants$196.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY "SDL_VIDEO_EGL_ALLOW_TRANSPARENCY"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY() {
        return constants$196.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_EXTERNAL_CONTEXT "SDL_VIDEO_EXTERNAL_CONTEXT"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_EXTERNAL_CONTEXT() {
        return constants$196.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_HIGHDPI_DISABLED "SDL_VIDEO_HIGHDPI_DISABLED"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_HIGHDPI_DISABLED() {
        return constants$197.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES "SDL_VIDEO_MAC_FULLSCREEN_SPACES"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES() {
        return constants$197.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS() {
        return constants$197.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR "SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR() {
        return constants$197.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR "SDL_VIDEO_WAYLAND_PREFER_LIBDECOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR() {
        return constants$197.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION "SDL_VIDEO_WAYLAND_MODE_EMULATION"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION() {
        return constants$197.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP "SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP() {
        return constants$198.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT() {
        return constants$198.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL "SDL_VIDEO_FOREIGN_WINDOW_OPENGL"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL() {
        return constants$198.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN "SDL_VIDEO_FOREIGN_WINDOW_VULKAN"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN() {
        return constants$198.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_WIN_D3DCOMPILER "SDL_VIDEO_WIN_D3DCOMPILER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_WIN_D3DCOMPILER() {
        return constants$198.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_FORCE_EGL "SDL_VIDEO_X11_FORCE_EGL"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_FORCE_EGL() {
        return constants$198.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR() {
        return constants$199.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_NET_WM_PING "SDL_VIDEO_X11_NET_WM_PING"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_NET_WM_PING() {
        return constants$199.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_WINDOW_VISUALID "SDL_VIDEO_X11_WINDOW_VISUALID"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_WINDOW_VISUALID() {
        return constants$199.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XINERAMA "SDL_VIDEO_X11_XINERAMA"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XINERAMA() {
        return constants$199.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XRANDR "SDL_VIDEO_X11_XRANDR"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XRANDR() {
        return constants$199.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEO_X11_XVIDMODE "SDL_VIDEO_X11_XVIDMODE"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEO_X11_XVIDMODE() {
        return constants$199.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_FACT_CHUNK "SDL_WAVE_FACT_CHUNK"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_FACT_CHUNK() {
        return constants$200.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_RIFF_CHUNK_SIZE "SDL_WAVE_RIFF_CHUNK_SIZE"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_RIFF_CHUNK_SIZE() {
        return constants$200.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WAVE_TRUNCATION "SDL_WAVE_TRUNCATION"
     * }
     */
    public static MemorySegment SDL_HINT_WAVE_TRUNCATION() {
        return constants$200.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING "SDL_WINDOWS_DISABLE_THREAD_NAMING"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING() {
        return constants$200.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS "SDL_WINDOWS_ENABLE_MENU_MNEMONICS"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS() {
        return constants$200.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP "SDL_WINDOWS_ENABLE_MESSAGELOOP"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP() {
        return constants$200.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS "SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS() {
        return constants$201.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL "SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL() {
        return constants$201.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_INTRESOURCE_ICON "SDL_WINDOWS_INTRESOURCE_ICON"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_INTRESOURCE_ICON() {
        return constants$201.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL() {
        return constants$201.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4() {
        return constants$201.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_USE_D3D9EX "SDL_WINDOWS_USE_D3D9EX"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_USE_D3D9EX() {
        return constants$201.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DPI_AWARENESS "SDL_WINDOWS_DPI_AWARENESS"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DPI_AWARENESS() {
        return constants$202.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOWS_DPI_SCALING "SDL_WINDOWS_DPI_SCALING"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOWS_DPI_SCALING() {
        return constants$202.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN() {
        return constants$202.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN "SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN"
     * }
     */
    public static MemorySegment SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN() {
        return constants$202.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_HANDLE_BACK_BUTTON "SDL_WINRT_HANDLE_BACK_BUTTON"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_HANDLE_BACK_BUTTON() {
        return constants$202.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_PRIVACY_POLICY_LABEL "SDL_WINRT_PRIVACY_POLICY_LABEL"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_PRIVACY_POLICY_LABEL() {
        return constants$202.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_WINRT_PRIVACY_POLICY_URL "SDL_WINRT_PRIVACY_POLICY_URL"
     * }
     */
    public static MemorySegment SDL_HINT_WINRT_PRIVACY_POLICY_URL() {
        return constants$203.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT "SDL_X11_FORCE_OVERRIDE_REDIRECT"
     * }
     */
    public static MemorySegment SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT() {
        return constants$203.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"
     * }
     */
    public static MemorySegment SDL_HINT_XINPUT_ENABLED() {
        return constants$203.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_DIRECTINPUT_ENABLED "SDL_DIRECTINPUT_ENABLED"
     * }
     */
    public static MemorySegment SDL_HINT_DIRECTINPUT_ENABLED() {
        return constants$203.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING"
     * }
     */
    public static MemorySegment SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING() {
        return constants$203.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIO_INCLUDE_MONITORS "SDL_AUDIO_INCLUDE_MONITORS"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIO_INCLUDE_MONITORS() {
        return constants$203.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_X11_WINDOW_TYPE "SDL_X11_WINDOW_TYPE"
     * }
     */
    public static MemorySegment SDL_HINT_X11_WINDOW_TYPE() {
        return constants$204.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE "SDL_QUIT_ON_LAST_WINDOW_CLOSE"
     * }
     */
    public static MemorySegment SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE() {
        return constants$204.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_VIDEODRIVER "SDL_VIDEODRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_VIDEODRIVER() {
        return constants$204.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_AUDIODRIVER "SDL_AUDIODRIVER"
     * }
     */
    public static MemorySegment SDL_HINT_AUDIODRIVER() {
        return constants$204.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_KMSDRM_DEVICE_INDEX "SDL_KMSDRM_DEVICE_INDEX"
     * }
     */
    public static MemorySegment SDL_HINT_KMSDRM_DEVICE_INDEX() {
        return constants$204.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY "SDL_TRACKPAD_IS_TOUCH_ONLY"
     * }
     */
    public static MemorySegment SDL_HINT_TRACKPAD_IS_TOUCH_ONLY() {
        return constants$204.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_TIMER 1
     * }
     */
    public static int SDL_INIT_TIMER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_AUDIO 16
     * }
     */
    public static int SDL_INIT_AUDIO() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_VIDEO 32
     * }
     */
    public static int SDL_INIT_VIDEO() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_JOYSTICK 512
     * }
     */
    public static int SDL_INIT_JOYSTICK() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_HAPTIC 4096
     * }
     */
    public static int SDL_INIT_HAPTIC() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_GAMECONTROLLER 8192
     * }
     */
    public static int SDL_INIT_GAMECONTROLLER() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_EVENTS 16384
     * }
     */
    public static int SDL_INIT_EVENTS() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_SENSOR 32768
     * }
     */
    public static int SDL_INIT_SENSOR() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_NOPARACHUTE 1048576
     * }
     */
    public static int SDL_INIT_NOPARACHUTE() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define SDL_INIT_EVERYTHING 62001
     * }
     */
    public static int SDL_INIT_EVERYTHING() {
        return (int)62001L;
    }
}


