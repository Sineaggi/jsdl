// Generated by jextract

package sdl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*SDL_free_func)(void* mem);
 * }
 */
public interface SDL_free_func {

    void apply(java.lang.foreign.MemorySegment mem);
    static MemorySegment allocate(SDL_free_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$2.const$4, fi, constants$1.const$2, scope);
    }
    static SDL_free_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _mem) -> {
            try {
                constants$2.const$5.invokeExact(symbol, _mem);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


