// Generated by jextract

package sdl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class SDL_gamecontroller_h  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define HAVE_WINAPIFAMILY_H 1
     * }
     */
    public static int HAVE_WINAPIFAMILY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WINDOWS__ 1
     * }
     */
    public static int __WINDOWS__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WIN32__ 1
     * }
     */
    public static int __WIN32__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZEOF_VOIDP 8
     * }
     */
    public static int SIZEOF_VOIDP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define HAVE_LIBC 1
     * }
     */
    public static int HAVE_LIBC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDC_HEADERS 1
     * }
     */
    public static int STDC_HEADERS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CTYPE_H 1
     * }
     */
    public static int HAVE_CTYPE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LIMITS_H 1
     * }
     */
    public static int HAVE_LIMITS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MATH_H 1
     * }
     */
    public static int HAVE_MATH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SIGNAL_H 1
     * }
     */
    public static int HAVE_SIGNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STDINT_H 1
     * }
     */
    public static int HAVE_STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STDIO_H 1
     * }
     */
    public static int HAVE_STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRING_H 1
     * }
     */
    public static int HAVE_STRING_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCHAR_H 1
     * }
     */
    public static int HAVE_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MALLOC 1
     * }
     */
    public static int HAVE_MALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CALLOC 1
     * }
     */
    public static int HAVE_CALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_REALLOC 1
     * }
     */
    public static int HAVE_REALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FREE 1
     * }
     */
    public static int HAVE_FREE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ALLOCA 1
     * }
     */
    public static int HAVE_ALLOCA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_QSORT 1
     * }
     */
    public static int HAVE_QSORT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_BSEARCH 1
     * }
     */
    public static int HAVE_BSEARCH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ABS 1
     * }
     */
    public static int HAVE_ABS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMSET 1
     * }
     */
    public static int HAVE_MEMSET() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMCPY 1
     * }
     */
    public static int HAVE_MEMCPY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMMOVE 1
     * }
     */
    public static int HAVE_MEMMOVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MEMCMP 1
     * }
     */
    public static int HAVE_MEMCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSLEN 1
     * }
     */
    public static int HAVE_WCSLEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSDUP 1
     * }
     */
    public static int HAVE__WCSDUP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSDUP 1
     * }
     */
    public static int HAVE_WCSDUP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSSTR 1
     * }
     */
    public static int HAVE_WCSSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSCMP 1
     * }
     */
    public static int HAVE_WCSCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WCSNCMP 1
     * }
     */
    public static int HAVE_WCSNCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSICMP 1
     * }
     */
    public static int HAVE__WCSICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__WCSNICMP 1
     * }
     */
    public static int HAVE__WCSNICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRLEN 1
     * }
     */
    public static int HAVE_STRLEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRREV 1
     * }
     */
    public static int HAVE__STRREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRUPR 1
     * }
     */
    public static int HAVE__STRUPR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRLWR 1
     * }
     */
    public static int HAVE__STRLWR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRCHR 1
     * }
     */
    public static int HAVE_STRCHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRRCHR 1
     * }
     */
    public static int HAVE_STRRCHR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRSTR 1
     * }
     */
    public static int HAVE_STRSTR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ITOA 1
     * }
     */
    public static int HAVE_ITOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__LTOA 1
     * }
     */
    public static int HAVE__LTOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__ULTOA 1
     * }
     */
    public static int HAVE__ULTOA() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOL 1
     * }
     */
    public static int HAVE_STRTOL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOUL 1
     * }
     */
    public static int HAVE_STRTOUL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOLL 1
     * }
     */
    public static int HAVE_STRTOLL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRTOD 1
     * }
     */
    public static int HAVE_STRTOD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATOI 1
     * }
     */
    public static int HAVE_ATOI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATOF 1
     * }
     */
    public static int HAVE_ATOF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRCMP 1
     * }
     */
    public static int HAVE_STRCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_STRNCMP 1
     * }
     */
    public static int HAVE_STRNCMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRICMP 1
     * }
     */
    public static int HAVE__STRICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE__STRNICMP 1
     * }
     */
    public static int HAVE__STRNICMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SSCANF 1
     * }
     */
    public static int HAVE_SSCANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ACOS 1
     * }
     */
    public static int HAVE_ACOS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ACOSF 1
     * }
     */
    public static int HAVE_ACOSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ASIN 1
     * }
     */
    public static int HAVE_ASIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ASINF 1
     * }
     */
    public static int HAVE_ASINF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN 1
     * }
     */
    public static int HAVE_ATAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATANF 1
     * }
     */
    public static int HAVE_ATANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN2 1
     * }
     */
    public static int HAVE_ATAN2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ATAN2F 1
     * }
     */
    public static int HAVE_ATAN2F() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CEIL 1
     * }
     */
    public static int HAVE_CEIL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_CEILF 1
     * }
     */
    public static int HAVE_CEILF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COPYSIGN 1
     * }
     */
    public static int HAVE_COPYSIGN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COPYSIGNF 1
     * }
     */
    public static int HAVE_COPYSIGNF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COS 1
     * }
     */
    public static int HAVE_COS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_COSF 1
     * }
     */
    public static int HAVE_COSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_EXP 1
     * }
     */
    public static int HAVE_EXP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_EXPF 1
     * }
     */
    public static int HAVE_EXPF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FABS 1
     * }
     */
    public static int HAVE_FABS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FABSF 1
     * }
     */
    public static int HAVE_FABSF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FLOOR 1
     * }
     */
    public static int HAVE_FLOOR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FLOORF 1
     * }
     */
    public static int HAVE_FLOORF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FMOD 1
     * }
     */
    public static int HAVE_FMOD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_FMODF 1
     * }
     */
    public static int HAVE_FMODF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG 1
     * }
     */
    public static int HAVE_LOG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOGF 1
     * }
     */
    public static int HAVE_LOGF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG10 1
     * }
     */
    public static int HAVE_LOG10() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LOG10F 1
     * }
     */
    public static int HAVE_LOG10F() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LROUND 1
     * }
     */
    public static int HAVE_LROUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_LROUNDF 1
     * }
     */
    public static int HAVE_LROUNDF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_POW 1
     * }
     */
    public static int HAVE_POW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_POWF 1
     * }
     */
    public static int HAVE_POWF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROUND 1
     * }
     */
    public static int HAVE_ROUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROUNDF 1
     * }
     */
    public static int HAVE_ROUNDF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SCALBN 1
     * }
     */
    public static int HAVE_SCALBN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SCALBNF 1
     * }
     */
    public static int HAVE_SCALBNF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SIN 1
     * }
     */
    public static int HAVE_SIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SINF 1
     * }
     */
    public static int HAVE_SINF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SQRT 1
     * }
     */
    public static int HAVE_SQRT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SQRTF 1
     * }
     */
    public static int HAVE_SQRTF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TAN 1
     * }
     */
    public static int HAVE_TAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TANF 1
     * }
     */
    public static int HAVE_TANF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TRUNC 1
     * }
     */
    public static int HAVE_TRUNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TRUNCF 1
     * }
     */
    public static int HAVE_TRUNCF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_IMMINTRIN_H 1
     * }
     */
    public static int HAVE_IMMINTRIN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D_H 1
     * }
     */
    public static int HAVE_D3D_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D11_H 1
     * }
     */
    public static int HAVE_D3D11_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_D3D12_H 1
     * }
     */
    public static int HAVE_D3D12_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DDRAW_H 1
     * }
     */
    public static int HAVE_DDRAW_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DSOUND_H 1
     * }
     */
    public static int HAVE_DSOUND_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DINPUT_H 1
     * }
     */
    public static int HAVE_DINPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_XINPUT_H 1
     * }
     */
    public static int HAVE_XINPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_WINDOWS_GAMING_INPUT_H 1
     * }
     */
    public static int HAVE_WINDOWS_GAMING_INPUT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_DXGI_H 1
     * }
     */
    public static int HAVE_DXGI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_MMDEVICEAPI_H 1
     * }
     */
    public static int HAVE_MMDEVICEAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_AUDIOCLIENT_H 1
     * }
     */
    public static int HAVE_AUDIOCLIENT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_TPCSHRD_H 1
     * }
     */
    public static int HAVE_TPCSHRD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SENSORSAPI_H 1
     * }
     */
    public static int HAVE_SENSORSAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_ROAPI_H 1
     * }
     */
    public static int HAVE_ROAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define HAVE_SHELLSCALINGAPI_H 1
     * }
     */
    public static int HAVE_SHELLSCALINGAPI_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DISK 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DISK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DSOUND 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DSOUND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_WASAPI 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_WASAPI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_AUDIO_DRIVER_WINMM 1
     * }
     */
    public static int SDL_AUDIO_DRIVER_WINMM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_WGI 1
     * }
     */
    public static int SDL_JOYSTICK_WGI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_DINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_DINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_XINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_XINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_HIDAPI 1
     * }
     */
    public static int SDL_JOYSTICK_HIDAPI() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_RAWINPUT 1
     * }
     */
    public static int SDL_JOYSTICK_RAWINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_VIRTUAL 1
     * }
     */
    public static int SDL_JOYSTICK_VIRTUAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_DINPUT 1
     * }
     */
    public static int SDL_HAPTIC_DINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAPTIC_XINPUT 1
     * }
     */
    public static int SDL_HAPTIC_XINPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_SENSOR_WINDOWS 1
     * }
     */
    public static int SDL_SENSOR_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_LOADSO_WINDOWS 1
     * }
     */
    public static int SDL_LOADSO_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_THREAD_GENERIC_COND_SUFFIX 1
     * }
     */
    public static int SDL_THREAD_GENERIC_COND_SUFFIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_THREAD_WINDOWS 1
     * }
     */
    public static int SDL_THREAD_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_TIMER_WINDOWS 1
     * }
     */
    public static int SDL_TIMER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_DUMMY 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_DUMMY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_OFFSCREEN 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_OFFSCREEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_DRIVER_WINDOWS 1
     * }
     */
    public static int SDL_VIDEO_DRIVER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D11 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_D3D12 1
     * }
     */
    public static int SDL_VIDEO_RENDER_D3D12() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_OGL 1
     * }
     */
    public static int SDL_VIDEO_RENDER_OGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_RENDER_OGL_ES2 1
     * }
     */
    public static int SDL_VIDEO_RENDER_OGL_ES2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_ES2 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_ES2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_WGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_WGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIDEO_OPENGL_EGL 1
     * }
     */
    public static int SDL_VIDEO_OPENGL_EGL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_POWER_WINDOWS 1
     * }
     */
    public static int SDL_POWER_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_FILESYSTEM_WINDOWS 1
     * }
     */
    public static int SDL_FILESYSTEM_WINDOWS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_SET 0
     * }
     */
    public static int RW_SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_CUR 1
     * }
     */
    public static int RW_SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RW_SEEK_END 2
     * }
     */
    public static int RW_SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_MUTEX_TIMEDOUT 1
     * }
     */
    public static int SDL_MUTEX_TIMEDOUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_VIRTUAL_JOYSTICK_DESC_VERSION 1
     * }
     */
    public static int SDL_VIRTUAL_JOYSTICK_DESC_VERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MAX 32767
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_CENTERED 0
     * }
     */
    public static int SDL_HAT_CENTERED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_UP 1
     * }
     */
    public static int SDL_HAT_UP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHT 2
     * }
     */
    public static int SDL_HAT_RIGHT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_DOWN 4
     * }
     */
    public static int SDL_HAT_DOWN() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFT 8
     * }
     */
    public static int SDL_HAT_LEFT() {
        return (int)8L;
    }
    public static MethodHandle SDL_GetPlatform$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"SDL_GetPlatform");
    }
    /**
     * {@snippet :
     * char* SDL_GetPlatform();
     * }
     */
    public static MemorySegment SDL_GetPlatform() {
        var mh$ = SDL_GetPlatform$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_bool.SDL_FALSE = 0;
     * }
     */
    public static int SDL_FALSE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_bool.SDL_TRUE = 1;
     * }
     */
    public static int SDL_TRUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * typedef signed char Sint8;
     * }
     */
    public static final OfByte Sint8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char Uint8;
     * }
     */
    public static final OfByte Uint8 = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short Sint16;
     * }
     */
    public static final OfShort Sint16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short Uint16;
     * }
     */
    public static final OfShort Uint16 = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int Sint32;
     * }
     */
    public static final OfInt Sint32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int Uint32;
     * }
     */
    public static final OfInt Uint32 = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long Sint64;
     * }
     */
    public static final OfLong Sint64 = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long Uint64;
     * }
     */
    public static final OfLong Uint64 = JAVA_LONG;
    /**
     * {@snippet :
     * enum SDL_DUMMY_ENUM.DUMMY_ENUM_VALUE = 0;
     * }
     */
    public static int DUMMY_ENUM_VALUE() {
        return (int)0L;
    }
    public static MethodHandle SDL_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"SDL_malloc");
    }
    /**
     * {@snippet :
     * void* SDL_malloc(unsigned long long size);
     * }
     */
    public static MemorySegment SDL_malloc(long size) {
        var mh$ = SDL_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$5,"SDL_calloc");
    }
    /**
     * {@snippet :
     * void* SDL_calloc(unsigned long long nmemb, unsigned long long size);
     * }
     */
    public static MemorySegment SDL_calloc(long nmemb, long size) {
        var mh$ = SDL_calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(nmemb, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$1,"SDL_realloc");
    }
    /**
     * {@snippet :
     * void* SDL_realloc(void* mem, unsigned long long size);
     * }
     */
    public static MemorySegment SDL_realloc(MemorySegment mem, long size) {
        var mh$ = SDL_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$3,"SDL_free");
    }
    /**
     * {@snippet :
     * void SDL_free(void* mem);
     * }
     */
    public static void SDL_free(MemorySegment mem) {
        var mh$ = SDL_free$MH();
        try {
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetOriginalMemoryFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$5,"SDL_GetOriginalMemoryFunctions");
    }
    /**
     * {@snippet :
     * void SDL_GetOriginalMemoryFunctions(void* (**malloc_func)(unsigned long long), void* (**calloc_func)(unsigned long long,unsigned long long), void* (**realloc_func)(void*,unsigned long long), void (**free_func)(void*));
     * }
     */
    public static void SDL_GetOriginalMemoryFunctions(MemorySegment malloc_func, MemorySegment calloc_func, MemorySegment realloc_func, MemorySegment free_func) {
        var mh$ = SDL_GetOriginalMemoryFunctions$MH();
        try {
            mh$.invokeExact(malloc_func, calloc_func, realloc_func, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetMemoryFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$4,"SDL_GetMemoryFunctions");
    }
    /**
     * {@snippet :
     * void SDL_GetMemoryFunctions(void* (**malloc_func)(unsigned long long), void* (**calloc_func)(unsigned long long,unsigned long long), void* (**realloc_func)(void*,unsigned long long), void (**free_func)(void*));
     * }
     */
    public static void SDL_GetMemoryFunctions(MemorySegment malloc_func, MemorySegment calloc_func, MemorySegment realloc_func, MemorySegment free_func) {
        var mh$ = SDL_GetMemoryFunctions$MH();
        try {
            mh$.invokeExact(malloc_func, calloc_func, realloc_func, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetMemoryFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$4,"SDL_SetMemoryFunctions");
    }
    /**
     * {@snippet :
     * int SDL_SetMemoryFunctions(void* (*malloc_func)(unsigned long long), void* (*calloc_func)(unsigned long long,unsigned long long), void* (*realloc_func)(void*,unsigned long long), void (*free_func)(void*));
     * }
     */
    public static int SDL_SetMemoryFunctions(MemorySegment malloc_func, MemorySegment calloc_func, MemorySegment realloc_func, MemorySegment free_func) {
        var mh$ = SDL_SetMemoryFunctions$MH();
        try {
            return (int)mh$.invokeExact(malloc_func, calloc_func, realloc_func, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetNumAllocations$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$6,"SDL_GetNumAllocations");
    }
    /**
     * {@snippet :
     * int SDL_GetNumAllocations();
     * }
     */
    public static int SDL_GetNumAllocations() {
        var mh$ = SDL_GetNumAllocations$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$1,"SDL_getenv");
    }
    /**
     * {@snippet :
     * char* SDL_getenv(char* name);
     * }
     */
    public static MemorySegment SDL_getenv(MemorySegment name) {
        var mh$ = SDL_getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$6.const$3,"SDL_setenv");
    }
    /**
     * {@snippet :
     * int SDL_setenv(char* name, char* value, int overwrite);
     * }
     */
    public static int SDL_setenv(MemorySegment name, MemorySegment value, int overwrite) {
        var mh$ = SDL_setenv$MH();
        try {
            return (int)mh$.invokeExact(name, value, overwrite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$2,"SDL_qsort");
    }
    /**
     * {@snippet :
     * void SDL_qsort(void* base, unsigned long long nmemb, unsigned long long size, int (*compare)(void*,void*));
     * }
     */
    public static void SDL_qsort(MemorySegment base, long nmemb, long size, MemorySegment compare) {
        var mh$ = SDL_qsort$MH();
        try {
            mh$.invokeExact(base, nmemb, size, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$7.const$5,"SDL_bsearch");
    }
    /**
     * {@snippet :
     * void* SDL_bsearch(void* key, void* base, unsigned long long nmemb, unsigned long long size, int (*compare)(void*,void*));
     * }
     */
    public static MemorySegment SDL_bsearch(MemorySegment key, MemorySegment base, long nmemb, long size, MemorySegment compare) {
        var mh$ = SDL_bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key, base, nmemb, size, compare);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_abs$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$1,"SDL_abs");
    }
    /**
     * {@snippet :
     * int SDL_abs(int x);
     * }
     */
    public static int SDL_abs(int x) {
        var mh$ = SDL_abs$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$2,"SDL_isalpha");
    }
    /**
     * {@snippet :
     * int SDL_isalpha(int x);
     * }
     */
    public static int SDL_isalpha(int x) {
        var mh$ = SDL_isalpha$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$3,"SDL_isalnum");
    }
    /**
     * {@snippet :
     * int SDL_isalnum(int x);
     * }
     */
    public static int SDL_isalnum(int x) {
        var mh$ = SDL_isalnum$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$4,"SDL_isblank");
    }
    /**
     * {@snippet :
     * int SDL_isblank(int x);
     * }
     */
    public static int SDL_isblank(int x) {
        var mh$ = SDL_isblank$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$8.const$5,"SDL_iscntrl");
    }
    /**
     * {@snippet :
     * int SDL_iscntrl(int x);
     * }
     */
    public static int SDL_iscntrl(int x) {
        var mh$ = SDL_iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$0,"SDL_isdigit");
    }
    /**
     * {@snippet :
     * int SDL_isdigit(int x);
     * }
     */
    public static int SDL_isdigit(int x) {
        var mh$ = SDL_isdigit$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"SDL_isxdigit");
    }
    /**
     * {@snippet :
     * int SDL_isxdigit(int x);
     * }
     */
    public static int SDL_isxdigit(int x) {
        var mh$ = SDL_isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"SDL_ispunct");
    }
    /**
     * {@snippet :
     * int SDL_ispunct(int x);
     * }
     */
    public static int SDL_ispunct(int x) {
        var mh$ = SDL_ispunct$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"SDL_isspace");
    }
    /**
     * {@snippet :
     * int SDL_isspace(int x);
     * }
     */
    public static int SDL_isspace(int x) {
        var mh$ = SDL_isspace$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"SDL_isupper");
    }
    /**
     * {@snippet :
     * int SDL_isupper(int x);
     * }
     */
    public static int SDL_isupper(int x) {
        var mh$ = SDL_isupper$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_islower$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$5,"SDL_islower");
    }
    /**
     * {@snippet :
     * int SDL_islower(int x);
     * }
     */
    public static int SDL_islower(int x) {
        var mh$ = SDL_islower$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$0,"SDL_isprint");
    }
    /**
     * {@snippet :
     * int SDL_isprint(int x);
     * }
     */
    public static int SDL_isprint(int x) {
        var mh$ = SDL_isprint$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"SDL_isgraph");
    }
    /**
     * {@snippet :
     * int SDL_isgraph(int x);
     * }
     */
    public static int SDL_isgraph(int x) {
        var mh$ = SDL_isgraph$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"SDL_toupper");
    }
    /**
     * {@snippet :
     * int SDL_toupper(int x);
     * }
     */
    public static int SDL_toupper(int x) {
        var mh$ = SDL_toupper$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3,"SDL_tolower");
    }
    /**
     * {@snippet :
     * int SDL_tolower(int x);
     * }
     */
    public static int SDL_tolower(int x) {
        var mh$ = SDL_tolower$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_crc16$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"SDL_crc16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_crc16(unsigned short crc, void* data, unsigned long long len);
     * }
     */
    public static short SDL_crc16(short crc, MemorySegment data, long len) {
        var mh$ = SDL_crc16$MH();
        try {
            return (short)mh$.invokeExact(crc, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_crc32$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"SDL_crc32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_crc32(unsigned int crc, void* data, unsigned long long len);
     * }
     */
    public static int SDL_crc32(int crc, MemorySegment data, long len) {
        var mh$ = SDL_crc32$MH();
        try {
            return (int)mh$.invokeExact(crc, data, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memset$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"SDL_memset");
    }
    /**
     * {@snippet :
     * void* SDL_memset(void* dst, int c, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memset(MemorySegment dst, int c, long len) {
        var mh$ = SDL_memset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, c, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"SDL_memcpy");
    }
    /**
     * {@snippet :
     * void* SDL_memcpy(void* dst, void* src, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memcpy(MemorySegment dst, MemorySegment src, long len) {
        var mh$ = SDL_memcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, src, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"SDL_memmove");
    }
    /**
     * {@snippet :
     * void* SDL_memmove(void* dst, void* src, unsigned long long len);
     * }
     */
    public static MemorySegment SDL_memmove(MemorySegment dst, MemorySegment src, long len) {
        var mh$ = SDL_memmove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dst, src, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"SDL_memcmp");
    }
    /**
     * {@snippet :
     * int SDL_memcmp(void* s1, void* s2, unsigned long long len);
     * }
     */
    public static int SDL_memcmp(MemorySegment s1, MemorySegment s2, long len) {
        var mh$ = SDL_memcmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"SDL_wcslen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslen(unsigned short* wstr);
     * }
     */
    public static long SDL_wcslen(MemorySegment wstr) {
        var mh$ = SDL_wcslen$MH();
        try {
            return (long)mh$.invokeExact(wstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$6,"SDL_wcslcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslcpy(unsigned short* dst, unsigned short* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_wcslcpy(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_wcslcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcslcat$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"SDL_wcslcat");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_wcslcat(unsigned short* dst, unsigned short* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_wcslcat(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_wcslcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"SDL_wcsdup");
    }
    /**
     * {@snippet :
     * unsigned short* SDL_wcsdup(unsigned short* wstr);
     * }
     */
    public static MemorySegment SDL_wcsdup(MemorySegment wstr) {
        var mh$ = SDL_wcsdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(wstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"SDL_wcsstr");
    }
    /**
     * {@snippet :
     * unsigned short* SDL_wcsstr(unsigned short* haystack, unsigned short* needle);
     * }
     */
    public static MemorySegment SDL_wcsstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_wcsstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcscmp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"SDL_wcscmp");
    }
    /**
     * {@snippet :
     * int SDL_wcscmp(unsigned short* str1, unsigned short* str2);
     * }
     */
    public static int SDL_wcscmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_wcscmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"SDL_wcsncmp");
    }
    /**
     * {@snippet :
     * int SDL_wcsncmp(unsigned short* str1, unsigned short* str2, unsigned long long maxlen);
     * }
     */
    public static int SDL_wcsncmp(MemorySegment str1, MemorySegment str2, long maxlen) {
        var mh$ = SDL_wcsncmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcscasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0,"SDL_wcscasecmp");
    }
    /**
     * {@snippet :
     * int SDL_wcscasecmp(unsigned short* str1, unsigned short* str2);
     * }
     */
    public static int SDL_wcscasecmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_wcscasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_wcsncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"SDL_wcsncasecmp");
    }
    /**
     * {@snippet :
     * int SDL_wcsncasecmp(unsigned short* str1, unsigned short* str2, unsigned long long len);
     * }
     */
    public static int SDL_wcsncasecmp(MemorySegment str1, MemorySegment str2, long len) {
        var mh$ = SDL_wcsncasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"SDL_strlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlen(char* str);
     * }
     */
    public static long SDL_strlen(MemorySegment str) {
        var mh$ = SDL_strlen$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"SDL_strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlcpy(char* dst, char* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_strlcpy(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"SDL_utf8strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strlcpy(char* dst, char* src, unsigned long long dst_bytes);
     * }
     */
    public static long SDL_utf8strlcpy(MemorySegment dst, MemorySegment src, long dst_bytes) {
        var mh$ = SDL_utf8strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, dst_bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"SDL_strlcat");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strlcat(char* dst, char* src, unsigned long long maxlen);
     * }
     */
    public static long SDL_strlcat(MemorySegment dst, MemorySegment src, long maxlen) {
        var mh$ = SDL_strlcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"SDL_strdup");
    }
    /**
     * {@snippet :
     * char* SDL_strdup(char* str);
     * }
     */
    public static MemorySegment SDL_strdup(MemorySegment str) {
        var mh$ = SDL_strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"SDL_strrev");
    }
    /**
     * {@snippet :
     * char* SDL_strrev(char* str);
     * }
     */
    public static MemorySegment SDL_strrev(MemorySegment str) {
        var mh$ = SDL_strrev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"SDL_strupr");
    }
    /**
     * {@snippet :
     * char* SDL_strupr(char* str);
     * }
     */
    public static MemorySegment SDL_strupr(MemorySegment str) {
        var mh$ = SDL_strupr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"SDL_strlwr");
    }
    /**
     * {@snippet :
     * char* SDL_strlwr(char* str);
     * }
     */
    public static MemorySegment SDL_strlwr(MemorySegment str) {
        var mh$ = SDL_strlwr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"SDL_strchr");
    }
    /**
     * {@snippet :
     * char* SDL_strchr(char* str, int c);
     * }
     */
    public static MemorySegment SDL_strchr(MemorySegment str, int c) {
        var mh$ = SDL_strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$0,"SDL_strrchr");
    }
    /**
     * {@snippet :
     * char* SDL_strrchr(char* str, int c);
     * }
     */
    public static MemorySegment SDL_strrchr(MemorySegment str, int c) {
        var mh$ = SDL_strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"SDL_strstr");
    }
    /**
     * {@snippet :
     * char* SDL_strstr(char* haystack, char* needle);
     * }
     */
    public static MemorySegment SDL_strstr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcasestr$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"SDL_strcasestr");
    }
    /**
     * {@snippet :
     * char* SDL_strcasestr(char* haystack, char* needle);
     * }
     */
    public static MemorySegment SDL_strcasestr(MemorySegment haystack, MemorySegment needle) {
        var mh$ = SDL_strcasestr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtokr$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"SDL_strtokr");
    }
    /**
     * {@snippet :
     * char* SDL_strtokr(char* s1, char* s2, char** saveptr);
     * }
     */
    public static MemorySegment SDL_strtokr(MemorySegment s1, MemorySegment s2, MemorySegment saveptr) {
        var mh$ = SDL_strtokr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s1, s2, saveptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"SDL_utf8strlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strlen(char* str);
     * }
     */
    public static long SDL_utf8strlen(MemorySegment str) {
        var mh$ = SDL_utf8strlen$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_utf8strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"SDL_utf8strnlen");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_utf8strnlen(char* str, unsigned long long bytes);
     * }
     */
    public static long SDL_utf8strnlen(MemorySegment str, long bytes) {
        var mh$ = SDL_utf8strnlen$MH();
        try {
            return (long)mh$.invokeExact(str, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_itoa$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"SDL_itoa");
    }
    /**
     * {@snippet :
     * char* SDL_itoa(int value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_itoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_itoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_uitoa$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"SDL_uitoa");
    }
    /**
     * {@snippet :
     * char* SDL_uitoa(unsigned int value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_uitoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_uitoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"SDL_ltoa");
    }
    /**
     * {@snippet :
     * char* SDL_ltoa(long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ltoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_ltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ultoa$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"SDL_ultoa");
    }
    /**
     * {@snippet :
     * char* SDL_ultoa(unsigned long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ultoa(int value, MemorySegment str, int radix) {
        var mh$ = SDL_ultoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"SDL_lltoa");
    }
    /**
     * {@snippet :
     * char* SDL_lltoa(long long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_lltoa(long value, MemorySegment str, int radix) {
        var mh$ = SDL_lltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ulltoa$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"SDL_ulltoa");
    }
    /**
     * {@snippet :
     * char* SDL_ulltoa(unsigned long long value, char* str, int radix);
     * }
     */
    public static MemorySegment SDL_ulltoa(long value, MemorySegment str, int radix) {
        var mh$ = SDL_ulltoa$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, str, radix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"SDL_atoi");
    }
    /**
     * {@snippet :
     * int SDL_atoi(char* str);
     * }
     */
    public static int SDL_atoi(MemorySegment str) {
        var mh$ = SDL_atoi$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atof$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"SDL_atof");
    }
    /**
     * {@snippet :
     * double SDL_atof(char* str);
     * }
     */
    public static double SDL_atof(MemorySegment str) {
        var mh$ = SDL_atof$MH();
        try {
            return (double)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"SDL_strtol");
    }
    /**
     * {@snippet :
     * long SDL_strtol(char* str, char** endp, int base);
     * }
     */
    public static int SDL_strtol(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtol$MH();
        try {
            return (int)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"SDL_strtoul");
    }
    /**
     * {@snippet :
     * unsigned long SDL_strtoul(char* str, char** endp, int base);
     * }
     */
    public static int SDL_strtoul(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoul$MH();
        try {
            return (int)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"SDL_strtoll");
    }
    /**
     * {@snippet :
     * long long SDL_strtoll(char* str, char** endp, int base);
     * }
     */
    public static long SDL_strtoll(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoll$MH();
        try {
            return (long)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"SDL_strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_strtoull(char* str, char** endp, int base);
     * }
     */
    public static long SDL_strtoull(MemorySegment str, MemorySegment endp, int base) {
        var mh$ = SDL_strtoull$MH();
        try {
            return (long)mh$.invokeExact(str, endp, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"SDL_strtod");
    }
    /**
     * {@snippet :
     * double SDL_strtod(char* str, char** endp);
     * }
     */
    public static double SDL_strtod(MemorySegment str, MemorySegment endp) {
        var mh$ = SDL_strtod$MH();
        try {
            return (double)mh$.invokeExact(str, endp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"SDL_strcmp");
    }
    /**
     * {@snippet :
     * int SDL_strcmp(char* str1, char* str2);
     * }
     */
    public static int SDL_strcmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_strcmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"SDL_strncmp");
    }
    /**
     * {@snippet :
     * int SDL_strncmp(char* str1, char* str2, unsigned long long maxlen);
     * }
     */
    public static int SDL_strncmp(MemorySegment str1, MemorySegment str2, long maxlen) {
        var mh$ = SDL_strncmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"SDL_strcasecmp");
    }
    /**
     * {@snippet :
     * int SDL_strcasecmp(char* str1, char* str2);
     * }
     */
    public static int SDL_strcasecmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = SDL_strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"SDL_strncasecmp");
    }
    /**
     * {@snippet :
     * int SDL_strncasecmp(char* str1, char* str2, unsigned long long len);
     * }
     */
    public static int SDL_strncasecmp(MemorySegment str1, MemorySegment str2, long len) {
        var mh$ = SDL_strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(str1, str2, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"SDL_sscanf");
    }
    /**
     * {@snippet :
     * int SDL_sscanf(char* text, char* fmt,...);
     * }
     */
    public static int SDL_sscanf(MemorySegment text, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_sscanf$MH();
        try {
            return (int)mh$.invokeExact(text, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"SDL_vsscanf");
    }
    /**
     * {@snippet :
     * int SDL_vsscanf(char* text, char* fmt, char* ap);
     * }
     */
    public static int SDL_vsscanf(MemorySegment text, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vsscanf$MH();
        try {
            return (int)mh$.invokeExact(text, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"SDL_snprintf");
    }
    /**
     * {@snippet :
     * int SDL_snprintf(char* text, unsigned long long maxlen, char* fmt,...);
     * }
     */
    public static int SDL_snprintf(MemorySegment text, long maxlen, MemorySegment fmt, Object... x3) {
        var mh$ = SDL_snprintf$MH();
        try {
            return (int)mh$.invokeExact(text, maxlen, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"SDL_vsnprintf");
    }
    /**
     * {@snippet :
     * int SDL_vsnprintf(char* text, unsigned long long maxlen, char* fmt, char* ap);
     * }
     */
    public static int SDL_vsnprintf(MemorySegment text, long maxlen, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(text, maxlen, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"SDL_asprintf");
    }
    /**
     * {@snippet :
     * int SDL_asprintf(char** strp, char* fmt,...);
     * }
     */
    public static int SDL_asprintf(MemorySegment strp, MemorySegment fmt, Object... x2) {
        var mh$ = SDL_asprintf$MH();
        try {
            return (int)mh$.invokeExact(strp, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"SDL_vasprintf");
    }
    /**
     * {@snippet :
     * int SDL_vasprintf(char** strp, char* fmt, char* ap);
     * }
     */
    public static int SDL_vasprintf(MemorySegment strp, MemorySegment fmt, MemorySegment ap) {
        var mh$ = SDL_vasprintf$MH();
        try {
            return (int)mh$.invokeExact(strp, fmt, ap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_acos$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"SDL_acos");
    }
    /**
     * {@snippet :
     * double SDL_acos(double x);
     * }
     */
    public static double SDL_acos(double x) {
        var mh$ = SDL_acos$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"SDL_acosf");
    }
    /**
     * {@snippet :
     * float SDL_acosf(float x);
     * }
     */
    public static float SDL_acosf(float x) {
        var mh$ = SDL_acosf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asin$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"SDL_asin");
    }
    /**
     * {@snippet :
     * double SDL_asin(double x);
     * }
     */
    public static double SDL_asin(double x) {
        var mh$ = SDL_asin$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3,"SDL_asinf");
    }
    /**
     * {@snippet :
     * float SDL_asinf(float x);
     * }
     */
    public static float SDL_asinf(float x) {
        var mh$ = SDL_asinf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"SDL_atan");
    }
    /**
     * {@snippet :
     * double SDL_atan(double x);
     * }
     */
    public static double SDL_atan(double x) {
        var mh$ = SDL_atan$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"SDL_atanf");
    }
    /**
     * {@snippet :
     * float SDL_atanf(float x);
     * }
     */
    public static float SDL_atanf(float x) {
        var mh$ = SDL_atanf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"SDL_atan2");
    }
    /**
     * {@snippet :
     * double SDL_atan2(double y, double x);
     * }
     */
    public static double SDL_atan2(double y, double x) {
        var mh$ = SDL_atan2$MH();
        try {
            return (double)mh$.invokeExact(y, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"SDL_atan2f");
    }
    /**
     * {@snippet :
     * float SDL_atan2f(float y, float x);
     * }
     */
    public static float SDL_atan2f(float y, float x) {
        var mh$ = SDL_atan2f$MH();
        try {
            return (float)mh$.invokeExact(y, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"SDL_ceil");
    }
    /**
     * {@snippet :
     * double SDL_ceil(double x);
     * }
     */
    public static double SDL_ceil(double x) {
        var mh$ = SDL_ceil$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"SDL_ceilf");
    }
    /**
     * {@snippet :
     * float SDL_ceilf(float x);
     * }
     */
    public static float SDL_ceilf(float x) {
        var mh$ = SDL_ceilf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"SDL_copysign");
    }
    /**
     * {@snippet :
     * double SDL_copysign(double x, double y);
     * }
     */
    public static double SDL_copysign(double x, double y) {
        var mh$ = SDL_copysign$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"SDL_copysignf");
    }
    /**
     * {@snippet :
     * float SDL_copysignf(float x, float y);
     * }
     */
    public static float SDL_copysignf(float x, float y) {
        var mh$ = SDL_copysignf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_cos$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"SDL_cos");
    }
    /**
     * {@snippet :
     * double SDL_cos(double x);
     * }
     */
    public static double SDL_cos(double x) {
        var mh$ = SDL_cos$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"SDL_cosf");
    }
    /**
     * {@snippet :
     * float SDL_cosf(float x);
     * }
     */
    public static float SDL_cosf(float x) {
        var mh$ = SDL_cosf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"SDL_exp");
    }
    /**
     * {@snippet :
     * double SDL_exp(double x);
     * }
     */
    public static double SDL_exp(double x) {
        var mh$ = SDL_exp$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_expf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"SDL_expf");
    }
    /**
     * {@snippet :
     * float SDL_expf(float x);
     * }
     */
    public static float SDL_expf(float x) {
        var mh$ = SDL_expf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"SDL_fabs");
    }
    /**
     * {@snippet :
     * double SDL_fabs(double x);
     * }
     */
    public static double SDL_fabs(double x) {
        var mh$ = SDL_fabs$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"SDL_fabsf");
    }
    /**
     * {@snippet :
     * float SDL_fabsf(float x);
     * }
     */
    public static float SDL_fabsf(float x) {
        var mh$ = SDL_fabsf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_floor$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"SDL_floor");
    }
    /**
     * {@snippet :
     * double SDL_floor(double x);
     * }
     */
    public static double SDL_floor(double x) {
        var mh$ = SDL_floor$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"SDL_floorf");
    }
    /**
     * {@snippet :
     * float SDL_floorf(float x);
     * }
     */
    public static float SDL_floorf(float x) {
        var mh$ = SDL_floorf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"SDL_trunc");
    }
    /**
     * {@snippet :
     * double SDL_trunc(double x);
     * }
     */
    public static double SDL_trunc(double x) {
        var mh$ = SDL_trunc$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"SDL_truncf");
    }
    /**
     * {@snippet :
     * float SDL_truncf(float x);
     * }
     */
    public static float SDL_truncf(float x) {
        var mh$ = SDL_truncf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"SDL_fmod");
    }
    /**
     * {@snippet :
     * double SDL_fmod(double x, double y);
     * }
     */
    public static double SDL_fmod(double x, double y) {
        var mh$ = SDL_fmod$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"SDL_fmodf");
    }
    /**
     * {@snippet :
     * float SDL_fmodf(float x, float y);
     * }
     */
    public static float SDL_fmodf(float x, float y) {
        var mh$ = SDL_fmodf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2,"SDL_log");
    }
    /**
     * {@snippet :
     * double SDL_log(double x);
     * }
     */
    public static double SDL_log(double x) {
        var mh$ = SDL_log$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_logf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"SDL_logf");
    }
    /**
     * {@snippet :
     * float SDL_logf(float x);
     * }
     */
    public static float SDL_logf(float x) {
        var mh$ = SDL_logf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log10$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"SDL_log10");
    }
    /**
     * {@snippet :
     * double SDL_log10(double x);
     * }
     */
    public static double SDL_log10(double x) {
        var mh$ = SDL_log10$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"SDL_log10f");
    }
    /**
     * {@snippet :
     * float SDL_log10f(float x);
     * }
     */
    public static float SDL_log10f(float x) {
        var mh$ = SDL_log10f$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_pow$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"SDL_pow");
    }
    /**
     * {@snippet :
     * double SDL_pow(double x, double y);
     * }
     */
    public static double SDL_pow(double x, double y) {
        var mh$ = SDL_pow$MH();
        try {
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_powf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"SDL_powf");
    }
    /**
     * {@snippet :
     * float SDL_powf(float x, float y);
     * }
     */
    public static float SDL_powf(float x, float y) {
        var mh$ = SDL_powf$MH();
        try {
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_round$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"SDL_round");
    }
    /**
     * {@snippet :
     * double SDL_round(double x);
     * }
     */
    public static double SDL_round(double x) {
        var mh$ = SDL_round$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"SDL_roundf");
    }
    /**
     * {@snippet :
     * float SDL_roundf(float x);
     * }
     */
    public static float SDL_roundf(float x) {
        var mh$ = SDL_roundf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lround$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"SDL_lround");
    }
    /**
     * {@snippet :
     * long SDL_lround(double x);
     * }
     */
    public static int SDL_lround(double x) {
        var mh$ = SDL_lround$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"SDL_lroundf");
    }
    /**
     * {@snippet :
     * long SDL_lroundf(float x);
     * }
     */
    public static int SDL_lroundf(float x) {
        var mh$ = SDL_lroundf$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"SDL_scalbn");
    }
    /**
     * {@snippet :
     * double SDL_scalbn(double x, int n);
     * }
     */
    public static double SDL_scalbn(double x, int n) {
        var mh$ = SDL_scalbn$MH();
        try {
            return (double)mh$.invokeExact(x, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"SDL_scalbnf");
    }
    /**
     * {@snippet :
     * float SDL_scalbnf(float x, int n);
     * }
     */
    public static float SDL_scalbnf(float x, int n) {
        var mh$ = SDL_scalbnf$MH();
        try {
            return (float)mh$.invokeExact(x, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sin$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"SDL_sin");
    }
    /**
     * {@snippet :
     * double SDL_sin(double x);
     * }
     */
    public static double SDL_sin(double x) {
        var mh$ = SDL_sin$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"SDL_sinf");
    }
    /**
     * {@snippet :
     * float SDL_sinf(float x);
     * }
     */
    public static float SDL_sinf(float x) {
        var mh$ = SDL_sinf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"SDL_sqrt");
    }
    /**
     * {@snippet :
     * double SDL_sqrt(double x);
     * }
     */
    public static double SDL_sqrt(double x) {
        var mh$ = SDL_sqrt$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"SDL_sqrtf");
    }
    /**
     * {@snippet :
     * float SDL_sqrtf(float x);
     * }
     */
    public static float SDL_sqrtf(float x) {
        var mh$ = SDL_sqrtf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tan$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"SDL_tan");
    }
    /**
     * {@snippet :
     * double SDL_tan(double x);
     * }
     */
    public static double SDL_tan(double x) {
        var mh$ = SDL_tan$MH();
        try {
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"SDL_tanf");
    }
    /**
     * {@snippet :
     * float SDL_tanf(float x);
     * }
     */
    public static float SDL_tanf(float x) {
        var mh$ = SDL_tanf$MH();
        try {
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _SDL_iconv_t* SDL_iconv_t;
     * }
     */
    public static final AddressLayout SDL_iconv_t = RuntimeHelper.POINTER;
    public static MethodHandle SDL_iconv_open$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"SDL_iconv_open");
    }
    /**
     * {@snippet :
     * struct _SDL_iconv_t* SDL_iconv_open(char* tocode, char* fromcode);
     * }
     */
    public static MemorySegment SDL_iconv_open(MemorySegment tocode, MemorySegment fromcode) {
        var mh$ = SDL_iconv_open$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tocode, fromcode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv_close$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"SDL_iconv_close");
    }
    /**
     * {@snippet :
     * int SDL_iconv_close(struct _SDL_iconv_t* cd);
     * }
     */
    public static int SDL_iconv_close(MemorySegment cd) {
        var mh$ = SDL_iconv_close$MH();
        try {
            return (int)mh$.invokeExact(cd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"SDL_iconv");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_iconv(struct _SDL_iconv_t* cd, char** inbuf, unsigned long long* inbytesleft, char** outbuf, unsigned long long* outbytesleft);
     * }
     */
    public static long SDL_iconv(MemorySegment cd, MemorySegment inbuf, MemorySegment inbytesleft, MemorySegment outbuf, MemorySegment outbytesleft) {
        var mh$ = SDL_iconv$MH();
        try {
            return (long)mh$.invokeExact(cd, inbuf, inbytesleft, outbuf, outbytesleft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_iconv_string$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"SDL_iconv_string");
    }
    /**
     * {@snippet :
     * char* SDL_iconv_string(char* tocode, char* fromcode, char* inbuf, unsigned long long inbytesleft);
     * }
     */
    public static MemorySegment SDL_iconv_string(MemorySegment tocode, MemorySegment fromcode, MemorySegment inbuf, long inbytesleft) {
        var mh$ = SDL_iconv_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tocode, fromcode, inbuf, inbytesleft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SetError$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"SDL_SetError");
    }
    /**
     * {@snippet :
     * int SDL_SetError(char* fmt,...);
     * }
     */
    public static int SDL_SetError(MemorySegment fmt, Object... x1) {
        var mh$ = SDL_SetError$MH();
        try {
            return (int)mh$.invokeExact(fmt, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetError$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"SDL_GetError");
    }
    /**
     * {@snippet :
     * char* SDL_GetError();
     * }
     */
    public static MemorySegment SDL_GetError() {
        var mh$ = SDL_GetError$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetErrorMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"SDL_GetErrorMsg");
    }
    /**
     * {@snippet :
     * char* SDL_GetErrorMsg(char* errstr, int maxlen);
     * }
     */
    public static MemorySegment SDL_GetErrorMsg(MemorySegment errstr, int maxlen) {
        var mh$ = SDL_GetErrorMsg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(errstr, maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ClearError$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"SDL_ClearError");
    }
    /**
     * {@snippet :
     * void SDL_ClearError();
     * }
     */
    public static void SDL_ClearError() {
        var mh$ = SDL_ClearError$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_ENOMEM = 0;
     * }
     */
    public static int SDL_ENOMEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFREAD = 1;
     * }
     */
    public static int SDL_EFREAD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFWRITE = 2;
     * }
     */
    public static int SDL_EFWRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_EFSEEK = 3;
     * }
     */
    public static int SDL_EFSEEK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_UNSUPPORTED = 4;
     * }
     */
    public static int SDL_UNSUPPORTED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_errorcode.SDL_LASTERROR = 5;
     * }
     */
    public static int SDL_LASTERROR() {
        return (int)5L;
    }
    public static MethodHandle SDL_Error$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5,"SDL_Error");
    }
    /**
     * {@snippet :
     * int SDL_Error(enum SDL_errorcode code);
     * }
     */
    public static int SDL_Error(int code) {
        var mh$ = SDL_Error$MH();
        try {
            return (int)mh$.invokeExact(code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"SDL_RWFromFile");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromFile(char* file, char* mode);
     * }
     */
    public static MemorySegment SDL_RWFromFile(MemorySegment file, MemorySegment mode) {
        var mh$ = SDL_RWFromFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromFP$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"SDL_RWFromFP");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromFP(struct _iobuf* fp, enum SDL_bool autoclose);
     * }
     */
    public static MemorySegment SDL_RWFromFP(MemorySegment fp, int autoclose) {
        var mh$ = SDL_RWFromFP$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fp, autoclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromMem$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"SDL_RWFromMem");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWFromConstMem$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"SDL_RWFromConstMem");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_RWFromConstMem(void* mem, int size);
     * }
     */
    public static MemorySegment SDL_RWFromConstMem(MemorySegment mem, int size) {
        var mh$ = SDL_RWFromConstMem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_AllocRW$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"SDL_AllocRW");
    }
    /**
     * {@snippet :
     * struct SDL_RWops* SDL_AllocRW();
     * }
     */
    public static MemorySegment SDL_AllocRW() {
        var mh$ = SDL_AllocRW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_FreeRW$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"SDL_FreeRW");
    }
    /**
     * {@snippet :
     * void SDL_FreeRW(struct SDL_RWops* area);
     * }
     */
    public static void SDL_FreeRW(MemorySegment area) {
        var mh$ = SDL_FreeRW$MH();
        try {
            mh$.invokeExact(area);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWsize$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"SDL_RWsize");
    }
    /**
     * {@snippet :
     * long long SDL_RWsize(struct SDL_RWops* context);
     * }
     */
    public static long SDL_RWsize(MemorySegment context) {
        var mh$ = SDL_RWsize$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWseek$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"SDL_RWseek");
    }
    /**
     * {@snippet :
     * long long SDL_RWseek(struct SDL_RWops* context, long long offset, int whence);
     * }
     */
    public static long SDL_RWseek(MemorySegment context, long offset, int whence) {
        var mh$ = SDL_RWseek$MH();
        try {
            return (long)mh$.invokeExact(context, offset, whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWtell$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"SDL_RWtell");
    }
    /**
     * {@snippet :
     * long long SDL_RWtell(struct SDL_RWops* context);
     * }
     */
    public static long SDL_RWtell(MemorySegment context) {
        var mh$ = SDL_RWtell$MH();
        try {
            return (long)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWread$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"SDL_RWread");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_RWread(struct SDL_RWops* context, void* ptr, unsigned long long size, unsigned long long maxnum);
     * }
     */
    public static long SDL_RWread(MemorySegment context, MemorySegment ptr, long size, long maxnum) {
        var mh$ = SDL_RWread$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, maxnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"SDL_RWwrite");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_RWwrite(struct SDL_RWops* context, void* ptr, unsigned long long size, unsigned long long num);
     * }
     */
    public static long SDL_RWwrite(MemorySegment context, MemorySegment ptr, long size, long num) {
        var mh$ = SDL_RWwrite$MH();
        try {
            return (long)mh$.invokeExact(context, ptr, size, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_RWclose$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"SDL_RWclose");
    }
    /**
     * {@snippet :
     * int SDL_RWclose(struct SDL_RWops* context);
     * }
     */
    public static int SDL_RWclose(MemorySegment context) {
        var mh$ = SDL_RWclose$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile_RW$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"SDL_LoadFile_RW");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile_RW(struct SDL_RWops* src, unsigned long long* datasize, int freesrc);
     * }
     */
    public static MemorySegment SDL_LoadFile_RW(MemorySegment src, MemorySegment datasize, int freesrc) {
        var mh$ = SDL_LoadFile_RW$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(src, datasize, freesrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LoadFile$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"SDL_LoadFile");
    }
    /**
     * {@snippet :
     * void* SDL_LoadFile(char* file, unsigned long long* datasize);
     * }
     */
    public static MemorySegment SDL_LoadFile(MemorySegment file, MemorySegment datasize) {
        var mh$ = SDL_LoadFile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file, datasize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadU8$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"SDL_ReadU8");
    }
    /**
     * {@snippet :
     * unsigned char SDL_ReadU8(struct SDL_RWops* src);
     * }
     */
    public static byte SDL_ReadU8(MemorySegment src) {
        var mh$ = SDL_ReadU8$MH();
        try {
            return (byte)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$6,"SDL_ReadLE16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_ReadLE16(struct SDL_RWops* src);
     * }
     */
    public static short SDL_ReadLE16(MemorySegment src) {
        var mh$ = SDL_ReadLE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"SDL_ReadBE16");
    }
    /**
     * {@snippet :
     * unsigned short SDL_ReadBE16(struct SDL_RWops* src);
     * }
     */
    public static short SDL_ReadBE16(MemorySegment src) {
        var mh$ = SDL_ReadBE16$MH();
        try {
            return (short)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"SDL_ReadLE32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_ReadLE32(struct SDL_RWops* src);
     * }
     */
    public static int SDL_ReadLE32(MemorySegment src) {
        var mh$ = SDL_ReadLE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"SDL_ReadBE32");
    }
    /**
     * {@snippet :
     * unsigned int SDL_ReadBE32(struct SDL_RWops* src);
     * }
     */
    public static int SDL_ReadBE32(MemorySegment src) {
        var mh$ = SDL_ReadBE32$MH();
        try {
            return (int)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"SDL_ReadLE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_ReadLE64(struct SDL_RWops* src);
     * }
     */
    public static long SDL_ReadLE64(MemorySegment src) {
        var mh$ = SDL_ReadLE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_ReadBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"SDL_ReadBE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_ReadBE64(struct SDL_RWops* src);
     * }
     */
    public static long SDL_ReadBE64(MemorySegment src) {
        var mh$ = SDL_ReadBE64$MH();
        try {
            return (long)mh$.invokeExact(src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteU8$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$6,"SDL_WriteU8");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteU8(struct SDL_RWops* dst, unsigned char value);
     * }
     */
    public static long SDL_WriteU8(MemorySegment dst, byte value) {
        var mh$ = SDL_WriteU8$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE16$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"SDL_WriteLE16");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE16(struct SDL_RWops* dst, unsigned short value);
     * }
     */
    public static long SDL_WriteLE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteLE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE16$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"SDL_WriteBE16");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE16(struct SDL_RWops* dst, unsigned short value);
     * }
     */
    public static long SDL_WriteBE16(MemorySegment dst, short value) {
        var mh$ = SDL_WriteBE16$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE32$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"SDL_WriteLE32");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE32(struct SDL_RWops* dst, unsigned int value);
     * }
     */
    public static long SDL_WriteLE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteLE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE32$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"SDL_WriteBE32");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE32(struct SDL_RWops* dst, unsigned int value);
     * }
     */
    public static long SDL_WriteBE32(MemorySegment dst, int value) {
        var mh$ = SDL_WriteBE32$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteLE64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0,"SDL_WriteLE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteLE64(struct SDL_RWops* dst, unsigned long long value);
     * }
     */
    public static long SDL_WriteLE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteLE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_WriteBE64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"SDL_WriteBE64");
    }
    /**
     * {@snippet :
     * unsigned long long SDL_WriteBE64(struct SDL_RWops* dst, unsigned long long value);
     * }
     */
    public static long SDL_WriteBE64(MemorySegment dst, long value) {
        var mh$ = SDL_WriteBE64$MH();
        try {
            return (long)mh$.invokeExact(dst, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_SensorID;
     * }
     */
    public static final OfInt SDL_SensorID = JAVA_INT;
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_INVALID = -1;
     * }
     */
    public static int SDL_SENSOR_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_UNKNOWN = 0;
     * }
     */
    public static int SDL_SENSOR_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL = 1;
     * }
     */
    public static int SDL_SENSOR_ACCEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO = 2;
     * }
     */
    public static int SDL_SENSOR_GYRO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL_L = 3;
     * }
     */
    public static int SDL_SENSOR_ACCEL_L() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO_L = 4;
     * }
     */
    public static int SDL_SENSOR_GYRO_L() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_ACCEL_R = 5;
     * }
     */
    public static int SDL_SENSOR_ACCEL_R() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_SensorType.SDL_SENSOR_GYRO_R = 6;
     * }
     */
    public static int SDL_SENSOR_GYRO_R() {
        return (int)6L;
    }
    public static MethodHandle SDL_LockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"SDL_LockSensors");
    }
    /**
     * {@snippet :
     * void SDL_LockSensors();
     * }
     */
    public static void SDL_LockSensors() {
        var mh$ = SDL_LockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"SDL_UnlockSensors");
    }
    /**
     * {@snippet :
     * void SDL_UnlockSensors();
     * }
     */
    public static void SDL_UnlockSensors() {
        var mh$ = SDL_UnlockSensors$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumSensors$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"SDL_NumSensors");
    }
    /**
     * {@snippet :
     * int SDL_NumSensors();
     * }
     */
    public static int SDL_NumSensors() {
        var mh$ = SDL_NumSensors$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceName$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$6,"SDL_SensorGetDeviceName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetDeviceName(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorGetDeviceName(int device_index) {
        var mh$ = SDL_SensorGetDeviceName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0,"SDL_SensorGetDeviceType");
    }
    /**
     * {@snippet :
     * enum SDL_SensorType SDL_SensorGetDeviceType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceType(int device_index) {
        var mh$ = SDL_SensorGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"SDL_SensorGetDeviceNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDeviceNonPortableType(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceNonPortableType(int device_index) {
        var mh$ = SDL_SensorGetDeviceNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"SDL_SensorGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_SensorGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_SensorGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"SDL_SensorOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_Sensor* SDL_SensorOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_SensorOpen(int device_index) {
        var mh$ = SDL_SensorOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"SDL_SensorFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_Sensor* SDL_SensorFromInstanceID(int instance_id);
     * }
     */
    public static MemorySegment SDL_SensorFromInstanceID(int instance_id) {
        var mh$ = SDL_SensorFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetName$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"SDL_SensorGetName");
    }
    /**
     * {@snippet :
     * char* SDL_SensorGetName(struct _SDL_Sensor* sensor);
     * }
     */
    public static MemorySegment SDL_SensorGetName(MemorySegment sensor) {
        var mh$ = SDL_SensorGetName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"SDL_SensorGetType");
    }
    /**
     * {@snippet :
     * enum SDL_SensorType SDL_SensorGetType(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetNonPortableType$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"SDL_SensorGetNonPortableType");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetNonPortableType(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetNonPortableType(MemorySegment sensor) {
        var mh$ = SDL_SensorGetNonPortableType$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"SDL_SensorGetInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetInstanceID(struct _SDL_Sensor* sensor);
     * }
     */
    public static int SDL_SensorGetInstanceID(MemorySegment sensor) {
        var mh$ = SDL_SensorGetInstanceID$MH();
        try {
            return (int)mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"SDL_SensorGetData");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetData(struct _SDL_Sensor* sensor, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetData(MemorySegment sensor, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetData$MH();
        try {
            return (int)mh$.invokeExact(sensor, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorGetDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"SDL_SensorGetDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_SensorGetDataWithTimestamp(struct _SDL_Sensor* sensor, unsigned long long* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_SensorGetDataWithTimestamp(MemorySegment sensor, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_SensorGetDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(sensor, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorClose$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"SDL_SensorClose");
    }
    /**
     * {@snippet :
     * void SDL_SensorClose(struct _SDL_Sensor* sensor);
     * }
     */
    public static void SDL_SensorClose(MemorySegment sensor) {
        var mh$ = SDL_SensorClose$MH();
        try {
            mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SensorUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"SDL_SensorUpdate");
    }
    /**
     * {@snippet :
     * void SDL_SensorUpdate();
     * }
     */
    public static void SDL_SensorUpdate() {
        var mh$ = SDL_SensorUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GUIDToString$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"SDL_GUIDToString");
    }
    /**
     * {@snippet :
     * void SDL_GUIDToString(struct SDL_GUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_GUIDToString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_GUIDToString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$6,"SDL_GUIDFromString");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_GUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_GUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_GUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"SDL_CreateMutex");
    }
    /**
     * {@snippet :
     * struct SDL_mutex* SDL_CreateMutex();
     * }
     */
    public static MemorySegment SDL_CreateMutex() {
        var mh$ = SDL_CreateMutex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_LockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"SDL_LockMutex");
    }
    /**
     * {@snippet :
     * int SDL_LockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_LockMutex(MemorySegment mutex) {
        var mh$ = SDL_LockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_TryLockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"SDL_TryLockMutex");
    }
    /**
     * {@snippet :
     * int SDL_TryLockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_TryLockMutex(MemorySegment mutex) {
        var mh$ = SDL_TryLockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"SDL_UnlockMutex");
    }
    /**
     * {@snippet :
     * int SDL_UnlockMutex(struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_UnlockMutex(MemorySegment mutex) {
        var mh$ = SDL_UnlockMutex$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyMutex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"SDL_DestroyMutex");
    }
    /**
     * {@snippet :
     * void SDL_DestroyMutex(struct SDL_mutex* mutex);
     * }
     */
    public static void SDL_DestroyMutex(MemorySegment mutex) {
        var mh$ = SDL_DestroyMutex$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateSemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"SDL_CreateSemaphore");
    }
    /**
     * {@snippet :
     * struct SDL_semaphore* SDL_CreateSemaphore(unsigned int initial_value);
     * }
     */
    public static MemorySegment SDL_CreateSemaphore(int initial_value) {
        var mh$ = SDL_CreateSemaphore$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(initial_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroySemaphore$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"SDL_DestroySemaphore");
    }
    /**
     * {@snippet :
     * void SDL_DestroySemaphore(struct SDL_semaphore* sem);
     * }
     */
    public static void SDL_DestroySemaphore(MemorySegment sem) {
        var mh$ = SDL_DestroySemaphore$MH();
        try {
            mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWait$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"SDL_SemWait");
    }
    /**
     * {@snippet :
     * int SDL_SemWait(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemWait(MemorySegment sem) {
        var mh$ = SDL_SemWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemTryWait$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"SDL_SemTryWait");
    }
    /**
     * {@snippet :
     * int SDL_SemTryWait(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemTryWait(MemorySegment sem) {
        var mh$ = SDL_SemTryWait$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"SDL_SemWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_SemWaitTimeout(struct SDL_semaphore* sem, unsigned int timeout);
     * }
     */
    public static int SDL_SemWaitTimeout(MemorySegment sem, int timeout) {
        var mh$ = SDL_SemWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(sem, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemPost$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"SDL_SemPost");
    }
    /**
     * {@snippet :
     * int SDL_SemPost(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemPost(MemorySegment sem) {
        var mh$ = SDL_SemPost$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_SemValue$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"SDL_SemValue");
    }
    /**
     * {@snippet :
     * unsigned int SDL_SemValue(struct SDL_semaphore* sem);
     * }
     */
    public static int SDL_SemValue(MemorySegment sem) {
        var mh$ = SDL_SemValue$MH();
        try {
            return (int)mh$.invokeExact(sem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CreateCond$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"SDL_CreateCond");
    }
    /**
     * {@snippet :
     * struct SDL_cond* SDL_CreateCond();
     * }
     */
    public static MemorySegment SDL_CreateCond() {
        var mh$ = SDL_CreateCond$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_DestroyCond$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"SDL_DestroyCond");
    }
    /**
     * {@snippet :
     * void SDL_DestroyCond(struct SDL_cond* cond);
     * }
     */
    public static void SDL_DestroyCond(MemorySegment cond) {
        var mh$ = SDL_DestroyCond$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondSignal$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"SDL_CondSignal");
    }
    /**
     * {@snippet :
     * int SDL_CondSignal(struct SDL_cond* cond);
     * }
     */
    public static int SDL_CondSignal(MemorySegment cond) {
        var mh$ = SDL_CondSignal$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondBroadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"SDL_CondBroadcast");
    }
    /**
     * {@snippet :
     * int SDL_CondBroadcast(struct SDL_cond* cond);
     * }
     */
    public static int SDL_CondBroadcast(MemorySegment cond) {
        var mh$ = SDL_CondBroadcast$MH();
        try {
            return (int)mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWait$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"SDL_CondWait");
    }
    /**
     * {@snippet :
     * int SDL_CondWait(struct SDL_cond* cond, struct SDL_mutex* mutex);
     * }
     */
    public static int SDL_CondWait(MemorySegment cond, MemorySegment mutex) {
        var mh$ = SDL_CondWait$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_CondWaitTimeout$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"SDL_CondWaitTimeout");
    }
    /**
     * {@snippet :
     * int SDL_CondWaitTimeout(struct SDL_cond* cond, struct SDL_mutex* mutex, unsigned int ms);
     * }
     */
    public static int SDL_CondWaitTimeout(MemorySegment cond, MemorySegment mutex, int ms) {
        var mh$ = SDL_CondWaitTimeout$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int SDL_JoystickID;
     * }
     */
    public static final OfInt SDL_JoystickID = JAVA_INT;
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GAMECONTROLLER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_WHEEL = 2;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_WHEEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_STICK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_FLIGHT_STICK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DANCE_PAD() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_GUITAR = 6;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_GUITAR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_DRUM_KIT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_ARCADE_PAD() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType.SDL_JOYSTICK_TYPE_THROTTLE = 9;
     * }
     */
    public static int SDL_JOYSTICK_TYPE_THROTTLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_UNKNOWN = -1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_EMPTY = 0;
     * }
     */
    public static int SDL_JOYSTICK_POWER_EMPTY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_LOW = 1;
     * }
     */
    public static int SDL_JOYSTICK_POWER_LOW() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MEDIUM = 2;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MEDIUM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_FULL = 3;
     * }
     */
    public static int SDL_JOYSTICK_POWER_FULL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_WIRED = 4;
     * }
     */
    public static int SDL_JOYSTICK_POWER_WIRED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel.SDL_JOYSTICK_POWER_MAX = 5;
     * }
     */
    public static int SDL_JOYSTICK_POWER_MAX() {
        return (int)5L;
    }
    public static MethodHandle SDL_LockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"SDL_LockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_LockJoysticks();
     * }
     */
    public static void SDL_LockJoysticks() {
        var mh$ = SDL_LockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_UnlockJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"SDL_UnlockJoysticks");
    }
    /**
     * {@snippet :
     * void SDL_UnlockJoysticks();
     * }
     */
    public static void SDL_UnlockJoysticks() {
        var mh$ = SDL_UnlockJoysticks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_NumJoysticks$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"SDL_NumJoysticks");
    }
    /**
     * {@snippet :
     * int SDL_NumJoysticks();
     * }
     */
    public static int SDL_NumJoysticks() {
        var mh$ = SDL_NumJoysticks$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"SDL_JoystickNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickNameForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickNameForIndex(int device_index) {
        var mh$ = SDL_JoystickNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"SDL_JoystickPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPathForIndex(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickPathForIndex(int device_index) {
        var mh$ = SDL_JoystickPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDevicePlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"SDL_JoystickGetDevicePlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetDevicePlayerIndex(int device_index);
     * }
     */
    public static int SDL_JoystickGetDevicePlayerIndex(int device_index) {
        var mh$ = SDL_JoystickGetDevicePlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"SDL_JoystickGetDeviceGUID");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetDeviceGUID(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickGetDeviceGUID(SegmentAllocator allocator, int device_index) {
        var mh$ = SDL_JoystickGetDeviceGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"SDL_JoystickGetDeviceVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceVendor(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceVendor(int device_index) {
        var mh$ = SDL_JoystickGetDeviceVendor$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"SDL_JoystickGetDeviceProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceProduct(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProduct(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProduct$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"SDL_JoystickGetDeviceProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetDeviceProductVersion(int device_index);
     * }
     */
    public static short SDL_JoystickGetDeviceProductVersion(int device_index) {
        var mh$ = SDL_JoystickGetDeviceProductVersion$MH();
        try {
            return (short)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceType$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"SDL_JoystickGetDeviceType");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceType(int device_index) {
        var mh$ = SDL_JoystickGetDeviceType$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetDeviceInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"SDL_JoystickGetDeviceInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetDeviceInstanceID(int device_index);
     * }
     */
    public static int SDL_JoystickGetDeviceInstanceID(int device_index) {
        var mh$ = SDL_JoystickGetDeviceInstanceID$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"SDL_JoystickOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickOpen(int device_index);
     * }
     */
    public static MemorySegment SDL_JoystickOpen(int device_index) {
        var mh$ = SDL_JoystickOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"SDL_JoystickFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickFromInstanceID(int instance_id);
     * }
     */
    public static MemorySegment SDL_JoystickFromInstanceID(int instance_id) {
        var mh$ = SDL_JoystickFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(instance_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"SDL_JoystickFromPlayerIndex");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_JoystickFromPlayerIndex(int player_index) {
        var mh$ = SDL_JoystickFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"SDL_JoystickAttachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtual(enum SDL_JoystickType type, int naxes, int nbuttons, int nhats);
     * }
     */
    public static int SDL_JoystickAttachVirtual(int type, int naxes, int nbuttons, int nhats) {
        var mh$ = SDL_JoystickAttachVirtual$MH();
        try {
            return (int)mh$.invokeExact(type, naxes, nbuttons, nhats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickAttachVirtualEx$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"SDL_JoystickAttachVirtualEx");
    }
    /**
     * {@snippet :
     * int SDL_JoystickAttachVirtualEx(struct SDL_VirtualJoystickDesc* desc);
     * }
     */
    public static int SDL_JoystickAttachVirtualEx(MemorySegment desc) {
        var mh$ = SDL_JoystickAttachVirtualEx$MH();
        try {
            return (int)mh$.invokeExact(desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickDetachVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"SDL_JoystickDetachVirtual");
    }
    /**
     * {@snippet :
     * int SDL_JoystickDetachVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickDetachVirtual(int device_index) {
        var mh$ = SDL_JoystickDetachVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickIsVirtual$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"SDL_JoystickIsVirtual");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickIsVirtual(int device_index);
     * }
     */
    public static int SDL_JoystickIsVirtual(int device_index) {
        var mh$ = SDL_JoystickIsVirtual$MH();
        try {
            return (int)mh$.invokeExact(device_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"SDL_JoystickSetVirtualAxis");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualAxis(struct _SDL_Joystick* joystick, int axis, short value);
     * }
     */
    public static int SDL_JoystickSetVirtualAxis(MemorySegment joystick, int axis, short value) {
        var mh$ = SDL_JoystickSetVirtualAxis$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualButton$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"SDL_JoystickSetVirtualButton");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualButton(struct _SDL_Joystick* joystick, int button, unsigned char value);
     * }
     */
    public static int SDL_JoystickSetVirtualButton(MemorySegment joystick, int button, byte value) {
        var mh$ = SDL_JoystickSetVirtualButton$MH();
        try {
            return (int)mh$.invokeExact(joystick, button, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetVirtualHat$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"SDL_JoystickSetVirtualHat");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetVirtualHat(struct _SDL_Joystick* joystick, int hat, unsigned char value);
     * }
     */
    public static int SDL_JoystickSetVirtualHat(MemorySegment joystick, int hat, byte value) {
        var mh$ = SDL_JoystickSetVirtualHat$MH();
        try {
            return (int)mh$.invokeExact(joystick, hat, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickName$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"SDL_JoystickName");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickName(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickName(MemorySegment joystick) {
        var mh$ = SDL_JoystickName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickPath$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"SDL_JoystickPath");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickPath(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickPath(MemorySegment joystick) {
        var mh$ = SDL_JoystickPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"SDL_JoystickGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetPlayerIndex(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetPlayerIndex(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"SDL_JoystickSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_JoystickSetPlayerIndex(struct _SDL_Joystick* joystick, int player_index);
     * }
     */
    public static void SDL_JoystickSetPlayerIndex(MemorySegment joystick, int player_index) {
        var mh$ = SDL_JoystickSetPlayerIndex$MH();
        try {
            mh$.invokeExact(joystick, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"SDL_JoystickGetGUID");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetGUID(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUID(SegmentAllocator allocator, MemorySegment joystick) {
        var mh$ = SDL_JoystickGetGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"SDL_JoystickGetVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetVendor(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetVendor(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetVendor$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"SDL_JoystickGetProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetProduct(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProduct(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProduct$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"SDL_JoystickGetProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetProductVersion(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetProductVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"SDL_JoystickGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_JoystickGetFirmwareVersion(struct _SDL_Joystick* joystick);
     * }
     */
    public static short SDL_JoystickGetFirmwareVersion(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"SDL_JoystickGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_JoystickGetSerial(struct _SDL_Joystick* joystick);
     * }
     */
    public static MemorySegment SDL_JoystickGetSerial(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"SDL_JoystickGetType");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickType SDL_JoystickGetType(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetType(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetType$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDString$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"SDL_JoystickGetGUIDString");
    }
    /**
     * {@snippet :
     * void SDL_JoystickGetGUIDString(struct SDL_GUID guid, char* pszGUID, int cbGUID);
     * }
     */
    public static void SDL_JoystickGetGUIDString(MemorySegment guid, MemorySegment pszGUID, int cbGUID) {
        var mh$ = SDL_JoystickGetGUIDString$MH();
        try {
            mh$.invokeExact(guid, pszGUID, cbGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetGUIDFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"SDL_JoystickGetGUIDFromString");
    }
    /**
     * {@snippet :
     * struct SDL_GUID SDL_JoystickGetGUIDFromString(char* pchGUID);
     * }
     */
    public static MemorySegment SDL_JoystickGetGUIDFromString(SegmentAllocator allocator, MemorySegment pchGUID) {
        var mh$ = SDL_JoystickGetGUIDFromString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pchGUID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GetJoystickGUIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"SDL_GetJoystickGUIDInfo");
    }
    /**
     * {@snippet :
     * void SDL_GetJoystickGUIDInfo(struct SDL_GUID guid, unsigned short* vendor, unsigned short* product, unsigned short* version, unsigned short* crc16);
     * }
     */
    public static void SDL_GetJoystickGUIDInfo(MemorySegment guid, MemorySegment vendor, MemorySegment product, MemorySegment version, MemorySegment crc16) {
        var mh$ = SDL_GetJoystickGUIDInfo$MH();
        try {
            mh$.invokeExact(guid, vendor, product, version, crc16);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"SDL_JoystickGetAttached");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickGetAttached(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickGetAttached(MemorySegment joystick) {
        var mh$ = SDL_JoystickGetAttached$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"SDL_JoystickInstanceID");
    }
    /**
     * {@snippet :
     * int SDL_JoystickInstanceID(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickInstanceID(MemorySegment joystick) {
        var mh$ = SDL_JoystickInstanceID$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumAxes$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"SDL_JoystickNumAxes");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumAxes(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumAxes(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumAxes$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumBalls$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"SDL_JoystickNumBalls");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumBalls(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumBalls(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumBalls$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumHats$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"SDL_JoystickNumHats");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumHats(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumHats(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumHats$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickNumButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"SDL_JoystickNumButtons");
    }
    /**
     * {@snippet :
     * int SDL_JoystickNumButtons(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickNumButtons(MemorySegment joystick) {
        var mh$ = SDL_JoystickNumButtons$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"SDL_JoystickUpdate");
    }
    /**
     * {@snippet :
     * void SDL_JoystickUpdate();
     * }
     */
    public static void SDL_JoystickUpdate() {
        var mh$ = SDL_JoystickUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"SDL_JoystickEventState");
    }
    /**
     * {@snippet :
     * int SDL_JoystickEventState(int state);
     * }
     */
    public static int SDL_JoystickEventState(int state) {
        var mh$ = SDL_JoystickEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$6,"SDL_JoystickGetAxis");
    }
    /**
     * {@snippet :
     * short SDL_JoystickGetAxis(struct _SDL_Joystick* joystick, int axis);
     * }
     */
    public static short SDL_JoystickGetAxis(MemorySegment joystick, int axis) {
        var mh$ = SDL_JoystickGetAxis$MH();
        try {
            return (short)mh$.invokeExact(joystick, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetAxisInitialState$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"SDL_JoystickGetAxisInitialState");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickGetAxisInitialState(struct _SDL_Joystick* joystick, int axis, short* state);
     * }
     */
    public static int SDL_JoystickGetAxisInitialState(MemorySegment joystick, int axis, MemorySegment state) {
        var mh$ = SDL_JoystickGetAxisInitialState$MH();
        try {
            return (int)mh$.invokeExact(joystick, axis, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetHat$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"SDL_JoystickGetHat");
    }
    /**
     * {@snippet :
     * unsigned char SDL_JoystickGetHat(struct _SDL_Joystick* joystick, int hat);
     * }
     */
    public static byte SDL_JoystickGetHat(MemorySegment joystick, int hat) {
        var mh$ = SDL_JoystickGetHat$MH();
        try {
            return (byte)mh$.invokeExact(joystick, hat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetBall$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$5,"SDL_JoystickGetBall");
    }
    /**
     * {@snippet :
     * int SDL_JoystickGetBall(struct _SDL_Joystick* joystick, int ball, int* dx, int* dy);
     * }
     */
    public static int SDL_JoystickGetBall(MemorySegment joystick, int ball, MemorySegment dx, MemorySegment dy) {
        var mh$ = SDL_JoystickGetBall$MH();
        try {
            return (int)mh$.invokeExact(joystick, ball, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$0,"SDL_JoystickGetButton");
    }
    /**
     * {@snippet :
     * unsigned char SDL_JoystickGetButton(struct _SDL_Joystick* joystick, int button);
     * }
     */
    public static byte SDL_JoystickGetButton(MemorySegment joystick, int button) {
        var mh$ = SDL_JoystickGetButton$MH();
        try {
            return (byte)mh$.invokeExact(joystick, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"SDL_JoystickRumble");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumble(struct _SDL_Joystick* joystick, unsigned short low_frequency_rumble, unsigned short high_frequency_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_JoystickRumble(MemorySegment joystick, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"SDL_JoystickRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_JoystickRumbleTriggers(struct _SDL_Joystick* joystick, unsigned short left_rumble, unsigned short right_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_JoystickRumbleTriggers(MemorySegment joystick, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_JoystickRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"SDL_JoystickHasLED");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasLED(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasLED(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasLED$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"SDL_JoystickHasRumble");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasRumble(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumble(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumble$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"SDL_JoystickHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_JoystickHasRumbleTriggers(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickHasRumbleTriggers(MemorySegment joystick) {
        var mh$ = SDL_JoystickHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"SDL_JoystickSetLED");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSetLED(struct _SDL_Joystick* joystick, unsigned char red, unsigned char green, unsigned char blue);
     * }
     */
    public static int SDL_JoystickSetLED(MemorySegment joystick, byte red, byte green, byte blue) {
        var mh$ = SDL_JoystickSetLED$MH();
        try {
            return (int)mh$.invokeExact(joystick, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"SDL_JoystickSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_JoystickSendEffect(struct _SDL_Joystick* joystick, void* data, int size);
     * }
     */
    public static int SDL_JoystickSendEffect(MemorySegment joystick, MemorySegment data, int size) {
        var mh$ = SDL_JoystickSendEffect$MH();
        try {
            return (int)mh$.invokeExact(joystick, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickClose$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"SDL_JoystickClose");
    }
    /**
     * {@snippet :
     * void SDL_JoystickClose(struct _SDL_Joystick* joystick);
     * }
     */
    public static void SDL_JoystickClose(MemorySegment joystick) {
        var mh$ = SDL_JoystickClose$MH();
        try {
            mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_JoystickCurrentPowerLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"SDL_JoystickCurrentPowerLevel");
    }
    /**
     * {@snippet :
     * enum SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(struct _SDL_Joystick* joystick);
     * }
     */
    public static int SDL_JoystickCurrentPowerLevel(MemorySegment joystick) {
        var mh$ = SDL_JoystickCurrentPowerLevel$MH();
        try {
            return (int)mh$.invokeExact(joystick);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_UNKNOWN = 0;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOX360 = 1;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOX360() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_XBOXONE = 2;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_XBOXONE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS3 = 3;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS3() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS4 = 4;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS4() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_VIRTUAL = 6;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_VIRTUAL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_PS5 = 7;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_PS5() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_AMAZON_LUNA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_GOOGLE_STADIA() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NVIDIA_SHIELD = 10;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NVIDIA_SHIELD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 11;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 12;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType.SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 13;
     * }
     */
    public static int SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_NONE = 0;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_BUTTON() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_AXIS = 2;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_AXIS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerBindType.SDL_CONTROLLER_BINDTYPE_HAT = 3;
     * }
     */
    public static int SDL_CONTROLLER_BINDTYPE_HAT() {
        return (int)3L;
    }
    public static MethodHandle SDL_GameControllerAddMappingsFromRW$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"SDL_GameControllerAddMappingsFromRW");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMappingsFromRW(struct SDL_RWops* rw, int freerw);
     * }
     */
    public static int SDL_GameControllerAddMappingsFromRW(MemorySegment rw, int freerw) {
        var mh$ = SDL_GameControllerAddMappingsFromRW$MH();
        try {
            return (int)mh$.invokeExact(rw, freerw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerAddMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"SDL_GameControllerAddMapping");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerAddMapping(char* mappingString);
     * }
     */
    public static int SDL_GameControllerAddMapping(MemorySegment mappingString) {
        var mh$ = SDL_GameControllerAddMapping$MH();
        try {
            return (int)mh$.invokeExact(mappingString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNumMappings$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"SDL_GameControllerNumMappings");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerNumMappings();
     * }
     */
    public static int SDL_GameControllerNumMappings() {
        var mh$ = SDL_GameControllerNumMappings$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"SDL_GameControllerMappingForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForIndex(int mapping_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForIndex(int mapping_index) {
        var mh$ = SDL_GameControllerMappingForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mapping_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForGUID$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$6,"SDL_GameControllerMappingForGUID");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForGUID(struct SDL_GUID guid);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForGUID(MemorySegment guid) {
        var mh$ = SDL_GameControllerMappingForGUID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"SDL_GameControllerMapping");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMapping(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerMapping(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerMapping$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_IsGameController$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"SDL_IsGameController");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_IsGameController(int joystick_index);
     * }
     */
    public static int SDL_IsGameController(int joystick_index) {
        var mh$ = SDL_IsGameController$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerNameForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"SDL_GameControllerNameForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerNameForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerNameForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerNameForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPathForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"SDL_GameControllerPathForIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPathForIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerPathForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerPathForIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerTypeForIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"SDL_GameControllerTypeForIndex");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);
     * }
     */
    public static int SDL_GameControllerTypeForIndex(int joystick_index) {
        var mh$ = SDL_GameControllerTypeForIndex$MH();
        try {
            return (int)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerMappingForDeviceIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"SDL_GameControllerMappingForDeviceIndex");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerMappingForDeviceIndex(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerMappingForDeviceIndex(int joystick_index) {
        var mh$ = SDL_GameControllerMappingForDeviceIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"SDL_GameControllerOpen");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerOpen(int joystick_index);
     * }
     */
    public static MemorySegment SDL_GameControllerOpen(int joystick_index) {
        var mh$ = SDL_GameControllerOpen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joystick_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromInstanceID$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"SDL_GameControllerFromInstanceID");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerFromInstanceID(int joyid);
     * }
     */
    public static MemorySegment SDL_GameControllerFromInstanceID(int joyid) {
        var mh$ = SDL_GameControllerFromInstanceID$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joyid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerFromPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"SDL_GameControllerFromPlayerIndex");
    }
    /**
     * {@snippet :
     * struct _SDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);
     * }
     */
    public static MemorySegment SDL_GameControllerFromPlayerIndex(int player_index) {
        var mh$ = SDL_GameControllerFromPlayerIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerName$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"SDL_GameControllerName");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerName(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerName(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerName$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerPath$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"SDL_GameControllerPath");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerPath(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerPath(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerPath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$5,"SDL_GameControllerGetType");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerType SDL_GameControllerGetType(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetType(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetType$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$0,"SDL_GameControllerGetPlayerIndex");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetPlayerIndex(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetPlayerIndex(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetPlayerIndex$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetPlayerIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"SDL_GameControllerSetPlayerIndex");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerSetPlayerIndex(struct _SDL_GameController* gamecontroller, int player_index);
     * }
     */
    public static void SDL_GameControllerSetPlayerIndex(MemorySegment gamecontroller, int player_index) {
        var mh$ = SDL_GameControllerSetPlayerIndex$MH();
        try {
            mh$.invokeExact(gamecontroller, player_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetVendor$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"SDL_GameControllerGetVendor");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetVendor(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetVendor(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetVendor$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProduct$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"SDL_GameControllerGetProduct");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetProduct(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProduct(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProduct$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetProductVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"SDL_GameControllerGetProductVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetProductVersion(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetProductVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetProductVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetFirmwareVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"SDL_GameControllerGetFirmwareVersion");
    }
    /**
     * {@snippet :
     * unsigned short SDL_GameControllerGetFirmwareVersion(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static short SDL_GameControllerGetFirmwareVersion(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetFirmwareVersion$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSerial$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$0,"SDL_GameControllerGetSerial");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetSerial(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetSerial(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetSerial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAttached$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"SDL_GameControllerGetAttached");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerGetAttached(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetAttached(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetAttached$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetJoystick$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"SDL_GameControllerGetJoystick");
    }
    /**
     * {@snippet :
     * struct _SDL_Joystick* SDL_GameControllerGetJoystick(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static MemorySegment SDL_GameControllerGetJoystick(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetJoystick$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerEventState$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"SDL_GameControllerEventState");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerEventState(int state);
     * }
     */
    public static int SDL_GameControllerEventState(int state) {
        var mh$ = SDL_GameControllerEventState$MH();
        try {
            return (int)mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"SDL_GameControllerUpdate");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerUpdate();
     * }
     */
    public static void SDL_GameControllerUpdate() {
        var mh$ = SDL_GameControllerUpdate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTX = 0;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_LEFTY = 1;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_LEFTY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTX = 2;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_RIGHTY = 3;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_RIGHTY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERLEFT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_TRIGGERRIGHT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis.SDL_CONTROLLER_AXIS_MAX = 6;
     * }
     */
    public static int SDL_CONTROLLER_AXIS_MAX() {
        return (int)6L;
    }
    public static MethodHandle SDL_GameControllerGetAxisFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"SDL_GameControllerGetAxisFromString");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetAxisFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetAxisFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"SDL_GameControllerGetStringForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForAxis(enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForAxis(int axis) {
        var mh$ = SDL_GameControllerGetStringForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"SDL_GameControllerGetBindForAxis");
    }
    /**
     * {@snippet :
     * struct SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForAxis(SegmentAllocator allocator, MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetBindForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"SDL_GameControllerHasAxis");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static int SDL_GameControllerHasAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerHasAxis$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"SDL_GameControllerGetAxis");
    }
    /**
     * {@snippet :
     * short SDL_GameControllerGetAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static short SDL_GameControllerGetAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAxis$MH();
        try {
            return (short)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_INVALID = -1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_INVALID() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_A = 0;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_A() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_B = 1;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_B() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_X = 2;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_X() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_Y = 3;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_Y() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_BACK = 4;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_BACK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_GUIDE = 5;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_GUIDE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_START = 6;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_START() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSTICK() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSTICK() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_LEFTSHOULDER() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_RIGHTSHOULDER() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_UP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_DOWN() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_LEFT() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_DPAD_RIGHT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MISC1 = 15;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MISC1() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE1() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE2() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE3() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_PADDLE4() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_TOUCHPAD() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton.SDL_CONTROLLER_BUTTON_MAX = 21;
     * }
     */
    public static int SDL_CONTROLLER_BUTTON_MAX() {
        return (int)21L;
    }
    public static MethodHandle SDL_GameControllerGetButtonFromString$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"SDL_GameControllerGetButtonFromString");
    }
    /**
     * {@snippet :
     * enum SDL_GameControllerButton SDL_GameControllerGetButtonFromString(char* str);
     * }
     */
    public static int SDL_GameControllerGetButtonFromString(MemorySegment str) {
        var mh$ = SDL_GameControllerGetButtonFromString$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetStringForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"SDL_GameControllerGetStringForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetStringForButton(enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetStringForButton(int button) {
        var mh$ = SDL_GameControllerGetStringForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetBindForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"SDL_GameControllerGetBindForButton");
    }
    /**
     * {@snippet :
     * struct SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetBindForButton(SegmentAllocator allocator, MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetBindForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasButton$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"SDL_GameControllerHasButton");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static int SDL_GameControllerHasButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerHasButton$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetButton$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"SDL_GameControllerGetButton");
    }
    /**
     * {@snippet :
     * unsigned char SDL_GameControllerGetButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static byte SDL_GameControllerGetButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetButton$MH();
        try {
            return (byte)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpads$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"SDL_GameControllerGetNumTouchpads");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpads(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpads(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerGetNumTouchpads$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetNumTouchpadFingers$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"SDL_GameControllerGetNumTouchpadFingers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetNumTouchpadFingers(struct _SDL_GameController* gamecontroller, int touchpad);
     * }
     */
    public static int SDL_GameControllerGetNumTouchpadFingers(MemorySegment gamecontroller, int touchpad) {
        var mh$ = SDL_GameControllerGetNumTouchpadFingers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetTouchpadFinger$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"SDL_GameControllerGetTouchpadFinger");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetTouchpadFinger(struct _SDL_GameController* gamecontroller, int touchpad, int finger, unsigned char* state, float* x, float* y, float* pressure);
     * }
     */
    public static int SDL_GameControllerGetTouchpadFinger(MemorySegment gamecontroller, int touchpad, int finger, MemorySegment state, MemorySegment x, MemorySegment y, MemorySegment pressure) {
        var mh$ = SDL_GameControllerGetTouchpadFinger$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, touchpad, finger, state, x, y, pressure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasSensor$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"SDL_GameControllerHasSensor");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasSensor(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerHasSensor(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerHasSensor$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"SDL_GameControllerSetSensorEnabled");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetSensorEnabled(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, enum SDL_bool enabled);
     * }
     */
    public static int SDL_GameControllerSetSensorEnabled(MemorySegment gamecontroller, int type, int enabled) {
        var mh$ = SDL_GameControllerSetSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerIsSensorEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"SDL_GameControllerIsSensorEnabled");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerIsSensorEnabled(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static int SDL_GameControllerIsSensorEnabled(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerIsSensorEnabled$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataRate$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"SDL_GameControllerGetSensorDataRate");
    }
    /**
     * {@snippet :
     * float SDL_GameControllerGetSensorDataRate(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type);
     * }
     */
    public static float SDL_GameControllerGetSensorDataRate(MemorySegment gamecontroller, int type) {
        var mh$ = SDL_GameControllerGetSensorDataRate$MH();
        try {
            return (float)mh$.invokeExact(gamecontroller, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorData$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"SDL_GameControllerGetSensorData");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorData(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorData(MemorySegment gamecontroller, int type, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorData$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetSensorDataWithTimestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"SDL_GameControllerGetSensorDataWithTimestamp");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerGetSensorDataWithTimestamp(struct _SDL_GameController* gamecontroller, enum SDL_SensorType type, unsigned long long* timestamp, float* data, int num_values);
     * }
     */
    public static int SDL_GameControllerGetSensorDataWithTimestamp(MemorySegment gamecontroller, int type, MemorySegment timestamp, MemorySegment data, int num_values) {
        var mh$ = SDL_GameControllerGetSensorDataWithTimestamp$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, type, timestamp, data, num_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"SDL_GameControllerRumble");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumble(struct _SDL_GameController* gamecontroller, unsigned short low_frequency_rumble, unsigned short high_frequency_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_GameControllerRumble(MemorySegment gamecontroller, short low_frequency_rumble, short high_frequency_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, low_frequency_rumble, high_frequency_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"SDL_GameControllerRumbleTriggers");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerRumbleTriggers(struct _SDL_GameController* gamecontroller, unsigned short left_rumble, unsigned short right_rumble, unsigned int duration_ms);
     * }
     */
    public static int SDL_GameControllerRumbleTriggers(MemorySegment gamecontroller, short left_rumble, short right_rumble, int duration_ms) {
        var mh$ = SDL_GameControllerRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, left_rumble, right_rumble, duration_ms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasLED$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"SDL_GameControllerHasLED");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasLED(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasLED(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumble$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"SDL_GameControllerHasRumble");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasRumble(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumble(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumble$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerHasRumbleTriggers$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"SDL_GameControllerHasRumbleTriggers");
    }
    /**
     * {@snippet :
     * enum SDL_bool SDL_GameControllerHasRumbleTriggers(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static int SDL_GameControllerHasRumbleTriggers(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerHasRumbleTriggers$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSetLED$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"SDL_GameControllerSetLED");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSetLED(struct _SDL_GameController* gamecontroller, unsigned char red, unsigned char green, unsigned char blue);
     * }
     */
    public static int SDL_GameControllerSetLED(MemorySegment gamecontroller, byte red, byte green, byte blue) {
        var mh$ = SDL_GameControllerSetLED$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerSendEffect$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"SDL_GameControllerSendEffect");
    }
    /**
     * {@snippet :
     * int SDL_GameControllerSendEffect(struct _SDL_GameController* gamecontroller, void* data, int size);
     * }
     */
    public static int SDL_GameControllerSendEffect(MemorySegment gamecontroller, MemorySegment data, int size) {
        var mh$ = SDL_GameControllerSendEffect$MH();
        try {
            return (int)mh$.invokeExact(gamecontroller, data, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerClose$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"SDL_GameControllerClose");
    }
    /**
     * {@snippet :
     * void SDL_GameControllerClose(struct _SDL_GameController* gamecontroller);
     * }
     */
    public static void SDL_GameControllerClose(MemorySegment gamecontroller) {
        var mh$ = SDL_GameControllerClose$MH();
        try {
            mh$.invokeExact(gamecontroller);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForButton$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"SDL_GameControllerGetAppleSFSymbolsNameForButton");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForButton(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerButton button);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForButton(MemorySegment gamecontroller, int button) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForButton$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, button);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$3,"SDL_GameControllerGetAppleSFSymbolsNameForAxis");
    }
    /**
     * {@snippet :
     * char* SDL_GameControllerGetAppleSFSymbolsNameForAxis(struct _SDL_GameController* gamecontroller, enum SDL_GameControllerAxis axis);
     * }
     */
    public static MemorySegment SDL_GameControllerGetAppleSFSymbolsNameForAxis(MemorySegment gamecontroller, int axis) {
        var mh$ = SDL_GameControllerGetAppleSFSymbolsNameForAxis$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(gamecontroller, axis);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define WINAPI_FAMILY_WINRT 0
     * }
     */
    public static int WINAPI_FAMILY_WINRT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_SIZE_MAX -1
     * }
     */
    public static long SDL_SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT8 127
     * }
     */
    public static byte SDL_MAX_SINT8() {
        return (byte)127L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT8 -128
     * }
     */
    public static byte SDL_MIN_SINT8() {
        return (byte)-128L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT8 255
     * }
     */
    public static byte SDL_MAX_UINT8() {
        return (byte)255L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT8 0
     * }
     */
    public static byte SDL_MIN_UINT8() {
        return (byte)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT16 32767
     * }
     */
    public static short SDL_MAX_SINT16() {
        return (short)32767L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT16 -32768
     * }
     */
    public static short SDL_MIN_SINT16() {
        return (short)-32768L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT16 65535
     * }
     */
    public static short SDL_MAX_UINT16() {
        return (short)65535L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT16 0
     * }
     */
    public static short SDL_MIN_UINT16() {
        return (short)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT32 2147483647
     * }
     */
    public static int SDL_MAX_SINT32() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT32 -2147483648
     * }
     */
    public static int SDL_MIN_SINT32() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT32 4294967295
     * }
     */
    public static int SDL_MAX_UINT32() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT32 0
     * }
     */
    public static int SDL_MIN_UINT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_SINT64 9223372036854775807
     * }
     */
    public static long SDL_MAX_SINT64() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_SINT64 -9223372036854775808
     * }
     */
    public static long SDL_MIN_SINT64() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define SDL_MAX_UINT64 -1
     * }
     */
    public static long SDL_MAX_UINT64() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_MIN_UINT64 0
     * }
     */
    public static long SDL_MIN_UINT64() {
        return 0L;
    }
    /**
     * {@snippet :
     * #define SDL_FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float SDL_FLT_EPSILON() {
        return 1.1920928955078125E-7f;
    }
    /**
     * {@snippet :
     * #define SDL_PRIs64 "I64d"
     * }
     */
    public static MemorySegment SDL_PRIs64() {
        return constants$79.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_PRIu64 "I64u"
     * }
     */
    public static MemorySegment SDL_PRIu64() {
        return constants$79.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_PRIx64 "I64x"
     * }
     */
    public static MemorySegment SDL_PRIx64() {
        return constants$80.const$0;
    }
    /**
     * {@snippet :
     * #define SDL_PRIX64 "I64X"
     * }
     */
    public static MemorySegment SDL_PRIX64() {
        return constants$80.const$1;
    }
    /**
     * {@snippet :
     * #define SDL_PRIs32 "d"
     * }
     */
    public static MemorySegment SDL_PRIs32() {
        return constants$80.const$2;
    }
    /**
     * {@snippet :
     * #define SDL_PRIu32 "u"
     * }
     */
    public static MemorySegment SDL_PRIu32() {
        return constants$80.const$3;
    }
    /**
     * {@snippet :
     * #define SDL_PRIx32 "x"
     * }
     */
    public static MemorySegment SDL_PRIx32() {
        return constants$80.const$4;
    }
    /**
     * {@snippet :
     * #define SDL_PRIX32 "X"
     * }
     */
    public static MemorySegment SDL_PRIX32() {
        return constants$80.const$5;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_ERROR -1
     * }
     */
    public static long SDL_ICONV_ERROR() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_E2BIG -2
     * }
     */
    public static long SDL_ICONV_E2BIG() {
        return -2L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_EILSEQ -3
     * }
     */
    public static long SDL_ICONV_EILSEQ() {
        return -3L;
    }
    /**
     * {@snippet :
     * #define SDL_ICONV_EINVAL -4
     * }
     */
    public static long SDL_ICONV_EINVAL() {
        return -4L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_UNKNOWN 0
     * }
     */
    public static int SDL_RWOPS_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_WINFILE 1
     * }
     */
    public static int SDL_RWOPS_WINFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_STDFILE 2
     * }
     */
    public static int SDL_RWOPS_STDFILE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_JNIFILE 3
     * }
     */
    public static int SDL_RWOPS_JNIFILE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY 4
     * }
     */
    public static int SDL_RWOPS_MEMORY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SDL_RWOPS_MEMORY_RO 5
     * }
     */
    public static int SDL_RWOPS_MEMORY_RO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SDL_STANDARD_GRAVITY 9.806650161743164
     * }
     */
    public static float SDL_STANDARD_GRAVITY() {
        return 9.806650161743164f;
    }
    /**
     * {@snippet :
     * #define SDL_MUTEX_MAXWAIT 4294967295
     * }
     */
    public static int SDL_MUTEX_MAXWAIT() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define SDL_IPHONE_MAX_GFORCE 5.0
     * }
     */
    public static double SDL_IPHONE_MAX_GFORCE() {
        return 5.0d;
    }
    /**
     * {@snippet :
     * #define SDL_JOYSTICK_AXIS_MIN -32768
     * }
     */
    public static int SDL_JOYSTICK_AXIS_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTUP 3
     * }
     */
    public static int SDL_HAT_RIGHTUP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_RIGHTDOWN 6
     * }
     */
    public static int SDL_HAT_RIGHTDOWN() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTUP 9
     * }
     */
    public static int SDL_HAT_LEFTUP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define SDL_HAT_LEFTDOWN 12
     * }
     */
    public static int SDL_HAT_LEFTDOWN() {
        return (int)12L;
    }
}


