// Generated by jextract

package sdl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct DS5EffectsState_t {
 *     unsigned char ucEnableBits1;
 *     unsigned char ucEnableBits2;
 *     unsigned char ucRumbleRight;
 *     unsigned char ucRumbleLeft;
 *     unsigned char ucHeadphoneVolume;
 *     unsigned char ucSpeakerVolume;
 *     unsigned char ucMicrophoneVolume;
 *     unsigned char ucAudioEnableBits;
 *     unsigned char ucMicLightMode;
 *     unsigned char ucAudioMuteBits;
 *     unsigned char rgucRightTriggerEffect[11];
 *     unsigned char rgucLeftTriggerEffect[11];
 *     unsigned char rgucUnknown1[6];
 *     unsigned char ucLedFlags;
 *     unsigned char rgucUnknown2[2];
 *     unsigned char ucLedAnim;
 *     unsigned char ucLedBrightness;
 *     unsigned char ucPadLights;
 *     unsigned char ucLedRed;
 *     unsigned char ucLedGreen;
 *     unsigned char ucLedBlue;
 * };
 * }
 */
public class DS5EffectsState_t {

    public static MemoryLayout $LAYOUT() {
        return constants$121.const$5;
    }
    public static VarHandle ucEnableBits1$VH() {
        return constants$122.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucEnableBits1;
     * }
     */
    public static byte ucEnableBits1$get(MemorySegment seg) {
        return (byte)constants$122.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucEnableBits1;
     * }
     */
    public static void ucEnableBits1$set(MemorySegment seg, byte x) {
        constants$122.const$0.set(seg, x);
    }
    public static byte ucEnableBits1$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ucEnableBits1$set(MemorySegment seg, long index, byte x) {
        constants$122.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucEnableBits2$VH() {
        return constants$122.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucEnableBits2;
     * }
     */
    public static byte ucEnableBits2$get(MemorySegment seg) {
        return (byte)constants$122.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucEnableBits2;
     * }
     */
    public static void ucEnableBits2$set(MemorySegment seg, byte x) {
        constants$122.const$1.set(seg, x);
    }
    public static byte ucEnableBits2$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ucEnableBits2$set(MemorySegment seg, long index, byte x) {
        constants$122.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucRumbleRight$VH() {
        return constants$122.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucRumbleRight;
     * }
     */
    public static byte ucRumbleRight$get(MemorySegment seg) {
        return (byte)constants$122.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucRumbleRight;
     * }
     */
    public static void ucRumbleRight$set(MemorySegment seg, byte x) {
        constants$122.const$2.set(seg, x);
    }
    public static byte ucRumbleRight$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ucRumbleRight$set(MemorySegment seg, long index, byte x) {
        constants$122.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucRumbleLeft$VH() {
        return constants$122.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucRumbleLeft;
     * }
     */
    public static byte ucRumbleLeft$get(MemorySegment seg) {
        return (byte)constants$122.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucRumbleLeft;
     * }
     */
    public static void ucRumbleLeft$set(MemorySegment seg, byte x) {
        constants$122.const$3.set(seg, x);
    }
    public static byte ucRumbleLeft$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ucRumbleLeft$set(MemorySegment seg, long index, byte x) {
        constants$122.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucHeadphoneVolume$VH() {
        return constants$122.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucHeadphoneVolume;
     * }
     */
    public static byte ucHeadphoneVolume$get(MemorySegment seg) {
        return (byte)constants$122.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucHeadphoneVolume;
     * }
     */
    public static void ucHeadphoneVolume$set(MemorySegment seg, byte x) {
        constants$122.const$4.set(seg, x);
    }
    public static byte ucHeadphoneVolume$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ucHeadphoneVolume$set(MemorySegment seg, long index, byte x) {
        constants$122.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucSpeakerVolume$VH() {
        return constants$122.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucSpeakerVolume;
     * }
     */
    public static byte ucSpeakerVolume$get(MemorySegment seg) {
        return (byte)constants$122.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucSpeakerVolume;
     * }
     */
    public static void ucSpeakerVolume$set(MemorySegment seg, byte x) {
        constants$122.const$5.set(seg, x);
    }
    public static byte ucSpeakerVolume$get(MemorySegment seg, long index) {
        return (byte)constants$122.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ucSpeakerVolume$set(MemorySegment seg, long index, byte x) {
        constants$122.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucMicrophoneVolume$VH() {
        return constants$123.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucMicrophoneVolume;
     * }
     */
    public static byte ucMicrophoneVolume$get(MemorySegment seg) {
        return (byte)constants$123.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucMicrophoneVolume;
     * }
     */
    public static void ucMicrophoneVolume$set(MemorySegment seg, byte x) {
        constants$123.const$0.set(seg, x);
    }
    public static byte ucMicrophoneVolume$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ucMicrophoneVolume$set(MemorySegment seg, long index, byte x) {
        constants$123.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucAudioEnableBits$VH() {
        return constants$123.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucAudioEnableBits;
     * }
     */
    public static byte ucAudioEnableBits$get(MemorySegment seg) {
        return (byte)constants$123.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucAudioEnableBits;
     * }
     */
    public static void ucAudioEnableBits$set(MemorySegment seg, byte x) {
        constants$123.const$1.set(seg, x);
    }
    public static byte ucAudioEnableBits$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ucAudioEnableBits$set(MemorySegment seg, long index, byte x) {
        constants$123.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucMicLightMode$VH() {
        return constants$123.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucMicLightMode;
     * }
     */
    public static byte ucMicLightMode$get(MemorySegment seg) {
        return (byte)constants$123.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucMicLightMode;
     * }
     */
    public static void ucMicLightMode$set(MemorySegment seg, byte x) {
        constants$123.const$2.set(seg, x);
    }
    public static byte ucMicLightMode$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ucMicLightMode$set(MemorySegment seg, long index, byte x) {
        constants$123.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucAudioMuteBits$VH() {
        return constants$123.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucAudioMuteBits;
     * }
     */
    public static byte ucAudioMuteBits$get(MemorySegment seg) {
        return (byte)constants$123.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucAudioMuteBits;
     * }
     */
    public static void ucAudioMuteBits$set(MemorySegment seg, byte x) {
        constants$123.const$3.set(seg, x);
    }
    public static byte ucAudioMuteBits$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ucAudioMuteBits$set(MemorySegment seg, long index, byte x) {
        constants$123.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgucRightTriggerEffect$slice(MemorySegment seg) {
        return seg.asSlice(10, 11);
    }
    public static MemorySegment rgucLeftTriggerEffect$slice(MemorySegment seg) {
        return seg.asSlice(21, 11);
    }
    public static MemorySegment rgucUnknown1$slice(MemorySegment seg) {
        return seg.asSlice(32, 6);
    }
    public static VarHandle ucLedFlags$VH() {
        return constants$123.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedFlags;
     * }
     */
    public static byte ucLedFlags$get(MemorySegment seg) {
        return (byte)constants$123.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedFlags;
     * }
     */
    public static void ucLedFlags$set(MemorySegment seg, byte x) {
        constants$123.const$4.set(seg, x);
    }
    public static byte ucLedFlags$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedFlags$set(MemorySegment seg, long index, byte x) {
        constants$123.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgucUnknown2$slice(MemorySegment seg) {
        return seg.asSlice(39, 2);
    }
    public static VarHandle ucLedAnim$VH() {
        return constants$123.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedAnim;
     * }
     */
    public static byte ucLedAnim$get(MemorySegment seg) {
        return (byte)constants$123.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedAnim;
     * }
     */
    public static void ucLedAnim$set(MemorySegment seg, byte x) {
        constants$123.const$5.set(seg, x);
    }
    public static byte ucLedAnim$get(MemorySegment seg, long index) {
        return (byte)constants$123.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedAnim$set(MemorySegment seg, long index, byte x) {
        constants$123.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucLedBrightness$VH() {
        return constants$124.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedBrightness;
     * }
     */
    public static byte ucLedBrightness$get(MemorySegment seg) {
        return (byte)constants$124.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedBrightness;
     * }
     */
    public static void ucLedBrightness$set(MemorySegment seg, byte x) {
        constants$124.const$0.set(seg, x);
    }
    public static byte ucLedBrightness$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedBrightness$set(MemorySegment seg, long index, byte x) {
        constants$124.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucPadLights$VH() {
        return constants$124.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucPadLights;
     * }
     */
    public static byte ucPadLights$get(MemorySegment seg) {
        return (byte)constants$124.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucPadLights;
     * }
     */
    public static void ucPadLights$set(MemorySegment seg, byte x) {
        constants$124.const$1.set(seg, x);
    }
    public static byte ucPadLights$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ucPadLights$set(MemorySegment seg, long index, byte x) {
        constants$124.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucLedRed$VH() {
        return constants$124.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedRed;
     * }
     */
    public static byte ucLedRed$get(MemorySegment seg) {
        return (byte)constants$124.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedRed;
     * }
     */
    public static void ucLedRed$set(MemorySegment seg, byte x) {
        constants$124.const$2.set(seg, x);
    }
    public static byte ucLedRed$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedRed$set(MemorySegment seg, long index, byte x) {
        constants$124.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucLedGreen$VH() {
        return constants$124.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedGreen;
     * }
     */
    public static byte ucLedGreen$get(MemorySegment seg) {
        return (byte)constants$124.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedGreen;
     * }
     */
    public static void ucLedGreen$set(MemorySegment seg, byte x) {
        constants$124.const$3.set(seg, x);
    }
    public static byte ucLedGreen$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedGreen$set(MemorySegment seg, long index, byte x) {
        constants$124.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ucLedBlue$VH() {
        return constants$124.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ucLedBlue;
     * }
     */
    public static byte ucLedBlue$get(MemorySegment seg) {
        return (byte)constants$124.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ucLedBlue;
     * }
     */
    public static void ucLedBlue$set(MemorySegment seg, byte x) {
        constants$124.const$4.set(seg, x);
    }
    public static byte ucLedBlue$get(MemorySegment seg, long index) {
        return (byte)constants$124.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ucLedBlue$set(MemorySegment seg, long index, byte x) {
        constants$124.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


